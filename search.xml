<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>微信小程序（二）</title>
      <link href="/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%8C/"/>
      <url>/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="WXSS模板语法"><a href="#WXSS模板语法" class="headerlink" title="WXSS模板语法"></a>WXSS模板语法</h1><p>WXSS（Weixin Style Sheet)是一套样式语言，用于美化WXML组件样式，类似CSS</p><p>WXSS具有CSS的大部分特性，扩展特性包括</p><ul><li>rpx尺寸单位</li><li><code>@import</code>样式引入</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202208051101282.png"></p><h2 id="rpx"><a href="#rpx" class="headerlink" title="rpx"></a>rpx</h2><p>rpx(responsive pixel)是微信小程序独有的，用来解决屏幕适配的尺寸单位</p><p>rpx实现原理</p><p>监狱不同设备屏幕大小不同，为实现屏幕自动适配，rpx把所有设备的屏幕在宽度上等分为750份(即当前屏幕总宽度为750rpx)</p><ul><li>在较小的设备上，rpx代表的宽度越小</li><li>在较大的设备上，rpx代表的宽度越大</li><li>小程序在不同设备上运行时，会自动把rpx的样式单位换算成对应的像素单位来渲染</li></ul><p>rpx与px单位换算</p><p>在iPhone6上，屏幕宽度为375px，共有750个物理像素等分为750rpx，则</p><p>750rpx=375px=750物理像素</p><p>1rpx=0.5px=1物理像素</p><p>所以建议在开发微信小程序时，设计师可以用iphone6作为视觉标准。</p><h2 id="样式导入"><a href="#样式导入" class="headerlink" title="样式导入"></a>样式导入</h2><p>使用WXSS提供的<code>@import</code>语法，可以导入外联样式表</p><p><code>@import</code>语法格式</p><p><code>@import</code>后跟需要导入的外联样式表的相对路径，<code>;</code>结束</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// common.wxss</span><br><span class="line">.box &#123;</span><br><span class="line">padding: 5px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@import &quot;common.wxss&quot;</span><br></pre></td></tr></table></figure><h2 id="全局样式和局部样式"><a href="#全局样式和局部样式" class="headerlink" title="全局样式和局部样式"></a>全局样式和局部样式</h2><ol><li>定义在<code>app.wxss</code>中的样式为全局样式，作用每一个页面</li><li>在页面的<code>.wxss</code>文件定义的样式为局部样式，作用当前页面</li><li>局部与全局冲突时，就近原则，局部会覆盖全局</li><li>局部权重大于或等于全局时，才不会覆盖</li></ol><h1 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h1><p>全局配置文件及常用的配置项</p><p>小程序根目录下<code>app.json</code>文件是小程序全局配置文件，常用配置项如下</p><ol><li><code>Pages</code>：记录当前小程序所有页面的存放路径</li><li><code>window</code>：全局设置小程序窗口外观</li><li><code>tabBa</code>r：设置小程序底部的tabBar效果</li><li><code>style</code>：是否启用新版组件样式</li></ol><p>小程序窗口组成部分</p><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202208051922775.png"></p><h2 id="window"><a href="#window" class="headerlink" title="window"></a>window</h2><p>window节点常用的配置项</p><table><thead><tr><th>属性名</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>navigationBarTitleText</td><td>String</td><td>字符串</td><td>导航栏标题文字内容</td></tr><tr><td>navigationBarBackgroundColor</td><td>HexColor</td><td>#000000</td><td>导航栏标题背景色</td></tr><tr><td>navigationBarTextStyle</td><td>String</td><td>white</td><td>导航栏标题背景色仅支持black/white</td></tr><tr><td>backgroundColor</td><td>HexColor</td><td>#ffffff</td><td>窗口背景颜色</td></tr><tr><td>backgroundTextStyle</td><td>String</td><td>dark</td><td>下拉loading样式，仅支持dark/light</td></tr><tr><td>enablePullDownRefresh</td><td>Boolean</td><td>false</td><td>是否开启全局下拉刷新</td></tr><tr><td>onReachBottomDistance</td><td>Number</td><td>50</td><td>页面上拉触底事件触发时局页面底部的距离，单位px</td></tr></tbody></table><h2 id="tabBar"><a href="#tabBar" class="headerlink" title="tabBar"></a>tabBar</h2><p>taBar是移动端应用常见的页面效果，用于实现多页面的快速切换，小程序中通常分为</p><ul><li>底部tabBar</li><li>顶部tabBar</li><li>tabBar中只能配置最少2个，最多5个tab页签</li><li>渲染顶部tabBar不显示icon只显示文本</li></ul><p>tabBar6个组成部分</p><ol><li><code>backgroundColor</code>: tabBar的背景色</li><li><code>selectediconPath</code>: 选中时的图片路径</li><li><code>borderStyle</code>: tabBar上边框的颜色</li><li><code>iconPath</code>: 未选中时的图片路径</li><li><code>selectedColor</code>: tab上文字选中时的颜色</li><li><code>color</code>: tab上文字默认（未选中）颜色</li></ol><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202208051929767.png"></p><p>tabBar节点配置项</p><table><thead><tr><th>属性</th><th>类型</th><th>必填</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>position</td><td>String</td><td>否</td><td>bottom</td><td>tabBar位置仅支持bottom/top</td></tr><tr><td>borderStyle</td><td>String</td><td>否</td><td>black</td><td>tabBar上边框颜色，仅支持black/white</td></tr><tr><td>color</td><td>HexColor</td><td>否</td><td></td><td>tab上文字默认（未选中）时颜色</td></tr><tr><td>selectedColor</td><td>HexColor</td><td>否</td><td></td><td>tab文字选中时颜色</td></tr><tr><td>backgroundColor</td><td>hexColor</td><td>否</td><td></td><td>tabBar背景色</td></tr><tr><td>list</td><td>Array</td><td>是</td><td></td><td>tab页签列表最少2最多5</td></tr></tbody></table><p>每个tab项配置选项</p><table><thead><tr><th>属性</th><th>类型</th><th>必填</th><th>描述</th></tr></thead><tbody><tr><td>PagePath</td><td>String</td><td>是</td><td>页面路径，页面必须在Pages中预先定义</td></tr><tr><td>text</td><td>String</td><td>是</td><td>tab显示的文字</td></tr><tr><td>iconPath</td><td>String</td><td>否</td><td>未选中时页面图标，当position为top时不显示icon</td></tr><tr><td>selectediconPath</td><td>String</td><td>否</td><td>选中时页面图标，当position为top时不显示icon</td></tr></tbody></table><h1 id="页面配置"><a href="#页面配置" class="headerlink" title="页面配置"></a>页面配置</h1><p>小程序中，每个页面都有自己的<code>.json</code>配置文件，用来对当前页面的窗口外观，页面效果进行配置</p><p>页面配置与全局配置关系：就近原则</p><h2 id="页面配置常用配置项"><a href="#页面配置常用配置项" class="headerlink" title="页面配置常用配置项"></a>页面配置常用配置项</h2><p>参考全局配置</p><h1 id="网络数据请求"><a href="#网络数据请求" class="headerlink" title="网络数据请求"></a>网络数据请求</h1><p>出于安全问题，小程序官方对数据接口请求做出如下两个限制</p><ol><li>只能请求HTTPS类型的接口</li><li>必须将接口域名添加到信任列表</li></ol><p>在开发调试阶段，可以跳过request合法域名</p><h2 id="发起GET请求"><a href="#发起GET请求" class="headerlink" title="发起GET请求"></a>发起GET请求</h2><p>调用微信小程序提供的<code>wx.request()</code>方法，可以发起GET数据请求</p><h2 id="发起POST请求"><a href="#发起POST请求" class="headerlink" title="发起POST请求"></a>发起POST请求</h2><p>调用微信小程序提供的<code>wx.request()</code>方法，可以发起POST数据请求</p><h2 id="在页面加载时请求数据"><a href="#在页面加载时请求数据" class="headerlink" title="在页面加载时请求数据"></a>在页面加载时请求数据</h2><p>很多情况下，需要在页面刚加载时，自动请求一些初始化数据，此时需要在页面onload事件中调用获取数据的函数</p><h2 id="关于跨域和Ajax说明"><a href="#关于跨域和Ajax说明" class="headerlink" title="关于跨域和Ajax说明"></a>关于跨域和Ajax说明</h2><p>跨域问题只存在基于浏览器web开发中，由于小程序的宿主环境不是浏览器，而是微信客户端，所以小程序不存在跨域问题</p><p>Ajax技术核心依赖于浏览器中的<code>XMLHttpRequest</code>这个对象，由于小程序宿主环境是微信客户端，所以小程序中不能叫做“发起Ajax请求”，而是“发起网络数据请求”</p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WXML模板语法</title>
      <link href="/WXML%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95/"/>
      <url>/WXML%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="WXML模板语法"><a href="#WXML模板语法" class="headerlink" title="WXML模板语法"></a>WXML模板语法</h1><h2 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h2><h3 id="数据绑定的基本原则"><a href="#数据绑定的基本原则" class="headerlink" title="数据绑定的基本原则"></a>数据绑定的基本原则</h3><ol><li>在data中定义数据</li><li>在WXML中使用数据</li></ol><h3 id="在data中定义页面数据"><a href="#在data中定义页面数据" class="headerlink" title="在data中定义页面数据"></a>在data中定义页面数据</h3><p>在页面对应的js文件中，把数据定义到data对象中即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="comment">// 字符串类型的数据</span></span><br><span class="line">        <span class="attr">info</span>:<span class="string">&#x27;init data&#x27;</span>,</span><br><span class="line">        <span class="comment">// 数组类型的数据</span></span><br><span class="line">        <span class="attr">msgList</span>:[&#123;<span class="attr">msg</span>:<span class="string">&#x27;hello&#x27;</span>&#125;, &#123;<span class="attr">msg</span>:<span class="string">&#x27;world&#x27;</span>&#125;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Mustache语法的格式"><a href="#Mustache语法的格式" class="headerlink" title="Mustache语法的格式"></a>Mustache语法的格式</h3><p>把发他中的数据绑定到页面中渲染，使用Mustache语法（双大括号）将变量包起来即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;view&gt;&#123;&#123;要绑定的数据名称&#125;&#125;&lt;/view&gt;</span><br></pre></td></tr></table></figure><p>应用场景：</p><ol><li>绑定内容</li><li>绑定属性</li><li>运算（三元运算，算数运算等）</li></ol><h3 id="动态绑定内容"><a href="#动态绑定内容" class="headerlink" title="动态绑定内容"></a>动态绑定内容</h3><p>页面的数据如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">info</span>:<span class="string">&#x27;init data&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>页面的结构如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;view&gt;&#123;&#123; info &#125;&#125;&lt;/view&gt;</span><br></pre></td></tr></table></figure><h3 id="动态绑定属性"><a href="#动态绑定属性" class="headerlink" title="动态绑定属性"></a>动态绑定属性</h3><p>页面的数据如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">imgSrc</span>:<span class="string">&#x27;http://www.itheima.com/images/logo.png&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>页面的结构如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;image src=&quot;&#123;&#123;imgSrc&#125;&#125;&quot;&gt;&lt;/image&gt;</span><br></pre></td></tr></table></figure><h3 id="三元运算"><a href="#三元运算" class="headerlink" title="三元运算"></a>三元运算</h3><p>页面数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">randomNum</span>: <span class="built_in">Math</span>.random()*<span class="number">10</span> <span class="comment">//生成10以内的随机数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>页面结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;view&gt;&#123;&#123; randomNumber &gt;= 5 ? &#x27;随机数字大于或等于5&#x27; : &#x27;随机数字小于5&#x27;&#125;&#125;&lt;/view&gt;</span><br></pre></td></tr></table></figure><h3 id="算数运算"><a href="#算数运算" class="headerlink" title="算数运算"></a>算数运算</h3><p>页面数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">randomNum</span>: <span class="built_in">Math</span>.random().toFixed(<span class="number">2</span>) <span class="comment">// 生成一个待两位小数的随机数，如0.34</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>页面结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;view&gt;生成100以内的随机数：&#123;&#123;randomNum*100&#125;&#125;&lt;/view&gt;</span><br></pre></td></tr></table></figure><h2 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h2><h3 id="事件概述"><a href="#事件概述" class="headerlink" title="事件概述"></a>事件概述</h3><p>事件是渲染层到逻辑层的通讯方式，通过事件可以将用户在渲染层产生的行为，反馈到逻辑层进行业务的处理</p><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207290753877.jpg"></p><h3 id="小程序中常用事件"><a href="#小程序中常用事件" class="headerlink" title="小程序中常用事件"></a>小程序中常用事件</h3><table><thead><tr><th>类型</th><th>绑定方式</th><th>事件描述</th></tr></thead><tbody><tr><td>tap</td><td>bindtap或 bind:tap</td><td>手指触摸后马上离开，类似HTML中click事件</td></tr><tr><td>input</td><td>bindinput或 bind:input</td><td>文本框的输入事件</td></tr><tr><td>change</td><td>bindchange或 bind:change</td><td>状态改变时触发</td></tr></tbody></table><h3 id="事件对象属性"><a href="#事件对象属性" class="headerlink" title="事件对象属性"></a>事件对象属性</h3><p>当事件回调触发时，会收到事件对象event，它的详细属性如下</p><table><thead><tr><th>属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>type</td><td>String</td><td>事件类型</td></tr><tr><td>timeStamp</td><td>Integer</td><td>页面打开到触发事件时所经过的毫秒数</td></tr><tr><td>target</td><td>Object</td><td>触发事件的组件的一些属性值的集合</td></tr><tr><td>currentTarget</td><td>Object</td><td>当前组件的一些属性值集合</td></tr><tr><td>detail</td><td>Object</td><td>额外的信息</td></tr><tr><td>touches</td><td>Array</td><td>触摸事件，当停留在屏幕中的触摸点信息的数组</td></tr><tr><td>changedTouches</td><td>Array</td><td>触摸事件，当前变化时触摸点信息的数组</td></tr></tbody></table><h3 id="target和currentTarget的区别"><a href="#target和currentTarget的区别" class="headerlink" title="target和currentTarget的区别"></a>target和currentTarget的区别</h3><p>target是触发该事件的源头组件，而currentTarget是当前事件所绑定的组件</p><h3 id="bindtap的语法格式"><a href="#bindtap的语法格式" class="headerlink" title="bindtap的语法格式"></a>bindtap的语法格式</h3><p>小程序中不存在onclick点击事件，而是通过tap事件响应用户的触摸</p><ol><li><p>通过bindtap，可以为组件绑定tap触摸事件，语法如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button type=&quot;primary&quot; bindtap=&quot;btnTapHandler&quot;&gt;按钮&lt;/button&gt;</span><br></pre></td></tr></table></figure></li><li><p>在页面中的js文件中定义对应的事件处理函数，事件参数通过形参event(一般简写e)来接收</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">    <span class="function"><span class="title">btnTapHandler</span>(<span class="params">e</span>)</span> &#123; <span class="comment">//按钮的tap事件处理函数</span></span><br><span class="line">        <span class="built_in">console</span>.log(e) <span class="comment">//事件参数对象</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="在事件处理函数中为data中的数据赋值"><a href="#在事件处理函数中为data中的数据赋值" class="headerlink" title="在事件处理函数中为data中的数据赋值"></a>在事件处理函数中为data中的数据赋值</h3><p>   通过调用<code>this.setData(dataObject)</code>方法，可以给页面data中的数据重新赋值，示例如下</p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 页面的js文件</span></span><br><span class="line">Page(&#123;</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">count</span>:<span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//修改count的值</span></span><br><span class="line">    <span class="function"><span class="title">changeCount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">            <span class="attr">count</span>: <span class="built_in">this</span>.data.count + <span class="number">1</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="事件传参"><a href="#事件传参" class="headerlink" title="事件传参"></a>事件传参</h3><p>   可以为组件<code>data-*</code>自定义属性传参，其中<code>*</code>代表的是参数的名字，示例如下</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button bindtap=&quot;btnHandler&quot; data-info=&quot;&#123;&#123;2&#125;&#125;&quot;&gt;事件传参&lt;/button&gt;</span><br></pre></td></tr></table></figure><ul><li>info会被解析为参数的名字</li><li>数值2会被解析成参数的值</li></ul><p>   在事件处理函数中，通过<code>event.target.dataset.参数名</code>即可获取到具体参数的值，示例代码如下</p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">btnHandler</span>(<span class="params">e</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//dataset是一个对象，包含了所有通过 data-* 传递过来的参数项</span></span><br><span class="line">    <span class="built_in">console</span>.log(event.target.dataset)</span><br><span class="line">    <span class="comment">//通过 dataset 可以访问到具体参数的值</span></span><br><span class="line">    <span class="built_in">console</span>.log(event.target.dataset.info)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="bindinput的语法格式"><a href="#bindinput的语法格式" class="headerlink" title="bindinput的语法格式"></a>bindinput的语法格式</h3><p>   在小程序中，通过input事件来响应文本框的输入事件，语法格式如下</p><ol><li><p>通过bindinput，可以为文本框绑定输入事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input bindinput=&quot;inputHandler&quot;&gt;&lt;/input&gt;</span><br></pre></td></tr></table></figure></li><li><p>在页面js文件中定义事件处理函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">inputHandler</span>(<span class="params">e</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// e.detail.value 是变化过后，文本框最新的值</span></span><br><span class="line">    <span class="built_in">console</span>.log(e.detail.value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="实现文本框和data之间的数据同步"><a href="#实现文本框和data之间的数据同步" class="headerlink" title="实现文本框和data之间的数据同步"></a>实现文本框和data之间的数据同步</h3><ol><li>定义数据</li><li>渲染结构</li><li>美化样式</li><li>绑定input事件处理函数</li></ol><p>渲染结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input value=&quot;&#123;&#123;msg&#125;&#125;&quot; bindinput=&quot;iptHandler&quot;&gt;&lt;/input&gt;</span><br></pre></td></tr></table></figure><p>美化样式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">border: 1px solid #eee;</span><br><span class="line">padding: 5px;</span><br><span class="line">margin: 5px;</span><br><span class="line">border-radius: 3px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>绑定input事件处理函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文本框内容改变的事件</span></span><br><span class="line"><span class="function"><span class="title">iptHandler</span>(<span class="params">e</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">        <span class="comment">// 通过e.detail.value 获取到文本框最新的值</span></span><br><span class="line">        <span class="attr">mag</span>: e.detail.value</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><h3 id="1-wx-if"><a href="#1-wx-if" class="headerlink" title="1. wx:if"></a>1. wx:if</h3><p>在小程序中，使用<code>wx:if=&quot;&#123;&#123;condition&#125;&#125;&quot;</code>来判断是否需要渲染该代码块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;view wx:if=&quot;&quot;&gt;True&lt;/view&gt;</span><br></pre></td></tr></table></figure><p>也可以利用<code>wx:elif</code>和<code>wx:else</code>来添加else判断</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;view wx:if=&quot;&#123;&#123;type === 1&#125;&#125;&quot;&gt;男&lt;/view&gt;</span><br><span class="line">&lt;view wx:elif=&quot;&#123;&#123;type === 2&#125;&#125;&quot;&gt;女&lt;/view&gt;</span><br><span class="line">&lt;view wx:else&gt;保密&lt;/view&gt;</span><br></pre></td></tr></table></figure><h3 id="2-结合-lt-block-gt-使用-wx-if"><a href="#2-结合-lt-block-gt-使用-wx-if" class="headerlink" title="2.结合&lt;block&gt;使用 wx:if"></a>2.结合<code>&lt;block&gt;</code>使用 <code>wx:if</code></h3><p>如果要一次性控制多个组件的展示与隐藏，可以使用一个<code>&lt;block&gt;&lt;/block&gt;</code>标签将多个组件包装起来，并在<code>&lt;block&gt;</code>标签上使用<code>wx:if</code>控制属性，示例如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;block&gt;</span><br><span class="line">&lt;view&gt;view1&lt;/view&gt;</span><br><span class="line">&lt;view&gt;view2&lt;/view&gt;</span><br><span class="line">&lt;/block&gt;</span><br></pre></td></tr></table></figure><p><code>&lt;block&gt;</code>并不是一个组件，它只是一个包裹性质的容器，不会在页面中做任何渲染</p><h3 id="3-hidden"><a href="#3-hidden" class="headerlink" title="3.hidden"></a>3.hidden</h3><p>在小程序中，直接使用<code>hidden=&quot;&#123;&#123;condition&#125;&#125;&quot;</code>也能控制元素的显示与隐藏</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;view hidden=&quot;&#123;&#123;consition&#125;&#125;&quot;&gt;</span><br><span class="line">条件为true隐藏，条件为false显示</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><p>4.<code>wx:if</code>与<code>hidden</code>的对比</p><p>运行方式不同</p><ul><li><code>wx:if</code>以动态创建和移除元素的方式，控制元素的显示与隐藏</li><li><code>hidden</code>以切换样式的方式（display:none/block;），控制元素的显示与隐藏</li></ul><p>使用建议</p><ul><li>频繁切换时，建议使用<code>hidden</code></li><li>控制条件复杂时，建议使用<code>wx:if</code>搭配<code>wx:elif</code>,<code>wx:else</code>进行展示与隐藏的切换</li></ul><h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><h3 id="1-wx-for"><a href="#1-wx-for" class="headerlink" title="1.wx:for"></a>1.wx:for</h3><p>通过<code>wx:for</code>可以根据指定的数组，循环渲染重复的组件结构，语法示例如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;view wx:for=&quot;&#123;&#123;array&#125;&#125;&quot;&gt;</span><br><span class="line">索引是：&#123;&#123;index&#125;&#125; 当前项是：&#123;&#123;item&#125;&#125;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><p>默认情况下，当前循环项的索引用<code>index</code>表示，当前循环项用<code>item</code>表示</p><h3 id="3-手动指定索引和当前项的变量名"><a href="#3-手动指定索引和当前项的变量名" class="headerlink" title="3.手动指定索引和当前项的变量名"></a>3.手动指定索引和当前项的变量名</h3><ul><li>使用<code>wx:for-index</code>可以指定当前循环项的索引的变量名</li><li>使用<code>wx:for-item</code>可以指定当前项的变量名</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;view wx:for=&quot;&#123;&#123;array&#125;&#125;&quot; wx:for-index=&quot;idx&quot; wx:for-item=&quot;itemName&quot;&gt;</span><br><span class="line">索引是：&#123;&#123;idx&#125;&#125;,当前项是：&#123;&#123;itemName&#125;&#125;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><h3 id="3-wx-key的使用"><a href="#3-wx-key的使用" class="headerlink" title="3.wx:key的使用"></a>3.<code>wx:key</code>的使用</h3><p>类似于Vue列表渲染中的<code>:key</code>，小程序在实现列表渲染时，也建议为渲染出来的列表项指定唯一的<code>key</code>值，从而提高渲染效率</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// data数据</span></span><br><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">name</span>:<span class="string">&#x27;小红&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="number">2</span>,<span class="attr">name</span>:<span class="string">&#x27;小黄&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="number">3</span>,<span class="attr">name</span>:<span class="string">&#x27;小白&#x27;</span>&#125;        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// WXML结构</span><br><span class="line">&lt;view wx:for=&quot;&#123;&#123;userList&#125;&#125;&quot; wx:key=&quot;id&quot;&gt;</span><br><span class="line">&#123;&#123;item.name&#125;&#125;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序（一）</title>
      <link href="/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
      <url>/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="小程序简介"><a href="#小程序简介" class="headerlink" title="小程序简介"></a>小程序简介</h1><h2 id="小程序与网页开发的区别"><a href="#小程序与网页开发的区别" class="headerlink" title="小程序与网页开发的区别"></a>小程序与网页开发的区别</h2><ol><li>运行环境不同</li><li>API不同</li><li>开发模式不同</li></ol><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><ol><li><strong>pages     用来存放所有小程序的页面</strong></li><li>utils用来存放工具性质的模块（例如格式化时间的自定义模块）</li><li><strong>app.js小程序项目的入口文件</strong></li><li><strong>app.json小程序项目的全局配置文件</strong></li><li>app.wxss小程序项目的全局样式文件</li><li>project.config.json项目的配置文件</li><li>sitemap.json用来配置小程序及其页面是否允许被微信索引</li></ol><h3 id="json配置文件的作用"><a href="#json配置文件的作用" class="headerlink" title="json配置文件的作用"></a>json配置文件的作用</h3><p>json是一种数据格式，常以配置文件形式出现</p><ol><li>app.json是当前小程序的全局配置，包括小程序所有页面路径，窗口外观，界面表现，底部tab</li><li>project.config.json是项目配置文件，记录对小程序开发工具所作的个性化配置</li><li>sitemap.json用来配置小程序及其页面是否允许被微信索引</li><li>页面的json文件来对页面窗口外观进行配置，会覆盖app.json 和window中相同的配置</li><li>新建程序页面和修改项目主页</li></ol><h3 id="WXML模板"><a href="#WXML模板" class="headerlink" title="WXML模板"></a>WXML模板</h3><p>WXML(weixin Markup Language)是小程序框架设计的一套标签语言，用来构建小程序页面的结构，类似HTML</p><p>区别：</p><ol><li>标签名称不同</li><li>属性节点不同</li><li>提供类似Vue中的模板语法</li></ol><h3 id="WXSS样式"><a href="#WXSS样式" class="headerlink" title="WXSS样式"></a>WXSS样式</h3><p>WXSS(weixin Style Sheets)是一套样式语言，用来描述WXSS的组件样式，类似CSS</p><p>区别：</p><ol><li>新增rpx尺寸单位</li><li>提供全局样式和局部样式</li><li>WXSS仅支持部分CSS选择器</li></ol><h3 id="JS逻辑交互"><a href="#JS逻辑交互" class="headerlink" title="JS逻辑交互"></a>JS逻辑交互</h3><p>小程序js文件分为三大类</p><ol><li>app.js 是整个小程序项目的入口文件，通过调用<strong>APP()函数</strong>来启动整个小程序</li><li>页面的js文件 是页面的入口文件，通过调用<strong>Page()函数</strong>来创建并运行页面</li><li>普通的js文件 是普通的功能模块文件，用来封装公开的函数或属性供页面使用</li></ol><h1 id="宿主环境简介"><a href="#宿主环境简介" class="headerlink" title="宿主环境简介"></a>宿主环境简介</h1><p>宿主环境指的是程序运行所必须的依赖环境</p><p>手机微信是小程序的宿主环境，小程序借助宿主环境提供的能力，可以完成许多普通网页无法完成的功能，例如微信扫码，微信支付</p><p>小程序宿主环境包含的内容</p><ol><li>通信模型</li><li>运行机制</li><li>组件</li><li>API</li></ol><h2 id="通信模型"><a href="#通信模型" class="headerlink" title="通信模型"></a>通信模型</h2><p>小程序中通信的主体是渲染层和逻辑层</p><ol><li>WXML模板和WXSS样式工作在渲染层</li><li>JS脚本工作在逻辑层</li><li>渲染层和逻辑层之间的通信是由微信客户端进行转发</li><li>逻辑层和第三方服务器之间的通信是由微信客户端进行转发</li></ol><h2 id="运行机制"><a href="#运行机制" class="headerlink" title="运行机制"></a>运行机制</h2><p>小程序启动过程</p><ol><li>把小程序的代码包下载到本地</li><li>解析app.json全局配置文件</li><li>执行app.js小程序入口文件，调用APP()创建小程序实例</li><li>渲染小程序首页</li><li>小程序启动完成</li></ol><p>页面渲染过程</p><ol><li>加载解析页面的json配置文件</li><li>加载也买你的wxml模板和wxss样式</li><li>执行页面的js文件，调用Page()创建页面实例</li><li>页面渲染完成</li></ol><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>小程序的组件也是由宿主环境提供，官方把小程序组件分为了9大类，分别是</p><ol><li><strong>视图容器</strong></li><li><strong>基础内容</strong></li><li><strong>表单组件</strong></li><li><strong>导航组件</strong></li><li>媒体组件</li><li>map地图组件</li><li>canvas画布组件</li><li>开放能力</li><li>无障碍访问</li></ol><h3 id="常用视图容器类组件"><a href="#常用视图容器类组件" class="headerlink" title="常用视图容器类组件"></a>常用视图容器类组件</h3><ol><li><code>view </code>普通视图区域，类似div，块级元素，常用来实现页面布局效果</li><li><code>scroll-view</code> 可滚动试图区域，常用来实现滚动列表效果</li><li><code>swiper和swiper-stem</code> 轮播图组件和轮播图item组件</li></ol><h4 id="swiper组件常用属性"><a href="#swiper组件常用属性" class="headerlink" title="swiper组件常用属性"></a>swiper组件常用属性</h4><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>indicator-dots</td><td>boolean</td><td>false</td><td>是否显示面板指示点</td></tr><tr><td>indicator-color</td><td>color</td><td>rgba(0,0,0,.3)</td><td>指示点颜色</td></tr><tr><td>indicator-active-color</td><td>color</td><td>#00000</td><td>当前选中的指示点颜色</td></tr><tr><td>autoplay</td><td>boolean</td><td>false</td><td>是否自动切换</td></tr><tr><td>interval</td><td>number</td><td>5000</td><td>自动切换时间间隔</td></tr><tr><td>circular</td><td>boolean</td><td>false</td><td>是否采用衔接滑动</td></tr></tbody></table><h3 id="常用基础内容组件"><a href="#常用基础内容组件" class="headerlink" title="常用基础内容组件"></a>常用基础内容组件</h3><ol><li><code>text</code> 文本组件，类似span标签，行内块元素</li><li><code>rich-text</code> 富文本组件，支持把HTML字符串渲染为WXML结构</li></ol><h3 id="其他常用组件"><a href="#其他常用组件" class="headerlink" title="其他常用组件"></a>其他常用组件</h3><ol><li><code>button</code> 按钮组件，功能比HTML中的button按钮丰富，通过open-type属性可以掉用微信提供的各种功能</li><li><code>image</code> 图片组件，默认宽度300px 高度240px</li><li><code>navigator</code> 页面导航组件。类似HTML的a链接</li></ol><h4 id="image组件的mode属性"><a href="#image组件的mode属性" class="headerlink" title="image组件的mode属性"></a>image组件的mode属性</h4><p>image组件中的mode属性用来指定图片的裁剪和缩放模式</p><table><thead><tr><th>mode值</th><th>说明</th></tr></thead><tbody><tr><td>scaleToFill</td><td>默认值，缩放模式，不支持纵横比缩放图片，图片宽高完全拉伸填满image元素</td></tr><tr><td>aspectFit</td><td>缩放模式，保持纵横比缩放图片，图片长边能完全显示出来，也就说，可以完整将图片显示出来</td></tr><tr><td>aspectFill</td><td>缩放模式，保持纵横比缩放图片，只能保证推按短边能完全显示，也就是说，图片通常在水平或垂直方向是完整的，另一个方向会发生截取</td></tr><tr><td>widthFix</td><td>缩放模式，宽度不变，高度自动变化，保持原图宽高不变</td></tr><tr><td>heightFix</td><td>缩放模式，高度不变，宽度自动变化，保持原图宽高不变</td></tr></tbody></table><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p>小程序API是由宿主环境提供的</p><p>三大类：</p><p><code>事件监听API</code></p><ul><li>特点：以on开头，用来监听某些事件的触发</li><li>举例：wx.onWindowResize(function callback)监听窗口尺寸变化的事件</li></ul><p><code>同步API</code></p><ul><li>特点：以Sync结尾的API都是同步API，同步API执行的结果，可以通过函数返回值直接获取，执行错误会抛出异常</li><li>举例：wx.setStorageSync(‘key’, ‘value’)向本地存储中写入内容</li></ul><p><code>异步API</code></p><ul><li>特点：类似JQ中$.ajax(options)函数</li><li>举例：wx.request() 发起网络数据请求，通过success回调函数接收数据</li></ul>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flex布局</title>
      <link href="/%E5%89%8D%E7%AB%AF/C3-flex%E5%B8%83%E5%B1%80/"/>
      <url>/%E5%89%8D%E7%AB%AF/C3-flex%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="布局原理"><a href="#布局原理" class="headerlink" title="布局原理"></a>布局原理</h1><p>flex是flexible Box的缩写，意为“弹性布局”，用来为盒状模型提供最大的灵活性，任何一个容器都剋指定为flex布局</p><ul><li>当我们为父盒子设为flex之后，子元素的float,clear,vertical-align属性将失效‘</li><li>伸缩布局=弹性布局=伸缩盒布局=弹性盒布局=flex布局</li></ul><p>采用Flex布局的元素，称为flex容器（flex container），简称“容器”，它让所有子元素自动称为容器成员，称为flex项目（flex item），简称“项目”。简单来说就是通过给父盒子添加flex属性，来控制子盒子的位置和排列方式。</p><h1 id="父项常见属性"><a href="#父项常见属性" class="headerlink" title="父项常见属性"></a>父项常见属性</h1><p>以下6个属性是对父元素设置的</p><ol><li><code>flex-direction</code>:设置主轴方向</li><li><code>justify-content</code>:设置主轴上的子元素排列方式</li><li><code>flex-wrap</code>:设置子元素是否换行</li><li><code>align-content</code>:设置恻轴上子元素的排列方式（多行）</li><li><code>align-items</code>:设置恻轴上的子元素排列方式（单行）</li><li><code>flex-flow</code>:复合属性，相当于同时设置了<code>flex-direction</code>和<code>flex-wrap</code></li></ol><h2 id="「flex-direction」"><a href="#「flex-direction」" class="headerlink" title="「flex-direction」"></a>「flex-direction」</h2><h3 id="主轴和恻轴"><a href="#主轴和恻轴" class="headerlink" title="主轴和恻轴"></a>主轴和恻轴</h3><p>在flex布局中，是分为主轴和恻轴两个方向，同样的叫法由：行和列，X轴和Y轴</p><ul><li>默认主轴方向就是X轴方向，水平向右</li><li>默认恻轴方向就是Y轴方向，水平向下</li></ul><h3 id="属性值"><a href="#属性值" class="headerlink" title="属性值"></a>属性值</h3><p><code>flex-direction</code>属性决定主轴的方向（即项目的排列方向）</p><p>主轴和恻轴是会变化的，就看<code>flex-direction</code>设置谁为主轴，我们子元素是跟着主轴来排列</p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>row</td><td>默认值从左到右</td></tr><tr><td>row-reverse</td><td>从右到左</td></tr><tr><td>column</td><td>从上到下</td></tr><tr><td>column-reverse</td><td>从下到上</td></tr></tbody></table><h2 id="「justify-content」"><a href="#「justify-content」" class="headerlink" title="「justify-content」"></a>「justify-content」</h2><p><code>justify-content</code>属性定义了项目在主轴上的对齐方式</p><p>使用这个属性之前一定要确定好主轴是哪个</p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>flex-start</td><td>默认值 从头部开始，如主轴是X轴，则从左到右</td></tr><tr><td>flex-end</td><td>从尾部开始排列</td></tr><tr><td>center</td><td>在主轴居中对齐（如主轴是X轴则水平居中）</td></tr><tr><td>space-around</td><td>平分剩余空间</td></tr><tr><td>space-between</td><td>先两边贴边，在平分剩余空间（重要）</td></tr></tbody></table><h2 id="「relative定位」"><a href="#「relative定位」" class="headerlink" title="「relative定位」"></a>「relative定位」</h2><p>默认情况下，项目都排在一条线（又称轴线）上，<code>flex-wrap</code>属性定义，flex布局中默认是不换行的</p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>nowrap</td><td>默认值不换行</td></tr><tr><td>wrap</td><td>换行</td></tr></tbody></table><h2 id="「align-items」"><a href="#「align-items」" class="headerlink" title="「align-items」"></a>「align-items」</h2><p>该属性是控制子项在恻轴（默认是Y轴）上的排列方式，在子项为单项（单行)的时候使用</p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>flex-start</td><td>默认值 从上到下</td></tr><tr><td>flex-end</td><td>从下到上</td></tr><tr><td>center</td><td>挤在一起居中（垂直居中）</td></tr><tr><td>stretch</td><td>拉伸</td></tr></tbody></table><h2 id="「align-content」"><a href="#「align-content」" class="headerlink" title="「align-content」"></a>「align-content」</h2><p>设置子项在恻轴的排列方式并且只能用于子项出现换行的情况（多行），单行无效果</p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>flex-start</td><td>默认值 在恻轴头部开始排列</td></tr><tr><td>flex-end</td><td>在恻轴的尾部开始排列</td></tr><tr><td>center</td><td>在侧轴中间显示</td></tr><tr><td>space-around</td><td>子项在侧轴平分剩余空间</td></tr><tr><td>space-between</td><td>子项在侧轴先分布在两头，在平分剩余空间</td></tr><tr><td>stretch</td><td>设置子项元素高度平分父元素高度</td></tr></tbody></table><h3 id="align-content和align-items的区别"><a href="#align-content和align-items的区别" class="headerlink" title="align-content和align-items的区别"></a><code>align-content</code>和<code>align-items</code>的区别</h3><ul><li><code>align-items</code>适用于单行情况下，只有上对齐，下对齐，居中和拉伸</li><li><code>align-content</code>适应于换行（多行）的情况下（单行无效），可以设置上对齐，下对齐，居中，拉伸以及平均分配剩余空间等属性值。</li><li>总结就是单行找<code>align-items </code>，多行找<code>align-content</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207311726243.jpg"></p><h2 id="「flex-flow」"><a href="#「flex-flow」" class="headerlink" title="「flex-flow」"></a>「flex-flow」</h2><p><code>flex-flow</code>属性是<code>flex-direction</code>和<code>flex-wrap</code>属性的复合属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flex-flow</span>: row wrap;</span><br></pre></td></tr></table></figure><h1 id="子项常见属性"><a href="#子项常见属性" class="headerlink" title="子项常见属性"></a>子项常见属性</h1><ol><li><code>flex</code>：子项目占的份数</li><li><code>align-self</code>：控制子项自己在侧轴的排列方式</li><li><code>order</code>：定义子项的排列顺序（前后顺序）</li></ol><h2 id="「flex」"><a href="#「flex」" class="headerlink" title="「flex」"></a>「flex」</h2><p><code>flex</code>属性定义子项目分配剩余空间，用<code>flex</code>来表示占多少份数</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="「align-self」"><a href="#「align-self」" class="headerlink" title="「align-self」"></a>「align-self」</h2><p><code>align-self</code>属性允许单个项目有与其他项目不一样的对齐方式，可以覆盖<code>align-items</code>属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，等同于stretch。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">span</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span><br><span class="line">    设置自己在侧轴的排列方式</span><br><span class="line">    <span class="attribute">align-self</span>: flex-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="「order」"><a href="#「order」" class="headerlink" title="「order」"></a>「order」</h2><p>数值越小，排列越靠前，默认为0</p><p>与<code>z-index</code>不一样</p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小白的前端之路 </tag>
            
            <tag> CSS基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript BOM</title>
      <link href="/%E5%89%8D%E7%AB%AF/JavaScript%20BOM/"/>
      <url>/%E5%89%8D%E7%AB%AF/JavaScript%20BOM/</url>
      
        <content type="html"><![CDATA[<h1 id="BOM概述"><a href="#BOM概述" class="headerlink" title="BOM概述"></a>BOM概述</h1><h2 id="什么是BOM"><a href="#什么是BOM" class="headerlink" title="什么是BOM"></a>什么是BOM</h2><p>BOM（Browser Object model）即浏览器对象模型，它提供了独立于内容而与浏览器窗口进行交互的现象，其核心对象是window</p><p>BOM是由一系列相关的对象构成，并且每个对象都提供了很多方法和属性</p><p>BOM缺乏标准，JavaScript语法的标准化组织是ECMA，DOM的标准化组织是W3C，BOM最初是Netscape浏览器标准的一部分。</p><h2 id="BOM的构成"><a href="#BOM的构成" class="headerlink" title="BOM的构成"></a>BOM的构成</h2><p>BOM比DOM更大，它包含DOM</p><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207232221528.jpg"></p><p>window对象是浏览器的顶级对象，它具有双重角色</p><ol><li>他是JS访问浏览器窗口的一个接口</li><li>他是一个全局对象，定义在全局作用域中的变量，函数都会变成window对象的属性和方法</li></ol><p>在调用的时候可以忽略window，前面学习的对话框都属于window对象方法，</p><p>注意window下的一个特殊属性 window.name</p><h1 id="window对象的常见事件"><a href="#window对象的常见事件" class="headerlink" title="window对象的常见事件"></a>window对象的常见事件</h1><h2 id="「2-1窗口加载事件」"><a href="#「2-1窗口加载事件」" class="headerlink" title="「2.1窗口加载事件」"></a><strong>「2.1窗口加载事件」</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">或者</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;load&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)</span><br></pre></td></tr></table></figure><p>window.load是窗口（页面）加载事件，当文档内容完全加载完成就会触发该事件（包括图像，脚本文件，css文件等），就调用的处理函数</p><p>注意：</p><ol><li>有了window.load就可以把js代码写到页面元素的上方，因为onload是等页面内容全部加载完毕，再去执行处理函数</li><li>window.onload传统注册事件方式只能写一次，如果出现多个，会以最后一个window.onload为准</li><li>如果使用addEventListener则没有限制</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)</span><br></pre></td></tr></table></figure><p>DOMContentLoaded事件触发时，仅当DOM加载完成，不包括样式表，图片，flash</p><p>ie9以上支持</p><p>如果页面的图片很多的话，从用户访问到onload触发可能需要很长时间，交互效果就不能实现，必然影响用户的体验，此时用DOMContentLoaded事件比较合适</p><h2 id="「2-2调整窗口大小事件」"><a href="#「2-2调整窗口大小事件」" class="headerlink" title="「2.2调整窗口大小事件」"></a><strong>「2.2调整窗口大小事件」</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">或者</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;resize&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)</span><br></pre></td></tr></table></figure><p>window.onresize 是调整窗口大小加载事件，当触发时就调用的处理函数</p><p>注意：</p><ol><li>只要窗口大小发生变化，就会触发这个事件</li><li>我们经常利用这个事件完成响应式布局，window.innerWidth当前屏幕的宽度</li></ol><h1 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h1><h2 id="「3-1两种定时器」"><a href="#「3-1两种定时器」" class="headerlink" title="「3.1两种定时器」"></a><strong>「3.1两种定时器」</strong></h2><p>window对象给我们提供了2个好用的方法-定时器</p><ul><li>setTimeout()</li><li>setInterval()</li></ul><h2 id="「3-2setTimeout-定时器」"><a href="#「3-2setTimeout-定时器」" class="headerlink" title="「3.2setTimeout()定时器」"></a><strong>「3.2setTimeout()定时器」</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.setTimeout(调用函数，延迟的毫秒数);</span><br></pre></td></tr></table></figure><p>setTimeout()方法用于设置一个定时器，该定时器在定时器到期后执行调用函数。</p><p>注意：</p><ol><li>window可以省略</li><li>这个调用函数可以直接写<strong>函数</strong>，或者写<strong>函数名</strong>，或者采用字符串**’函数名()’**三种形式。第三种不推荐</li><li>延迟的毫秒数省略默认是0，如果写，必须是毫秒</li><li>因为定时器可能有很多，所以我们经常给定时器赋值一个标识符</li></ol><p>回调函数</p><p>setTimeout()这个调用函数也称为回调函数 callback，普通函数是按照代码顺序直接调用，而这个函数，需要等待时间，时间到了才去调用这个函数，因此称为回调函数。简单理解：回调，就是回头调用的意思，上一件事干完，在回头调用这个函数。以前提到的element.onclick=function(){} 或者 element.addEventListener(“click”,fn) 里面的函数也是回调函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;时间到了&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">2000</span>);</span><br><span class="line"><span class="comment">// 标识符(名字)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;shijiandao&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> timer1 = <span class="built_in">setTimeout</span>(callback, <span class="number">3000</span>);</span><br><span class="line"><span class="keyword">var</span> timer2 = <span class="built_in">setTimeout</span>(callback, <span class="number">5000</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="string">&#x27;callback()&#x27;</span>, <span class="number">3000</span>); <span class="comment">//我们不提倡这个写法</span></span><br></pre></td></tr></table></figure><h3 id="案例：5s后关闭广告"><a href="#案例：5s后关闭广告" class="headerlink" title="案例：5s后关闭广告"></a>案例：5s后关闭广告</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/ad.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ad&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> ad = <span class="built_in">document</span>.querrySelector(<span class="string">&#x27;.ad&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        ad.style.display = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    &#125;, <span class="number">5000</span>);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="「3-3停止setTimeout-定时器」"><a href="#「3-3停止setTimeout-定时器」" class="headerlink" title="「3.3停止setTimeout()定时器」"></a><strong>「3.3停止setTimeout()定时器」</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.clearTimeout(timeoutID)</span><br></pre></td></tr></table></figure><p>clearTimeout()方法取消了先前通过调用setTimeout()建立的定时器</p><p>注意：</p><ol><li>window可以省略</li><li>里面的参数就是定时器的标识符</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span></span><br><span class="line">   点击停止定时器</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> btn = <span class="built_in">document</span>.querrySelector(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> timer = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;时间没到&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;,<span class="number">5000</span>);</span></span><br><span class="line"><span class="javascript">    btn.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">clearTimeout</span>(timer);</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="「3-4setInterval-定时器」"><a href="#「3-4setInterval-定时器」" class="headerlink" title="「3.4setInterval()定时器」"></a><strong>「3.4setInterval()定时器」</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.setInterval(回调函数， 间隔的毫秒数);</span><br></pre></td></tr></table></figure><p>setInterval()方法重复调用一个函数，每隔一段时间，就去调用一次这个回调函数。</p><p>注意：</p><ol><li>window可以省略</li><li>这个回调函数可以直接写<strong>函数</strong>，或者写<strong>函数名</strong>，或者采取字符串**’函数名()’**三种形式</li><li>延迟的毫秒数省略默认是0，如果写，必须是毫秒</li><li>因为定时器可能有很多，所以我们经常给定时器赋值一个标识符</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;持续输出&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h2 id="「3-5停止setInterval-定时器」"><a href="#「3-5停止setInterval-定时器」" class="headerlink" title="「3.5停止setInterval()定时器」"></a><strong>「3.5停止setInterval()定时器」</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.clearInterval(intervalID);</span><br></pre></td></tr></table></figure><p>clearInterval()方法取消了先前通过调用setInterval()建立的定时器</p><p>注意：</p><ol><li>window可以省略</li><li>里面的阐述就是定时器的标识符</li></ol><h3 id="案例：点击清除定时器"><a href="#案例：点击清除定时器" class="headerlink" title="案例：点击清除定时器"></a>案例：点击清除定时器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;begin&quot;</span>&gt;</span>开启定时器<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;stop&quot;</span>&gt;</span>停止计时器<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> begin = <span class="built_in">document</span>.querrySelector(<span class="string">&#x27;.begin&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> stop = <span class="built_in">document</span>.querrySelector(<span class="string">&#x27;.stop&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> timer = <span class="literal">null</span>; <span class="comment">//全局变量 null是一个空对象</span></span></span><br><span class="line"><span class="javascript">    begin.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        timer = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&#x27;你好吗&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        &#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript">    stop.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">clearInterval</span>(timer);</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="案例：倒计时效果"><a href="#案例：倒计时效果" class="headerlink" title="案例：倒计时效果"></a>案例：倒计时效果</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="案例：发送短信"><a href="#案例：发送短信" class="headerlink" title="案例：发送短信"></a>案例：发送短信</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h1 id="JS执行机制"><a href="#JS执行机制" class="headerlink" title="JS执行机制"></a>JS执行机制</h1><h2 id="「4-1JS是单线程」"><a href="#「4-1JS是单线程」" class="headerlink" title="「4.1JS是单线程」"></a><strong>「4.1JS是单线程」</strong></h2><p>JavaScript语言的一大特点就是单线程，也就说，同一i时间只能做一件事，这是因为JavaScript这门脚本语言诞生的使命所致——JavaScript是为处理页面中用户的交互，以及操作DOM而诞生的。比如我们对某个DOM元素进行添加和删除操作，不能同时进行，应该先添加，之后在删除。</p><p>单线程就意为着，所有任务需要排队，前一个任务结束，才会执行后一个任务，这样所导致的问题是：如果JS执行的时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞的感觉。</p><h2 id="「4-2同步和异步」"><a href="#「4-2同步和异步」" class="headerlink" title="「4.2同步和异步」"></a><strong>「4.2同步和异步」</strong></h2><p>为了解决这个问题，利用多核CPU的计算能力，HTML5提出Web Worker标准，允许JavaScript脚本创建多个线程，于是JS出现了同步和异步。</p><ul><li>同步，前一个任务结束后在执行后一个任务，程序的执行顺序与任务的排列顺序是一致的，同步的。比如做饭的同步做法：烧水做饭，等水开了，再去切菜炒菜</li><li>异步，在做一件事时，因为这件事会花费很长时间，在做这件事的同时，你还可以去处理其他事情，比如做饭的异步做法，我们在烧水的同时，利用这十分钟，去切菜炒菜。</li><li>他们的本质区别; 这条流水线上各个流程的执行顺序不同</li></ul><p><strong>同步任务</strong></p><p>同步任务都在主线程上执行，形成一个执行栈</p><p><strong>异步任务</strong></p><p>JS的异步是通过回调函数实现的，异步任务相关回调函数添加到任务队列中（任务队列也称为消息队列）</p><p>一般异步任务有三种类型</p><ol><li>普通事件，如click,resize等</li><li>资源加载，如load,error等</li><li>定时器，包括setInterval,setTimeout等</li></ol><h2 id="「4-3执行机制」"><a href="#「4-3执行机制」" class="headerlink" title="「4.3执行机制」"></a><strong>「4.3执行机制」</strong></h2><ol><li>先执行执行栈中的同步任务</li><li>异步任务（回调函数）放入任务队列中</li><li>一旦执行栈中所有同步任务执行完毕，系统就会按次序读取任务队列中的异步任务，于是被读取的异步任务结束等待状态，进入执行栈，开始执行。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207241120728.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207241121980.jpg"></p><h1 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h1><h2 id="「5-1什么是location对象」"><a href="#「5-1什么是location对象」" class="headerlink" title="「5.1什么是location对象」"></a><strong>「5.1什么是location对象」</strong></h2><p>window对象给我们提供了一个location属性用于获取或设置窗口的URL，并且可以用于解析URL，因为这个属性返回的是一个对象，所以我们将这个属性也称为location对象</p><h2 id="「5-2URL」"><a href="#「5-2URL」" class="headerlink" title="「5.2URL」"></a><strong>「5.2URL」</strong></h2><p>统一资源定位符（Uniform Resource Locator ，URL）是互联网上标准资源的地址。互联网上的每个文件都有一个唯一的URL，它包含的信息指出文件的位置以及浏览器应该怎末处理它。</p><p>URL一般语法格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">protocol://host[:port]/path/[?query]#fragment</span><br><span class="line">http://www.itcast.cn/index.html?name=andy&amp;age=18#link</span><br></pre></td></tr></table></figure><table><thead><tr><th>组成</th><th>说明</th></tr></thead><tbody><tr><td>protocol</td><td>通信协议 常用的http ftp maito等</td></tr><tr><td>host</td><td>主机（域名） <a href="http://www.itheima.com/">www.itheima.com</a></td></tr><tr><td>port</td><td>端口号 可选，省略时使用方案的默认端口，如http的默认端口为80</td></tr><tr><td>path</td><td>路径 由零或多个’/‘符号隔开的字符串，一般用来表示主机上的一个目录或文件地址</td></tr><tr><td>query</td><td>参数 以键值对的形式，通过&amp;符号分隔开来</td></tr><tr><td>fragment</td><td>片段 #后面内容 常见于链接 锚点</td></tr></tbody></table><h2 id="「5-3location对象的属性」"><a href="#「5-3location对象的属性」" class="headerlink" title="「5.3location对象的属性」"></a><strong>「5.3location对象的属性」</strong></h2><table><thead><tr><th>location对象属性</th><th>返回值</th></tr></thead><tbody><tr><td>location.href</td><td>获取或设置 整个URL</td></tr><tr><td>location.host</td><td>返回主机（域名）</td></tr><tr><td>location.port</td><td>返回端口号 如果未写返回空字符串</td></tr><tr><td>location.pathname</td><td>返回路径</td></tr><tr><td>location.search</td><td>返回参数</td></tr><tr><td>location.hash</td><td>返回片段 #后面内容</td></tr></tbody></table><p>重点记住：href和search</p><h3 id="案例-5s后跳转页面"><a href="#案例-5s后跳转页面" class="headerlink" title="案例; 5s后跳转页面"></a>案例; 5s后跳转页面</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    btn.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//console.log(location.href);</span></span></span><br><span class="line"><span class="javascript">        location.href = <span class="string">&#x27;http://www.itcast.cn&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> timer = <span class="number">5</span>;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(timer == <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">            location.href = <span class="string">&#x27;http://www.itcast.cn&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            div.innerHTML = <span class="string">&#x27;您将在&#x27;</span> + timer + <span class="string">&#x27;秒后跳转到首页&#x27;</span>;</span></span><br><span class="line"><span class="javascript">            timer--;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="「5-4location对象的方法」"><a href="#「5-4location对象的方法」" class="headerlink" title="「5.4location对象的方法」"></a><strong>「5.4location对象的方法」</strong></h2><table><thead><tr><th>location对象方法</th><th>返回值</th></tr></thead><tbody><tr><td>location.assign()</td><td>跟href一样，可以跳转页面（也成为重定向页面）</td></tr><tr><td>location.replace()</td><td>替换当前页面，因为不记录历史，所以不能后退页面</td></tr><tr><td>location.reload()</td><td>重新加载页面，相当于刷新按钮或者f5，如参数为true，强制刷新ctrl+f5</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    btn.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//记录浏览历史，所以可以实现后退功能</span></span></span><br><span class="line"><span class="javascript">        location.assign(<span class="string">&#x27;http://www.itcast.cn&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//不记录浏览历史，所以不可以实现后退功能</span></span></span><br><span class="line"><span class="javascript">        location.replace(<span class="string">&#x27;http://www.itcast.cn&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        location.reload();</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="navigator对象"><a href="#navigator对象" class="headerlink" title="navigator对象"></a>navigator对象</h1><p>navigator对象包含有关浏览器的信息，它有很多属性，最常用的时useAgent，该属性可以返回由客户机发送服务器的user-agent的值。</p><p>下面代码可以判断用户哪个终端打开页面，实现跳转</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h1 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h1><p>window对象给我们提供了一个history对象，与浏览器历史记录进行交互，该对象包含用户（在浏览器窗口中）访问过的URL。</p><table><thead><tr><th>history对象方法</th><th>作用</th></tr></thead><tbody><tr><td>back()</td><td>后退功能</td></tr><tr><td>forward()</td><td>前进功能</td></tr><tr><td>go(参数)</td><td>前进后退功能，参数如是1前进一个页面，如是-1后退一个页面</td></tr></tbody></table><p>history对象一般在实际开发中比较少用，但是会在一些OA办公系统中见到。</p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小白的前端之路 </tag>
            
            <tag> JavaScript基础 </tag>
            
            <tag> JavaScript API </tag>
            
            <tag> BOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>视图与逻辑</title>
      <link href="/%E8%AF%95%E5%9B%BE%E4%B8%8E%E9%80%BB%E8%BE%91/"/>
      <url>/%E8%AF%95%E5%9B%BE%E4%B8%8E%E9%80%BB%E8%BE%91/</url>
      
        <content type="html"><![CDATA[<h1 id="页面导航"><a href="#页面导航" class="headerlink" title="页面导航"></a>页面导航</h1><p>页面导航是页面之间相互跳转，浏览器实现有两种方式</p><ol><li><code>&lt;a&gt;</code>链接</li><li><code>location.href</code></li></ol><p>小程序中实现有两种方式</p><ol><li>声明式导航</li><li>编程式导航</li></ol><h2 id="声明式导航"><a href="#声明式导航" class="headerlink" title="声明式导航"></a>声明式导航</h2><h3 id="导航到tabBar页面"><a href="#导航到tabBar页面" class="headerlink" title="导航到tabBar页面"></a>导航到tabBar页面</h3><p>tabBar页面是被配置为tabBar页面。</p><p>在使用<code>&lt;navigator&gt;</code>组件跳转到指定的tabBar页面时，需指定<code>url</code>和<code>open-type</code>属性</p><ul><li><code>url</code>表示跳转页面的地址，必须<code>/</code>开头</li><li>open-type表示跳转的方式，必须为<code>switchTab</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;navigator url=&quot;/pages/message/message open-type=&quot;switchTab&quot;&gt;跳转到消息页面&lt;/navigator&gt;</span><br></pre></td></tr></table></figure><h3 id="导航到非tabBar页面"><a href="#导航到非tabBar页面" class="headerlink" title="导航到非tabBar页面"></a>导航到非tabBar页面</h3><p>非tabBar页面是没有被配置为tabBar的页面</p><p>与tabBar相比，只有<code>open-type</code>不同，必须为<code>navigate</code>,<code>open-type=&quot;navigate&quot;</code>属性可省略</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;navigator url=&quot;/pages/info/info open-type=&quot;navigate&quot;&gt;跳转到info页面&lt;/navigator&gt;</span><br></pre></td></tr></table></figure><h3 id="后退导航"><a href="#后退导航" class="headerlink" title="后退导航"></a>后退导航</h3><p>指定<code>open-type</code>属性和<code>delta</code>属性</p><ul><li>open-type值必须为<code>navigateBack</code>，表后退导航</li><li>delta值必须为数字，表后退层级</li><li>如后退上一个页面，可省略delta属性</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;navigator open-type=&quot;navigateBack&quot; delta=&quot;1&quot;&gt;后退 &lt;/navigator&gt;</span><br></pre></td></tr></table></figure><h2 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h2><h3 id="导航到tabBar页面-1"><a href="#导航到tabBar页面-1" class="headerlink" title="导航到tabBar页面"></a>导航到tabBar页面</h3><p>调用<code>wx.switchTab(Object object)</code>方法，可跳转到tabBar页面，object参数对象列表如下</p><table><thead><tr><th>属性</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>url</td><td>string</td><td>是</td><td>需要跳转的tabBar路径，路径后不带参数</td></tr><tr><td>success</td><td>function</td><td>否</td><td>接口调用成功的回调函数</td></tr><tr><td>fall</td><td>function</td><td>否</td><td>接口调用失败的回调函数</td></tr><tr><td>complete</td><td>function</td><td>否</td><td>接口调用结束的回调函数，调用成功失败都执行</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 页面结构</span><br><span class="line">&lt;button bindtap=&quot;gotoMessage&quot;&gt;跳转到消息页面&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">// 通过编程式导航跳转到message</span><br><span class="line">gotoMessage() &#123;</span><br><span class="line">wx.switchTab(&#123;</span><br><span class="line">url: &#x27;/pages/message/message&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="导航到非tabBar页面-1"><a href="#导航到非tabBar页面-1" class="headerlink" title="导航到非tabBar页面"></a>导航到非tabBar页面</h3><p>调用<code>wx.navigateTo(ojecat object)</code>方法，object参数对象的属性列表和tabBar一样</p><h3 id="后退导航-1"><a href="#后退导航-1" class="headerlink" title="后退导航"></a>后退导航</h3><p>调用<code>wx.navigateBack(object object)</code>方法，object参数对象属性列表如下</p><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>delta</td><td>number</td><td>1</td><td>否</td><td>返回的页面数，如大于现有页面数则返回首页</td></tr><tr><td>success</td><td>funtion</td><td></td><td>否</td><td></td></tr><tr><td>fall</td><td>function</td><td></td><td>否</td><td></td></tr><tr><td>complete</td><td>function</td><td></td><td>否</td><td></td></tr></tbody></table><h2 id="导航传参"><a href="#导航传参" class="headerlink" title="导航传参"></a>导航传参</h2><h3 id="声明式导航传参"><a href="#声明式导航传参" class="headerlink" title="声明式导航传参"></a>声明式导航传参</h3><p>路径后带参数</p><ol><li>参数与参数用<code>?</code>分割</li><li>参数键与参数值用<code>=</code>相连</li><li>不同参数用<code>&amp;</code>分隔</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;navigator url=&quot;/pages/info/info?name=zs&amp;age=20&quot; open-type=&quot;navigate&quot;&gt;跳转到info页面&lt;/navigator&gt;</span><br></pre></td></tr></table></figure><p>编程式导航类似</p><h3 id="在onload中接收导航参数"><a href="#在onload中接收导航参数" class="headerlink" title="在onload中接收导航参数"></a>在onload中接收导航参数</h3><p>通过声明式导航和编程式导航所携带的参数，可以直接在onLoad事件中直接获取到</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生命周期函数 监听页面函数</span></span><br><span class="line"><span class="attr">onLoad</span>: <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// options就是导航传递来的参数对象</span></span><br><span class="line">    <span class="built_in">console</span>.log(options)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="页面事件"><a href="#页面事件" class="headerlink" title="页面事件"></a>页面事件</h1><h2 id="下拉刷新"><a href="#下拉刷新" class="headerlink" title="下拉刷新"></a>下拉刷新</h2><h3 id="启动下拉刷新"><a href="#启动下拉刷新" class="headerlink" title="启动下拉刷新"></a>启动下拉刷新</h3><ol><li>全局开启下拉刷新：在<code>app.json</code>的<code>window</code>节点中，将<code>enablePullDownRefresh</code>设置为<code>true</code></li><li>局部开启下拉刷新：在页面的js 文件中，将<code>enablePullDownRefresh</code>设置为<code>true</code></li><li>实际开发推荐第二种</li></ol><h3 id="配置下拉刷新窗口样式"><a href="#配置下拉刷新窗口样式" class="headerlink" title="配置下拉刷新窗口样式"></a>配置下拉刷新窗口样式</h3><p>在全局或页面json 文件中，通过<code>backgroundColor</code>和<code>backgroundTextStyle</code>配置</p><ol><li><code>backgroundColor</code>配置窗口颜色，仅支持十六进制</li><li><code>backgroundTextStyle</code>配置loading样式，仅支持<code>dark</code>和<code>light</code></li></ol><h3 id="监听页面下拉刷新事件"><a href="#监听页面下拉刷新事件" class="headerlink" title="监听页面下拉刷新事件"></a>监听页面下拉刷新事件</h3><p>在页面js文件中，通过<code>onPullDownRefresh()</code>函数即可监听当前页面的下拉刷新事件</p><h3 id="停止下拉刷新效果"><a href="#停止下拉刷新效果" class="headerlink" title="停止下拉刷新效果"></a>停止下拉刷新效果</h3><p>当处理完下拉刷新后，下拉刷新的loading效果会一致显示，不会主动消失，需手动隐藏loading效果，需要调用<code>wx.stopPullDownRefresh()</code>可停止当前页面刷新</p><h2 id="上拉触底"><a href="#上拉触底" class="headerlink" title="上拉触底"></a>上拉触底</h2><h3 id="监听页面上拉触底事件"><a href="#监听页面上拉触底事件" class="headerlink" title="监听页面上拉触底事件"></a>监听页面上拉触底事件</h3><p>在页面js文件中，通过<code>onReachBottom</code>函数即可监听当前页面上拉触底事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//页面上拉触底事件处理函数</span></span><br><span class="line"><span class="attr">onReachBottom</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;出发了上拉触底&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置上拉触底距离"><a href="#配置上拉触底距离" class="headerlink" title="配置上拉触底距离"></a>配置上拉触底距离</h3><p>上拉触底距离指的是触发上拉触底事件时，滚动条距离页面底部的距离</p><p>在全局或页面json文件中，通过<code>onReachBottomDistance</code>属性配置上拉触底距离，默认50px</p><h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><p>生命周期（Life Cycle）是指一个对象从创建，运行，销毁的整个阶段，强调的是一个时间段，我们可以把每个小程序的运行过程概括为生命周期</p><h2 id="生命周期的分类"><a href="#生命周期的分类" class="headerlink" title="生命周期的分类"></a>生命周期的分类</h2><ol><li>应用生命周期：小程序从启动，运行，销毁的过程</li><li>页面生命周期：每个页面加载，渲染，销毁的过程</li><li>页面生命周期范围较小，应用程序生命周期范围较大</li></ol><h2 id="生命周期函数"><a href="#生命周期函数" class="headerlink" title="生命周期函数"></a>生命周期函数</h2><p>生命周期函数是由小程序框架提供的内置函数，会伴随着生命周期，自动按次序执行</p><ul><li>作用：允许程序员在特定时间点，执行某些特定操作</li><li>生命周期强调的是时间段，生命周期函数强调的是时间点</li></ul><p>小程序生命周期函数分为两类：</p><ol><li>应用生命周期函数</li><li>页面生命周期函数</li></ol><h3 id="应用的生命周期函数"><a href="#应用的生命周期函数" class="headerlink" title="应用的生命周期函数"></a>应用的生命周期函数</h3><p>小程序的应用生命周期函数需要在<code>app.js</code>中进行声明</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js文件</span></span><br><span class="line">App(&#123;</span><br><span class="line">    <span class="comment">// 小程序初始化完成时，执行此函数，全局只触发一次，可以做一些初始化工作</span></span><br><span class="line">    <span class="attr">onLaunch</span>: <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123; &#125;,</span><br><span class="line">    <span class="comment">// 小程序启动，或从后台进入前台显示时触发</span></span><br><span class="line">    <span class="attr">onShow</span>: <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123; &#125;,</span><br><span class="line">    <span class="comment">// 小程序从前台进入后台时触发</span></span><br><span class="line">    <span class="attr">onHide</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="页面的生命周期函数"><a href="#页面的生命周期函数" class="headerlink" title="页面的生命周期函数"></a>页面的生命周期函数</h3><p>小程序的页面生命周期函数需要在.js文件进行声明</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 页面 的 .js文件</span></span><br><span class="line">Page(&#123;</span><br><span class="line">    <span class="attr">onLoad</span>: <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;&#125;,  <span class="comment">// 监听页面加载，一个页面只调用一次</span></span><br><span class="line">    <span class="attr">onShow</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,  <span class="comment">//监听页面显示</span></span><br><span class="line">    <span class="attr">onReady</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,  <span class="comment">//监听页面初次渲染完成，一个页面只调用一次</span></span><br><span class="line">    <span class="attr">onHide</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,  <span class="comment">//监听页面隐藏</span></span><br><span class="line">    <span class="attr">onUnload</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;  <span class="comment">//监听页面卸载，一个页面只调用一次</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="WXS脚本"><a href="#WXS脚本" class="headerlink" title="WXS脚本"></a>WXS脚本</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>WXS （Weixin Script）是小程序独有的一套脚本语言，结合WXML可以构建页面结构。</p><p>WXML中无法调用页面的.js文件中定义的函数，但是，WXML中可以调用WXS中定义的函数，因此，小程序中的wxs的典型应用场景是”过滤器“</p><p>wxs与JavaScript的关系</p><ol><li>wxs有自己的数据类型</li><li>wxs不支持ES6以上的语法</li><li>wxs村寻CommonJS规范</li></ol><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="内嵌wxs脚本"><a href="#内嵌wxs脚本" class="headerlink" title="内嵌wxs脚本"></a>内嵌wxs脚本</h3><p>wxs代码可以编写在wxml文件中的<code>&lt;wxs&gt;</code>标签内，wxml文件中的每一个<code>&lt;wxs&gt;&lt;/wxs&gt;</code>标签，必须提供module属性，用来指定当前wxs的模块名称，方便在wxml中访问模块中的成员</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;view&gt;&#123;&#123;m1.toUpper(username)&#125;&#125;&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">&lt;wxs module=&quot;m1&quot;&gt;</span><br><span class="line">// 将文本转为大写形式</span><br><span class="line">module.exports.toUpper = function(str) &#123;</span><br><span class="line">return str.toUpperCase()</span><br><span class="line">&#125;</span><br><span class="line">&lt;/wxs&gt;</span><br></pre></td></tr></table></figure><h3 id="外联wxs脚本"><a href="#外联wxs脚本" class="headerlink" title="外联wxs脚本"></a>外联wxs脚本</h3><p>wxs代码还可以编写在以.wxs为后缀名的文件内。</p><p>在wxml中引入外联的wxs脚本时，必须为<code>&lt;wxs&gt;</code>标签添加<code>module</code>和<code>src</code>属性</p><ul><li>module用来指定模块名称</li><li>src用来指定要引入的脚本路经，必须相对路径</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 调用m2 模块中的方法</span><br><span class="line">&lt;view&gt;&#123;&#123;m2.toLower(country)&#125;&#125;&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">// 引用外联的 tools.wxs 脚本，并命名为m2</span><br><span class="line">&lt;wxs src=&quot;../../utils/tools.wxs&quot; module=&quot;m2&quot;&gt;&lt;/wxs&gt;</span><br></pre></td></tr></table></figure><p>特点：</p><ol><li>不能作为组件的事件回调</li><li>性能好</li><li>隔离性</li></ol>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript事件高级</title>
      <link href="/%E5%89%8D%E7%AB%AF/JavaScript%E4%BA%8B%E4%BB%B6%E9%AB%98%E7%BA%A7/"/>
      <url>/%E5%89%8D%E7%AB%AF/JavaScript%E4%BA%8B%E4%BB%B6%E9%AB%98%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="注册事件"><a href="#注册事件" class="headerlink" title="注册事件"></a>注册事件</h1><h2 id="「1-1注册事件概述」"><a href="#「1-1注册事件概述」" class="headerlink" title="「1.1注册事件概述」"></a><strong>「1.1注册事件概述」</strong></h2><p>给元素添加事件，称为注册事件或者绑定事件</p><p>注册事件有两种方式，<strong>传统方式</strong>和<strong>方法监听注册方式</strong></p><p><strong>传统注册方式</strong></p><ul><li><code>&lt;button onclick=&quot;alert(&#39;hi&#39;)&quot;&gt;&lt;/button&gt;</code></li><li><code>btn.onclick = function() &#123; &#125;</code></li></ul><p>特点：</p><ol><li>注册事件的唯一性</li><li>同一元素同一事件只能设置一个处理函数，最后注册的处理函数会覆盖前面注册的处理函数</li></ol><p><strong>方法监听注册方式</strong></p><ul><li>addEventListener() </li><li>attachEvent() //IE9之前</li></ul><p>特点：</p><ol><li>W3C标准推荐方式</li><li>同一元素同一事件可以注册多个监听器</li><li>按注册顺序依次执行</li></ol><h2 id="「1-2-addEventListener-事件监听方式」"><a href="#「1-2-addEventListener-事件监听方式」" class="headerlink" title="「1.2 addEventListener 事件监听方式」"></a><strong>「1.2 addEventListener 事件监听方式」</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eventTarget.addEventListener(type, listener, useCapture)</span><br></pre></td></tr></table></figure><p>eventTarget.addEventListener() 方法将指定的监听器注册到eventTarget（目标对象）上，当该对象触发指定事件时，就会执行事件处理函数</p><p>该方法接收三个参数：</p><ul><li>type：事件类型字符串，比如click，mouseover，注意这里不要带on</li><li>listener：事件处理函数，事件发生时，会调用该监听函数</li><li>useCapture：可选参数，是一个布尔值，默认false，DOM事件流会详细介绍</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>测试按钮0<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>测试按钮1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btns = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 1.传统方式注册事件,后面会覆盖前面</span></span></span><br><span class="line"><span class="javascript">    btns[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">&#x27;hi&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    btns[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">&#x27;how are you&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 2.事件侦听注册事件 addEventLisener</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// (1) 里面事件类型是字符串，必须加引号，并且不带on</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// (2) 同一个元素，同一个事件，可以添加多个侦听器（事件处理程序）</span></span></span><br><span class="line"><span class="javascript">    btns[<span class="number">1</span>].addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">&#x27;监听注册事件&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript">    btns[<span class="number">1</span>].addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">&#x27;监听注册依次执行&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="「1-3-attachEvent事件监听方式」"><a href="#「1-3-attachEvent事件监听方式」" class="headerlink" title="「1.3 attachEvent事件监听方式」"></a><strong>「1.3 attachEvent事件监听方式」</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eventTarget.attachEvent(eventNameWithon, callback)</span><br></pre></td></tr></table></figure><p>eventTarget.attachEvent()方法将指定的监听器注册到eventTarget（目标对象）上，当该对象触发指定的事件时，指定的回调函数就会被执行。</p><p>该方法接收两个参数：</p><ul><li>eventNameWithOn: 事件类型字符串，比如onclick，onmouseover, 这里要带on</li><li>callback: 事件处理函数，当目标触发事件时回调函数被调用</li></ul><p><strong>「1.4 注册事件兼容性解决方案」</strong></p><p>兼容性处理原则：首先照顾大多数浏览器，在处理特殊浏览器</p><h1 id="删除事件"><a href="#删除事件" class="headerlink" title="删除事件"></a>删除事件</h1><h2 id="「2-1删除事件的方法」"><a href="#「2-1删除事件的方法」" class="headerlink" title="「2.1删除事件的方法」"></a><strong>「2.1删除事件的方法」</strong></h2><p>1.传统注册方式</p><p>eventTarget.onclick = null</p><p>2.方法监听注册方式</p><ul><li>eventTarget.removeEventListener(type, listener, uesCapture);</li><li>eventTarget.detaEvent(eventNameWithOn, callback);</li></ul><h2 id="「2-2删除事件兼容性解决方案」"><a href="#「2-2删除事件兼容性解决方案」" class="headerlink" title="「2.2删除事件兼容性解决方案」"></a><strong>「2.2删除事件兼容性解决方案」</strong></h2><h1 id="DOM事件流"><a href="#DOM事件流" class="headerlink" title="DOM事件流"></a>DOM事件流</h1><p>我们想水里面扔一块石头，首先它会有一个下降的过程，这个过程就可以理解为从最顶层向事件发生的最具体元素（目标点）的捕获过程；之后会产生泡泡，会在最低点（最具体的元素）之后漂浮到水面上，这个过程相当于事件冒泡。</p><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207161612619.png" alt="image-20220716161228567"></p><p>官方描述</p><p>事件流描述的时页面中接收事件的顺序</p><p>事件发生时会在元素节点之间按照特定的顺序传播，这个传播过程即DOM事件流</p><p>比如我们给div注册了一个点击事件，DOM的事件流就分三个阶段：</p><ol><li>捕获阶段</li><li>当前目标阶段</li><li>冒泡阶段就</li></ol><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207161617896.png" alt="image-20220716161708853"></p><p>注意：</p><ol><li>事件发生时，会在元素节点之间按照特定的顺序传播，这个传播过程即DOM 事件流</li><li>js代码中只能执行捕获或者冒泡其中的一个阶段</li><li>onclick和attachEvent 只能得到冒泡阶段</li><li>addEventListener(type, listener, useCapture)第三个参数如果是true，表示在事件捕获阶段调用事件处理程序；如果是false（默认false），表示在事件冒泡阶段调用事件处理程序</li><li>实际开发很少用事件捕获，我们更关注事件冒泡</li><li>有些事件是没有冒泡的，比如onblur，onfocus ，onmouseleave</li><li>事件冒泡有时候会带来麻烦，下文提到</li></ol><h1 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h1><h2 id="「什么是事件对象」"><a href="#「什么是事件对象」" class="headerlink" title="「什么是事件对象」"></a><strong>「什么是事件对象」</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eventTarget.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;&#125;</span><br><span class="line">eventTarget.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;&#125;)</span><br><span class="line"><span class="comment">// 这个event就是事件对象，我们还喜欢写成e或则evt</span></span><br></pre></td></tr></table></figure><p>官方解释：event对象代表事件的状态，比如键盘按键的状态，鼠标按钮的状态</p><p>简单理解：事件发生后，跟事件相关的一系列信息数据的集合都放到这个对象里面，这个对象就是事件对象event，它有很多种属性和方法，比如：</p><ol><li>谁绑定这个事件</li><li>鼠标触发事件的话，会得到鼠标的相关信息，比如鼠标位置</li><li>键盘触发事件的话，会得到键盘的相关信息，如按了哪个键</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>传统<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>侦听<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 事件对象</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    div.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(event);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> span = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;span&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    span.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(e);</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"><span class="comment">// 1.event是一个事件事件对象，写到我们侦听函数的小括号里面，当作形参来看</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// 2.事件对象只有有了事件才会存在，它是系统给我们自动创建的，不需要我们传递参数</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// 3.事件对象 是 我们事件的一系列相关数据的集合，跟事件相关的，比如鼠标点击里面就包含了鼠标的相关信息</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// 4.这个事件我们可以自己命名，比如event,evt,e</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// 5.事件对象也有兼容性问题 ie678通过windows.event</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>event是一个形参，系统帮我们设定为事件对象，不需要传递实参过去</p><p>当我们注册事件时，event对象就会被系统自动创建，并依次传递给事件监听器（事件处理函数）</p><p>兼容性方案：<code>e = e || window.event</code></p><h2 id="「事件对象的常见属性和方法」"><a href="#「事件对象的常见属性和方法」" class="headerlink" title="「事件对象的常见属性和方法」"></a><strong>「事件对象的常见属性和方法」</strong></h2><table><thead><tr><th>事件对象属性方法</th><th>说明</th></tr></thead><tbody><tr><td>e.target</td><td>返回触发事件的对象（标准）</td></tr><tr><td>e.srcElement</td><td>返回出发事件的对象（非标准 ie678)</td></tr><tr><td>e.type</td><td>返回事件的类型 比如click mouseover 不带on</td></tr><tr><td>e.cancelBubble</td><td>该属性阻止事件冒泡 （非标准 ie678)</td></tr><tr><td>e.returnValue</td><td>该属性阻止默认事件（默认行为），比如不让链接跳转（非标准 )</td></tr><tr><td>e.preventDefault()</td><td>该方法阻止默认事件（默认行为），比如不让链接跳转（标准）</td></tr><tr><td>e.stopPropagation()</td><td>阻止冒泡（标准）</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 1，e.terget 返回的是触发事件的对象（元素） ，this返回的是绑定事件的对象（元素）</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 区别：e.target点击了那个元素，就返回那个元素；this 那个元素绑定了这个点击事件，那么就返回谁</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    div.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(e.target);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;ul&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    ul.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//我们给ul绑定了事件，则this就指向ul</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//e.target指向我们点击的对象，谁触发了这个事件；我们点击的是li e.target指向就是li</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(e.target);</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 1.返回事件类型</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    div.addEventListener(<span class="string">&#x27;click&#x27;</span>, fn);</span></span><br><span class="line"><span class="javascript">    div.addEventListener(<span class="string">&#x27;mouseover&#x27;</span>, fn);</span></span><br><span class="line"><span class="javascript">    div.addEventListener(<span class="string">&#x27;mouseout&#x27;</span>, fn);</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(e.type);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//阻止默认行为（事件）</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> a = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;a&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    a.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        e.preventDefault(); <span class="comment">// dom标准写法</span></span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="「阻止事件冒泡」"><a href="#「阻止事件冒泡」" class="headerlink" title="「阻止事件冒泡」"></a><strong>「阻止事件冒泡」</strong></h2><p>事件冒泡：开始时由最具体的元素接收，然后逐级向上传播到DOM最顶节点</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span>son<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 阻止冒泡 dom推荐标准 stopPropagation()</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> son = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.son&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    son.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">&#x27;son&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        e.stopPropagation(); <span class="comment">//标准 propagation传播</span></span></span><br><span class="line"><span class="javascript">        e.cancelBubble = <span class="literal">true</span>; <span class="comment">//非标准 cancel取消 bubble泡泡</span></span></span><br><span class="line"><span class="javascript">    &#125;,<span class="literal">false</span>);</span></span><br></pre></td></tr></table></figure><h1 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h1><p>事件冒泡本身的特性，会带来坏处，也会带来好处，需要灵活掌握</p><p>班级有100学生，快递员有100快递，如果一个一个送花费时间长，同时每个学生领取花费时间同样长</p><p>解决方案：快递员把100快递委托给班主任，班主任发放</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，点我应有弹窗在手<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，点我应有弹窗在手<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，点我应有弹窗在手<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，点我应有弹窗在手<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，点我应有弹窗在手<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//事件委托核心原理：给父节点添加侦听器，利用事件冒泡影响每一个子节点</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;ul&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    ul.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// alert(&#x27;知否知否&#x27;);</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// e.target 可以得到我们点击的对象</span></span></span><br><span class="line"><span class="javascript">        e.target.style.backgroundColor = <span class="string">&#x27;pink&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="常用鼠标事件"><a href="#常用鼠标事件" class="headerlink" title="常用鼠标事件"></a>常用鼠标事件</h1><h2 id="「常用鼠标事件」"><a href="#「常用鼠标事件」" class="headerlink" title="「常用鼠标事件」"></a><strong>「常用鼠标事件」</strong></h2><table><thead><tr><th>鼠标事件</th><th>触发条件</th></tr></thead><tbody><tr><td>onclick</td><td>鼠标点击左键触发</td></tr><tr><td>onmouseover</td><td>鼠标经过触发</td></tr><tr><td>onmouseout</td><td>鼠标离开触发</td></tr><tr><td>onfocus</td><td>获得鼠标焦点触发</td></tr><tr><td>onblur</td><td>失去鼠标焦点触发</td></tr><tr><td>onmousemove</td><td>鼠标移动触发</td></tr><tr><td>onmouseup</td><td>鼠标弹起触发</td></tr><tr><td>onmousedown</td><td>鼠标按下触发</td></tr></tbody></table><p>1.禁止鼠标右键菜单</p><p>contexmenu主要控制应该何时显示上下文菜单，主要用于程序员取消默认上下文菜单</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;contextmenu&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>2.禁止鼠标选中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;selectstart&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="「鼠标事件对象」"><a href="#「鼠标事件对象」" class="headerlink" title="「鼠标事件对象」"></a><strong>「鼠标事件对象」</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//1.client鼠标在可视区的x和y坐标</span></span><br><span class="line">    <span class="built_in">console</span>.log(e.clientX);</span><br><span class="line">    <span class="built_in">console</span>.log(e.clientY);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;-----------------&#x27;</span>);</span><br><span class="line">    <span class="comment">//2.page鼠标在页面文档的x和y坐标</span></span><br><span class="line">    <span class="built_in">console</span>.log(e.pageX);</span><br><span class="line">    <span class="built_in">console</span>.log(e.pageY);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;-----------------&#x27;</span>);</span><br><span class="line">    <span class="comment">//3.screen鼠标在电脑屏幕的x和y坐标</span></span><br><span class="line">    <span class="built_in">console</span>.log(e.screenX);</span><br><span class="line">    <span class="built_in">console</span>.log(e.screenY);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="案例：跟随鼠标的天使"><a href="#案例：跟随鼠标的天使" class="headerlink" title="案例：跟随鼠标的天使"></a>案例：跟随鼠标的天使</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h1 id="常用键盘事件"><a href="#常用键盘事件" class="headerlink" title="常用键盘事件"></a>常用键盘事件</h1><h2 id="「常用键盘事件」"><a href="#「常用键盘事件」" class="headerlink" title="「常用键盘事件」"></a><strong>「常用键盘事件」</strong></h2><table><thead><tr><th>键盘事件</th><th>触发条件</th></tr></thead><tbody><tr><td>onkeyup</td><td>某个键盘按键被松开时触发</td></tr><tr><td>onkeydown</td><td>某个键盘按键被按下时触发</td></tr><tr><td>onkeypress</td><td>某个键盘按键被按下时触发 但它不识别功能键比如ctrl shift</td></tr></tbody></table><ul><li>如使用addEventListener 不需要on</li><li>三个事件执行顺序; keydown–keypress–keyup</li></ul><h2 id="「键盘事件对象」"><a href="#「键盘事件对象」" class="headerlink" title="「键盘事件对象」"></a><strong>「键盘事件对象」</strong></h2><table><thead><tr><th>键盘事件对象属性</th><th>说明</th></tr></thead><tbody><tr><td>keyCode</td><td>返回改键的ASCII值</td></tr></tbody></table><ul><li>keypress不识别功能键，但keyCode属性能区分大小写，返回不同的ASCII值</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小白的前端之路 </tag>
            
            <tag> JavaScript基础 </tag>
            
            <tag> JavaScript API </tag>
            
            <tag> DOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript DOM</title>
      <link href="/%E5%89%8D%E7%AB%AF/Javascript%20DOM/"/>
      <url>/%E5%89%8D%E7%AB%AF/Javascript%20DOM/</url>
      
        <content type="html"><![CDATA[<h1 id="DOM简介"><a href="#DOM简介" class="headerlink" title="DOM简介"></a>DOM简介</h1><h2 id="「1-1什么是DOM」"><a href="#「1-1什么是DOM」" class="headerlink" title="「1.1什么是DOM」"></a><strong>「1.1什么是DOM」</strong></h2><p>文档对象模型(Document Object Model ，简称DOM)，是W3C组织推荐的处理扩展标记语言(HTML或者XML)的编程接口。</p><p>W3C已经定义了一系列的DOM接口，通过这些接口可以改变网页的内容，结构和样式。</p><ol><li>对于JavaScript，为了能够使JavaScript操作HTML，JavaScript就有了一套自己的DOM编程接口</li><li>对于HTML，DOM使得HTML形成了一颗DOM树，包含文档，元素，节点。</li><li>我们获取过来的DOM元素是一个对象（Object），所以称为 文档对象模型</li></ol><h2 id="「1-2DOM树」"><a href="#「1-2DOM树」" class="headerlink" title="「1.2DOM树」"></a><strong>「1.2DOM树」</strong></h2><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206141517149.png"></p><ul><li>文档：一个页面就是一个文档，DOM中用document表示</li><li>元素：页面中所有标签都是元素，DOM中用element表示</li><li>节点：网页中所有内容都是节点(标签，属性，文本，注释)，DOM中使用node表示</li></ul><p>DOM把以上内容都看作是对象</p><h1 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h1><h2 id="「2-1如何获取页面元素」"><a href="#「2-1如何获取页面元素」" class="headerlink" title="「2.1如何获取页面元素」"></a><strong>「2.1如何获取页面元素」</strong></h2><p>DOM在实际开发中主要用来操作元素</p><p>有如下几种方式</p><ul><li>根据ID获取</li><li>根据标签名获取</li><li>通过HTML5新增方法获取</li><li>特殊元素获取</li></ul><h2 id="「2-2根据id」"><a href="#「2-2根据id」" class="headerlink" title="「2.2根据id」"></a><strong>「2.2根据id」</strong></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// document.getElementById(&#x27;id名&#x27;);</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;time&quot;</span>&gt;</span>2022<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 1.因为我们文档页面从上往下加载，所以先有标签，script标签写在下面</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 2.get 获得 Element 元素 By 通过 &quot;驼峰命名法&quot;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 3.参数 id是一个大小写敏感的字符串</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 4.返回的是一个元素对象</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> timer = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;time&#x27;</span>);</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(timer);</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> timer); <span class="comment">// Object</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// 5.console.dir 打印我们返回的元素对象，更好的查看里面的属性和方法</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.dir(timer);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="「2-3根据标签名」"><a href="#「2-3根据标签名」" class="headerlink" title="「2.3根据标签名」"></a><strong>「2.3根据标签名」</strong></h2><p>返回的是带有指定标签名的对象的集合，</p><ul><li>因为是集合，所以使用时要遍历</li><li>得到元素对象是动态的</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;标签名&#x27;</span>);</span><br></pre></td></tr></table></figure><p>还可以获取某个元素（父元素）内部所有指定标签名的子元素，父元素必须是单个对象（必须指明是哪一个元素对象），获取时不包括父元素自己</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> element.getElementByName(<span class="string">&#x27;标签名&#x27;</span>);</span><br><span class="line"><span class="comment">//element为父元素，标签名是子元素</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">// document.getElementsByTagName(&#x27;标签名&#x27;);</span><br><span class="line">// element.getElementsByTagName(&#x27;标签名&#x27;);</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否应是等你好久1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否应是等你好久2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否应是等你好久3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否应是等你好久4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否应是等你好久5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span> <span class="attr">id</span> = <span class="string">&quot;ol&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>生僻字<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>生僻字<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>生僻字<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>生僻字<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>生僻字<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 1.返回的是 获取过来元素对象的集合 以伪数组的形式存储</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> lis = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(lis);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(lis[<span class="number">0</span>]);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 2.要依次打印里面的元素，可以采用遍历</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; lis.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(lis[i]);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 3.如果页面中只有一个li，返回的还是伪数组的形式 </span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 4.如果页面中没有这个元素 返回的是空的伪数组形式</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// 5.element.getElementsByTagName(&#x27;标签名&#x27;);</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> ol = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;ol&#x27;</span>); <span class="comment">// [ol]</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(ol[<span class="number">0</span>].getElementsByTagName(<span class="string">&#x27;li&#x27;</span>)); <span class="comment">//父元素必须指明具体元素，不能是数组</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 或者ol指定一个id</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> ol = documnet.getElementsById(<span class="string">&#x27;ol&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(ol.getElementsByTagName(<span class="string">&#x27;li&#x27;</span>));</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="「2-4通过H5获取」"><a href="#「2-4通过H5获取」" class="headerlink" title="「2.4通过H5获取」"></a><strong>「2.4通过H5获取」</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;类名&#x27;</span>); <span class="comment">//根据类名返回元素对象集合</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">&#x27;选择器&#x27;</span>); <span class="comment">//根据指定选择器返回第一个元素对象</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">documnet.querySelectorAll(<span class="string">&#x27;选择器&#x27;</span>); <span class="comment">//根据指定选择器返回所有元素对象</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>盒子1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>盒子2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>产品<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 1.documnet.getElementsByClassName(&#x27;类名&#x27;); </span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> boxs = documnet.getElementsByClassName(<span class="string">&#x27;box&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(boxs);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 2.document.querySelector(&#x27;选择器&#x27;); 返回第一个，里面选择器要加相应符号</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> firstbox = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.box&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>,log(firstbox);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> nav = documnet.querySelector(<span class="string">&#x27;#nav&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(nav);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> li = documnet.querySelector(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(li);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 3.documnet.querySelectorAll(&#x27;选择器&#x27;); //返回所有元素对象集合</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> allBox = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.box&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(allBox);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="「2-5获取特殊元素（body，html）」"><a href="#「2-5获取特殊元素（body，html）」" class="headerlink" title="「2.5获取特殊元素（body，html）」"></a><strong>「2.5获取特殊元素（body，html）」</strong></h2><ul><li><p>获取body元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.body  <span class="comment">// 返回body元素对象</span></span><br></pre></td></tr></table></figure></li><li><p>获取html元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.documentElement   <span class="comment">// 返回html元素对象</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 1.获取body元素</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> bodyEle = <span class="built_in">document</span>.body;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(bodyEle);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.dir(bodyEle);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 2.获取html元素</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> htmlEle = <span class="built_in">document</span>.documentElement;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(htmlEle);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="事件基础"><a href="#事件基础" class="headerlink" title="事件基础"></a>事件基础</h1><h2 id="「3-1事件概述」"><a href="#「3-1事件概述」" class="headerlink" title="「3.1事件概述」"></a><strong>「3.1事件概述」</strong></h2><p>JavaScript使我们有能力创建静态页面，而事件是可以被JavaScript侦测搭配的行为</p><p>简单理解：触发….响应机制</p><p>网页中每个元素都可以产生某些可以触发JavaScript的事件，例如我们可以在用户点击某按钮时产生一个事件，然后去执行某些操作</p><h2 id="「3-2事件三要素」"><a href="#「3-2事件三要素」" class="headerlink" title="「3.2事件三要素」"></a><strong>「3.2事件三要素」</strong></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">botton</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>唐伯虎<span class="tag">&lt;/<span class="name">botton</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//点击一个按钮</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//1.事件是由三部分组成，事件源 事件类型 事件处理程序 我们称为事件三要素</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//(1) 事件源 事件被触发的对象</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//(2) 事件类型 如何触发 比如鼠标点击（onclick）还是鼠标经过还是键盘按下</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//(3) 事件处理程序 如何通过一个函数赋值的方式 完成</span></span></span><br><span class="line"><span class="javascript">        btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">&#x27;点秋香&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="「3-3执行事件的步骤」"><a href="#「3-3执行事件的步骤」" class="headerlink" title="「3.3执行事件的步骤」"></a><strong>「3.3执行事件的步骤」</strong></h2><ol><li>获取事件源</li><li>注册事件（绑定事件）</li><li>添加事件处理程序（采取函数赋值形式）</li></ol><p>常见鼠标事件</p><table><thead><tr><th>鼠标事件</th><th>触发条件</th></tr></thead><tbody><tr><td>onclick</td><td>鼠标点击左键触发</td></tr><tr><td>onmouseover</td><td>鼠标经过触发</td></tr><tr><td>onmouseout</td><td>鼠标离开触发</td></tr><tr><td>onfocus</td><td>获得鼠标焦点触发</td></tr><tr><td>onblur</td><td>失去鼠标焦点触发</td></tr><tr><td>onmousemove</td><td>鼠标移动触发</td></tr><tr><td>onmouseup</td><td>鼠标弹起触发</td></tr><tr><td>onmousedown</td><td>鼠标按下触发</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 获取事件源</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 绑定事件 div:onmouseover</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 添加事件处理程序</span></span></span><br><span class="line"><span class="javascript">        div:onmouseover = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            alert (<span class="string">&#x27;我被选中了&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="操作元素"><a href="#操作元素" class="headerlink" title="操作元素"></a>操作元素</h1><p>JavaScript的DOM操作可以改变网页内容，结构和样式，我们可以利用DOM操作元素里面的内容属性等。注意一下都是属性。</p><h2 id="「4-1改变元素内容」"><a href="#「4-1改变元素内容」" class="headerlink" title="「4.1改变元素内容」"></a><strong>「4.1改变元素内容」</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">elememt.innerText  <span class="comment">// 从起始位置到终止位置的内容，但它会去除html标签，同时空格和换行也会去掉</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">elemetn.innerHTML  <span class="comment">// 起始位置到终点位置的全部内容，包括html标签同时保留空格和换行</span></span><br></pre></td></tr></table></figure><h3 id="案例：改变元素内容"><a href="#案例：改变元素内容" class="headerlink" title="案例：改变元素内容"></a>案例：改变元素内容</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span>,<span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">botton</span>&gt;</span>显示系统当前时间<span class="tag">&lt;/<span class="name">botton</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>某个时间<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>123<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 当我们点击了按钮，div里面的文字会发生变化</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 1.获取元素</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 2.注册事件</span></span></span><br><span class="line"><span class="javascript">        btn:onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            div.innerHTML = getDate();</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">getDate</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> year = date.getFullYear();</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> month = date.getMonth() + <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> dates = date.getDate();</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> arr = [<span class="string">&#x27;星期日&#x27;</span>,<span class="string">&#x27;星期一&#x27;</span>,<span class="string">&#x27;星期二&#x27;</span>,<span class="string">&#x27;星期三&#x27;</span>,<span class="string">&#x27;星期四&#x27;</span>,<span class="string">&#x27;星期五&#x27;</span>,<span class="string">&#x27;星期六&#x27;</span>];</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> day = date.getDay();</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="string">&#x27;今天是：&#x27;</span> + year + <span class="string">&#x27;年&#x27;</span> + month + <span class="string">&#x27;月&#x27;</span> + dates + <span class="string">&#x27;日&#x27;</span> + arr[day];</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 元素也可以不用添加事件修改内容</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> p = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;p&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        p.innerHTML = getDate();</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="「4-2常用元素的属性操作」"><a href="#「4-2常用元素的属性操作」" class="headerlink" title="「4.2常用元素的属性操作」"></a><strong>「4.2常用元素的属性操作」</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">innerText innerHTML 改变元素内容</span><br><span class="line">src href</span><br><span class="line">id alt title</span><br><span class="line">加一个 . 符号</span><br></pre></td></tr></table></figure><h3 id="案例：分时显示图片，显示不同问候语"><a href="#案例：分时显示图片，显示不同问候语" class="headerlink" title="案例：分时显示图片，显示不同问候语"></a>案例：分时显示图片，显示不同问候语</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    // 根据系统不同时间判断</span><br><span class="line">    // 利用多分支语句设置不同的图片内容</span><br><span class="line">    // 需要一个图片，并根据时间修改图片，操作元素属性</span><br><span class="line">    // 需要div元素显示不同问候语</span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;#&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;好&quot;</span> <span class="attr">title</span>=<span class="string">&quot;上午好&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>好好写代码<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 1.获取元素</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> img = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;img&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 2.得到当前小时数</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> h = date.getHours();</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 3.判断小时数改变图片文字信息</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(h &lt; <span class="number">12</span>) &#123;</span></span><br><span class="line"><span class="javascript">            img.src = <span class="string">&#x27;#&#x27;</span>;</span></span><br><span class="line"><span class="javascript">            img.title = <span class="string">&#x27;上午好&#x27;</span>;</span></span><br><span class="line"><span class="javascript">            div.innerHTML = <span class="string">&#x27;亲，上午好，好好写代码&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(h &lt; <span class="number">18</span>) &#123;</span></span><br><span class="line"><span class="javascript">            img.src = <span class="string">&#x27;#&#x27;</span>;</span></span><br><span class="line"><span class="javascript">            img.title = <span class="string">&#x27;下午好&#x27;</span>;</span></span><br><span class="line"><span class="javascript">            div.innerHTML = <span class="string">&#x27;亲，下午好，好好写代码&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            img.src = <span class="string">&#x27;#&#x27;</span>;</span></span><br><span class="line"><span class="javascript">            img.title = <span class="string">&#x27;晚上好&#x27;</span>;</span></span><br><span class="line"><span class="javascript">            div.innerHTML = <span class="string">&#x27;亲，晚上好，好好写代码&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="「4-3表单元素属性操作」"><a href="#「4-3表单元素属性操作」" class="headerlink" title="「4.3表单元素属性操作」"></a><strong>「4.3表单元素属性操作」</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">利用DOM可以操作如下表单元素属性</span><br><span class="line">type value checked selected disabled</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;输入内容&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//1.获取元素</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> input = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;input&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//2.注册事件</span></span></span><br><span class="line"><span class="javascript">        btn:onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//input.innerHTML = &#x27;被点击了&#x27; 这个是普通盒子</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//表单里的值和文字是通过value来修改的</span></span></span><br><span class="line"><span class="javascript">            input.value = <span class="string">&#x27;被点击了&#x27;</span>;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//禁止点击</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.disabled = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//this 指向的是事件函数的调用者 btn</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="案例：仿京东显示隐藏密码"><a href="#案例：仿京东显示隐藏密码" class="headerlink" title="案例：仿京东显示隐藏密码"></a>案例：仿京东显示隐藏密码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="「4-4样式属性操作」"><a href="#「4-4样式属性操作」" class="headerlink" title="「4.4样式属性操作」"></a><strong>「4.4样式属性操作」</strong></h2><p>我们可以通过JS修改元素大小，颜色，位置等样式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">element.style.属性  <span class="comment">//行内样式操作</span></span><br><span class="line">element.className  <span class="comment">//类名样式操作</span></span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>如果样式修改较多，可以采用操作类名方式更改元素样式</li><li>class是一个保留字，因此使用className来操作类名属性</li><li>className会直接更改元素类名，会覆盖原先的类名</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;first&quot;</span>&gt;</span>文本<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">//1.使用 element.style 修改样式，样式比较少或者功能简单情况下使用</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> test = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        test:onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.style.backgroundColor = <span class="string">&#x27;purple&#x27;</span>;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.style.color = <span class="string">&#x27;#fff&#x27;</span>;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.style.fontSize = <span class="string">&#x27;25px&#x27;</span>;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.style.marginTop = <span class="string">&#x27;100px&#x27;</span>;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 2.使用element.className更改元素样式，适用于样式较多或者功能复杂的情况</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 修改类名为change</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 3.如果想要保留原来的类名，可以使用多类名选择器</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.className = <span class="string">&#x27;change&#x27;</span>;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.className = <span class="string">&#x27;first change&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206141824210.png"></p><h2 id="「4-5排他思想」"><a href="#「4-5排他思想」" class="headerlink" title="「4.5排他思想」"></a><strong>「4.5排他思想」</strong></h2><p>如果有同一组元素，我们想要某一个元素实现某种样式，需要用到循环的排他思想算法</p><ol><li>给所有元素全部清除样式（干掉其他人）</li><li>给当前元素设置样式（留下我自己）</li><li>注意顺序不能颠倒，首先干掉其他人，在设置自己</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮4<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//1.获取所有按钮元素</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> btns = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// btns得到的是伪数组，里面的每一个元素 btn[i]</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; btns.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">            btns[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//(1)先把所有按钮颜色去掉</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; btns.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">                    btns[i].style.backgroundColor = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//(2)然后让当前元素背景颜色为pink</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.style.backgroundColor = <span class="string">&#x27;pink&#x27;</span>;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            </span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//2.排他算法</span></span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="案例：百度换肤效果"><a href="#案例：百度换肤效果" class="headerlink" title="案例：百度换肤效果"></a>案例：百度换肤效果</h3><ul><li>这个案例是给一组元素注册事件</li><li>给四个小图片利用循环注册点击事件</li><li>当我们点击了这个图片，让我们背景颜色改为当前的图片</li><li>核心算法：把当前图片的src 路径取过来，给body 作为背景即可</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        *&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">img/1.jpg</span>) no-repeat center top;</span></span><br><span class="line"><span class="css">        &#125; </span></span><br><span class="line"><span class="css">        <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.baidu</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">overflow</span>: none;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding-top</span>: <span class="number">3px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.baidu</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">1px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.baidu</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;baidu&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;无图片1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/2.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;无图片2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/3.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;无图片3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/4.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;无图片4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//1.获取元素</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> imgs = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.baidu&#x27;</span>).querySelectorAll(<span class="string">&#x27;img&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//2.循环注册事件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; imgs.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">            imgs[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// this.src就是我们点击图片的路径</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// console.log(this.src)</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// 把这个路径 this.src给body</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.body.style.backgroundImage = <span class="string">&#x27;url(&#x27;</span>+ <span class="built_in">this</span>.src +<span class="string">&#x27;)&#x27;</span>;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span> </span><br></pre></td></tr></table></figure><h3 id="案例：表格隔行变色效果"><a href="#案例：表格隔行变色效果" class="headerlink" title="案例：表格隔行变色效果"></a>案例：表格隔行变色效果</h3><ul><li>用到鼠标经过事件和鼠标离开事件</li><li>核心思路：鼠标经过tr行，当前行变背景颜色，鼠标离开去掉当前背景颜色</li><li>注意：第一行（thead里面的行）不需要变换颜色</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">table</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-collapse</span>: collapse;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">thead</span> <span class="selector-tag">tr</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">tbody</span> <span class="selector-tag">tr</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">tbody</span> <span class="selector-tag">td</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#d7d7d7</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.bg</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>代码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>名称<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>最新公布净值<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>累计净值<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>前单位净值<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>净值增长率<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>003526<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>农银金辉<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1.075<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1.254<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1.548<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1.5556<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>003526<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>农银金辉<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1.075<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1.254<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1.548<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1.5556<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 1.获取元素 获得tbody里面的tr</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> trs = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;tbody&#x27;</span>).querySelectorAll(<span class="string">&#x27;tr&#x27;</span>);</span></span><br><span class="line"><span class="javascript"><span class="comment">// 2.利用循环注册事件</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; trs.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 3.鼠标经过事件 onmouseover</span></span></span><br><span class="line"><span class="javascript">    trs[i].onmouseover = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.className = <span class="string">&#x27;bg&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    trs[i].onmouseout = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 4.鼠标离开事件 onmouseout</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.className = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="案例：全选或反选"><a href="#案例：全选或反选" class="headerlink" title="案例：全选或反选"></a>案例：全选或反选</h3><ul><li>全选或取消全选的做法：让下面的所有复选框的checked属性（选中状态）跟随全选按钮即可</li><li>下面复选框需要全部选中，上面全选才能选中的做法：给下面所有复选框绑定点击事件，每次点击，都要循环查看下面所有复选框是否有未选中的，如果有一个未选中的，上面的全选就不选中</li><li>可以设置一个变量，来控制全选是否选中</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-tag">table</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;j_cbAll&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>商品<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>价格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">id</span>=<span class="string">&quot;j_tb&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>iPhone6<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>8000<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>ipad<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>5000<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>watch<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>2000<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 1.全选和取消全选的方法，让下面所有复选框的checked属性跟随全选按钮即可</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 获取元素</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> j_cbAll = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;j_cbAll&#x27;</span>); <span class="comment">//全选按钮</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> j_tb = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;j_tb&#x27;</span>).getElementsByTagName(<span class="string">&#x27;input&#x27;</span>); <span class="comment">//下面所有的复选框</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 注册事件</span></span></span><br><span class="line"><span class="javascript">    j_cbAll.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//this.checked 可以得到复选框的选中状态，如果是true则是选中如果是false则未选中</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.checked);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; j_tb.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">            j_tb[i].checked = <span class="built_in">this</span>.checked;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 2.下面复选框需要全部选中，上面全选才能选中的做法</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; j_tb.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">        j_tb[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//flag控制全选按钮是否选中</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> flag = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//每次点击复选框都要循环检查三个小按钮是否全被选中</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; j_tb.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(!j_tb[i].checked) &#123;</span></span><br><span class="line"><span class="javascript">                    flag = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            j_cbAll.checked = flag;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="「4-6自定义属性操作」"><a href="#「4-6自定义属性操作」" class="headerlink" title="「4.6自定义属性操作」"></a><strong>「4.6自定义属性操作」</strong></h2><h3 id="1-获取元素属性"><a href="#1-获取元素属性" class="headerlink" title="1.获取元素属性"></a>1.获取元素属性</h3><ul><li>element.属性;  获取内置属性值（元素本身自带的属性）</li><li>element.getAttribute(‘属性’); 主要获取自定义属性</li></ul><h3 id="2-设置属性值"><a href="#2-设置属性值" class="headerlink" title="2.设置属性值"></a>2.设置属性值</h3><ul><li>element.属性 = ‘值’ ;  设置内置属性值</li><li>element.getAttribute(‘属性’, ‘值’);   主要设置自定义属性</li></ul><h3 id="3-移除属性"><a href="#3-移除属性" class="headerlink" title="3.移除属性"></a>3.移除属性</h3><ul><li>element.removeAttribute(‘属性’); </li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 1.获取元素属性值</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// (1)element.属性</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(div.id);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// (2)element.getAttribute(&#x27;属性&#x27;)  &quot;get得到 Attribute属性 程序员自己添加的属性称为自定义属性 index&quot;</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(div.getAttribute(<span class="string">&#x27;id&#x27;</span>));</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(div.getAttribute(<span class="string">&#x27;index&#x27;</span>));</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 2.设置元素属性值</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// (1) element.属性 = &#x27;值&#x27;</span></span></span><br><span class="line"><span class="javascript">    div.id = <span class="string">&#x27;test&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    div.className = <span class="string">&#x27;navs&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// (2) element.setAttribute(&#x27;属性&#x27;,&#x27;值&#x27;)  主要针对自定义属性</span></span></span><br><span class="line"><span class="javascript">    div.setAttribute(<span class="string">&#x27;index&#x27;</span>,<span class="string">&#x27;2&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    div.setAttribute(<span class="string">&#x27;class&#x27;</span>,<span class="string">&#x27;footer&#x27;</span>); <span class="comment">//class特殊 这里写的事class 而不是className</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 3.移除属性 removeAttribute(&#x27;属性&#x27;)</span></span></span><br><span class="line"><span class="javascript">    div.removeAttribute(<span class="string">&#x27;index&#x27;</span>);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="「4-7-H5自定义属性」"><a href="#「4-7-H5自定义属性」" class="headerlink" title="「4.7 H5自定义属性」"></a><strong>「4.7 H5自定义属性」</strong></h2><p>自定义属性目的：为了保存并使用数据，有些数据可以保存到页面中而不用保存在数据库中</p><p>有些自定义属性容易引起歧义，不容易判断是否是元素的内置属性还是自定义属性，所以H5新增了自定义属性</p><h3 id="1-设置H5自定义属性"><a href="#1-设置H5自定义属性" class="headerlink" title="1.设置H5自定义属性"></a>1.设置H5自定义属性</h3><p>H5规定自定义属性必须以**data-**开头作为属性名并赋值</p><h3 id="2-获取H5自定义属性"><a href="#2-获取H5自定义属性" class="headerlink" title="2.获取H5自定义属性"></a>2.获取H5自定义属性</h3><ol><li>兼容性获取 element.getAttribute(‘data-index’)</li><li>H5新增 element.dataset.index或者 element.dataset[‘index’]</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">getTime</span>=<span class="string">&quot;20&quot;</span> <span class="attr">data-index</span>=<span class="string">&quot;2&quot;</span> <span class="attr">data-list-name</span>=<span class="string">&quot;andy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// console.log(div.getTime);</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(div.getAttribute(<span class="string">&#x27;getTime&#x27;</span>));</span></span><br><span class="line"><span class="javascript">    div.setAttribute(<span class="string">&#x27;data-time&#x27;</span>,<span class="string">&#x27;20&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(div.getAttribute(<span class="string">&#x27;data-index&#x27;</span>));</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(div.getAttribute(<span class="string">&#x27;data-list-name&#x27;</span>));</span></span><br><span class="line"><span class="javascript">    <span class="comment">// H5新增的获取自定义属性的方法 </span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(div.dataset);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(div.dataset.index);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(div.dataset[<span class="string">&#x27;index&#x27;</span>]);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 如果自定义属性里面有多个-连接的单词，我们获取的时候采用驼峰命名法</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(div.dataset.listName);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(div.dataset[<span class="string">&#x27;listName&#x27;</span>]);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="案例：tab栏切换"><a href="#案例：tab栏切换" class="headerlink" title="案例：tab栏切换"></a>案例：tab栏切换</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h1 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h1><h2 id="「5-1为什么学节点操作」"><a href="#「5-1为什么学节点操作」" class="headerlink" title="「5.1为什么学节点操作」"></a><strong>「5.1为什么学节点操作」</strong></h2><p>获取元素通常使用两种方式</p><ol><li>利用DOM提供的方法获取元素</li><li>利用节点层级关系获取元素</li></ol><h2 id="「5-2节点概述」"><a href="#「5-2节点概述」" class="headerlink" title="「5.2节点概述」"></a><strong>「5.2节点概述」</strong></h2><p>网页中所有内容都是节点（标签，属性，文本，注释等），在DOM中，节点使用node表示。</p><p>HTML DOM树中所有节点均可通过JavaScript进行访问，所有HTML元素（节点）均可被修改，也可以创建或删除</p><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206211618584.png"></p><p>一般的，节点至少拥有nodeType（节点类型），nodeName（节点名称），nodeValue（节点值）这三个基本属性</p><ul><li>元素节点 nodeType 为1</li><li>属性节点 nodeType 为2</li><li>文本节点 nodeType 为3</li></ul><p>实际开发中，节点操作主要操作元素节点</p><h2 id="「5-3节点层级」"><a href="#「5-3节点层级」" class="headerlink" title="「5.3节点层级」"></a><strong>「5.3节点层级」</strong></h2><p>利用DOM树可以把节点划分成不同的层级关系，常见的是父子兄层关系</p><h3 id="1-父级节点"><a href="#1-父级节点" class="headerlink" title="1.父级节点"></a>1.父级节点</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node.parentNode</span><br></pre></td></tr></table></figure><ul><li>parentName 属性可返回某节点的父节点件，注意是最近的一个父节点</li><li>如果指定的节点没有父节点则返回null</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;erweima&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> erweima = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.erweima&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">//得到的是离元素最近的父级节点（亲爸爸） 找不到就返回null</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(erweima.parentNode);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-子节点"><a href="#2-子节点" class="headerlink" title="2.子节点"></a>2.子节点</h3><ul><li>标准</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>parentNode.childNodes <span class="comment">// 标准</span></span><br></pre></td></tr></table></figure><p>返回包含指定节点的子节点的集合，该集合为即时更新的集合。</p><p>注意：</p><p>返回值里包含所有的节点，包括元素节点，文本节点等</p><p>如果只要获取元素节点，需要专门处理，所以一般不提倡使用childNodes</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;ul&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; ul.childNodes.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(ul.childNodes[i].nodeType = <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// ul.childNodes[i] 是元素节点</span></span><br><span class="line">        <span class="built_in">console</span>.log(ul.childNodes[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>非标准(重点)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2.</span>parentNode.children <span class="comment">// 非标准</span></span><br></pre></td></tr></table></figure><p>parentNode.chileren 是一个只读属性，返回所有子元素节点，它只返回子元素节点，其余节点不返回（这是我们重点掌握的）</p><p>虽然children是一个非标准，但得到各个浏览器支持</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.</span>parentNode.firstChild</span><br><span class="line"><span class="number">4.</span>parentNode.lastChild</span><br></pre></td></tr></table></figure><p>返回第一个（最后一个）<strong>子节点</strong>，找不到返回null，同样返回的是所有节点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5.parentNode.firstElementChild</span><br><span class="line">6.parentNode.lastElementChild</span><br></pre></td></tr></table></figure><p>返回的是第一个（最后一个）<strong>子元素节点</strong>，找不到返回null</p><h4 id="案例：下拉菜单"><a href="#案例：下拉菜单" class="headerlink" title="案例：下拉菜单"></a>案例：下拉菜单</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-兄弟节点"><a href="#3-兄弟节点" class="headerlink" title="3.兄弟节点"></a>3.兄弟节点</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node.nextSibling</span><br><span class="line">node.previousSibling</span><br></pre></td></tr></table></figure><p>返回的是当前元素的下一个（上一个）<strong>兄弟节点</strong>，找不到则返回null, 是包含所有节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node.nextElementSibling</span><br><span class="line">node.previousElementSibling</span><br></pre></td></tr></table></figure><p>返回的是当前元素的上一个（下一个）<strong>兄弟元素节点</strong>，找不到返回null</p><h2 id="「5-4创建与添加节点」"><a href="#「5-4创建与添加节点」" class="headerlink" title="「5.4创建与添加节点」"></a><strong>「5.4创建与添加节点」</strong></h2><h3 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.createElement(<span class="string">&#x27;tagName&#x27;</span>)</span><br></pre></td></tr></table></figure><p>document.createElement(‘tagName’)方法创建由tagName指定的HTML元素，因为这些元素原先不存在，是根据我们的需求动态产生的，所以也称之为动态创建元素节点</p><h3 id="添加节点"><a href="#添加节点" class="headerlink" title="添加节点"></a>添加节点</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node.appendChild(child)</span><br></pre></td></tr></table></figure><p>node.appendChild(child)方法将一个节点添加到指定父节点的子节点列表末尾。类似CSS的after伪元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node.inserBefore(child,指定元素)</span><br></pre></td></tr></table></figure><p>node.inserBefore(child,指定元素)方法将一个节点添加到父节点的指定子节点的前面，类似CSS的before伪元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>123<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//1.创建节点元素</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">//2.添加节点 node.appendChild(child)</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;ul&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    ul.appendChild(li);</span></span><br><span class="line"><span class="javascript">    <span class="comment">//3.添加节点 node.inserBefore(child,指定元素)</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> lili = documentquerySelector(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    ul.inserBefore(lili,ul.children[<span class="number">0</span>]);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 我们想要在页面添加一个新的元素：1，创建元素 2，添加元素</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="案例：简单版发布留言"><a href="#案例：简单版发布留言" class="headerlink" title="案例：简单版发布留言"></a>案例：简单版发布留言</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="「5-5删除节点」"><a href="#「5-5删除节点」" class="headerlink" title="「5.5删除节点」"></a><strong>「5.5删除节点」</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node.removeChild(child)</span><br></pre></td></tr></table></figure><p>node.removeChild()方法从DOM中删除一个子节点，返回删除的节点</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="案例：删除留言板"><a href="#案例：删除留言板" class="headerlink" title="案例：删除留言板"></a>案例：删除留言板</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="「5-6复制节点（克隆节点）」"><a href="#「5-6复制节点（克隆节点）」" class="headerlink" title="「5.6复制节点（克隆节点）」"></a><strong>「5.6复制节点（克隆节点）」</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node.cloneNode()</span><br></pre></td></tr></table></figure><p>node.cloneNode() 方法返回调用该方法的节点的一个副本，也称为克隆节点或者复制节点</p><p>注意：</p><ol><li>如果括号内参数为空或者false，则是浅拷贝，只克隆复制节点本身，不克隆里面的字节点</li><li>如果括号内参数为true，则是深拷贝，会克隆复制节点本身以及里面所有的子节点</li></ol><h3 id="案例：动态生成表格"><a href="#案例：动态生成表格" class="headerlink" title="案例：动态生成表格"></a>案例：动态生成表格</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="「5-8三种动态创建元素的区别」"><a href="#「5-8三种动态创建元素的区别」" class="headerlink" title="「5.8三种动态创建元素的区别」"></a><strong>「5.8三种动态创建元素的区别」</strong></h2><ul><li>document.write()</li><li>element.innerHTML()</li><li>document.createElement()</li></ul><p>区别：</p><ol><li>document.write() 是直接将内容写入页面的内容流，但是文档流执行完毕，它会导致页面全部重绘</li><li>innerHTML() 是将内容写入某个DOM节点，不会导致页面全部重绘</li><li>innerHTML() 创建多个元素效率更高（不要拼接字符串，采取数组的形式拼接），结构稍微复杂</li><li>createElement() 创建多个元素效率稍微低一点，但是结构清晰</li><li>不同浏览器下，innerHTML比createELement效率高</li></ol><h1 id="DOM重点核心"><a href="#DOM重点核心" class="headerlink" title="DOM重点核心"></a>DOM重点核心</h1><p>关于DOM操作，我们主要针对于元素的操作，主要有创建，增，删，改，查，属性操作，事件操作</p><h2 id="「6-1创建」"><a href="#「6-1创建」" class="headerlink" title="「6.1创建」"></a><strong>「6.1创建」</strong></h2><ol><li>document.write</li><li>innerHTML</li><li>createELement</li></ol><h2 id="「6-2增」"><a href="#「6-2增」" class="headerlink" title="「6.2增」"></a><strong>「6.2增」</strong></h2><ol><li>appendChild</li><li>insertBefore</li></ol><h2 id="「6-3删」"><a href="#「6-3删」" class="headerlink" title="「6.3删」"></a><strong>「6.3删」</strong></h2><ol><li>removeChild</li></ol><h2 id="「6-4改」"><a href="#「6-4改」" class="headerlink" title="「6.4改」"></a><strong>「6.4改」</strong></h2><p>主要修改DOM的元素属性，DOM元素的内容，属性，表单的值等</p><ol><li>修改元素属性：src，href，title等</li><li>修改普通元素内容：innerHTMl，innerText</li><li>修改表单元素：value,type,disabled等</li><li>修改元素样式：style,className</li></ol><h2 id="「6-5查」"><a href="#「6-5查」" class="headerlink" title="「6.5查」"></a><strong>「6.5查」</strong></h2><p>主要获取查询DOM元素</p><ol><li>DOM提供的API方法：getElementById, getElementByTagName, 古老用法不太推荐</li><li>H5提供的新方法：querySelector, querySelectorAll  提倡使用</li><li>利用节点操作获取元素：父（parentNode）, 子（children）, 兄（previousElementSibling, nextElementsibling） 推荐使用</li></ol><h2 id="「6-6属性操作」"><a href="#「6-6属性操作」" class="headerlink" title="「6.6属性操作」"></a><strong>「6.6属性操作」</strong></h2><p>主要针对自定义属性</p><ol><li>setAttribute: 设置DOM的属性值</li><li>getAttribute: 得到DOM的属性值</li><li>removeAttribute: 移除属性</li></ol><h2 id="「6-7事件操作」"><a href="#「6-7事件操作」" class="headerlink" title="「6.7事件操作」"></a><strong>「6.7事件操作」</strong></h2><p>给元素注册事件，采取 </p><p>事件源. 事件类型 = 事件处理程序</p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小白的前端之路 </tag>
            
            <tag> JavaScript基础 </tag>
            
            <tag> JavaScript API </tag>
            
            <tag> DOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript内置对象</title>
      <link href="/%E5%89%8D%E7%AB%AF/Javascript%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/"/>
      <url>/%E5%89%8D%E7%AB%AF/Javascript%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="内置对象概述"><a href="#内置对象概述" class="headerlink" title="内置对象概述"></a>内置对象概述</h1><p>JavaScript 中的对象分为3种：<strong>自定义对象</strong> 、<strong>内置对象</strong>、 <strong>浏览器对象</strong><br>前面两种对象是JS基础内容，属于ECMAScript;第三个浏览器对象属于JS独有的，JS API讲解内置对象就是指 js语言自带的一些对象，这些对象供开发者使用，并提供了一些常用的或是最基本而非必要的功能(属性和方法),内置对象最大的优点就是帮助我们快速开发。</p><ul><li>JavaScript提供了多个内置对象：Math，Data，Array，String等</li></ul><h2 id="「查文档」"><a href="#「查文档」" class="headerlink" title="「查文档」"></a><strong>「查文档」</strong></h2><p>学习一个内置对象的使用，只要学会其常用成员的使用即可，我们可以通过查文档学习。<br><code>MDN:</code><a href="https://developer.mozilla.org/zh-CN/">https://developer.mozilla.org/zh-CN/</a></p><h1 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a><strong>Math对象</strong></h1><p><strong>「Math对象」</strong>不是构造函数，它具有数学常数和函数的属性和方法，跟数学相关。</p><table><thead><tr><th>属性. 方法名</th><th>功能</th></tr></thead><tbody><tr><td>Math.PI</td><td>圆周率</td></tr><tr><td>Math.floor()</td><td>向下取整</td></tr><tr><td>Math.ceil()</td><td>向上取整</td></tr><tr><td>Math.round()</td><td>四舍五入，就近取整，注意-3.5 结果是 -3</td></tr><tr><td>Math.abs()</td><td>绝对值</td></tr><tr><td>Math.max()/Math.min()</td><td>求最大值和最小值</td></tr><tr><td>Math.random()</td><td>获取范围在【0，1） 内的随机数</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Math数学对象不是一个构造函数，所以我们不需要new 来调用，而是直接使用里面的属性和方法即可</span></span><br><span class="line"><span class="comment">//Math对象最大值</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.PI); <span class="comment">// 一个属性 圆周率</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.max(<span class="number">1</span>,<span class="number">99</span>,<span class="number">3</span>)); <span class="comment">// 99</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.max(-<span class="number">1</span>,-<span class="number">10</span>)); <span class="comment">// -1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.max(<span class="number">1</span>,<span class="number">99</span>,<span class="string">&#x27;pink老师&#x27;</span>)); <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.max()); <span class="comment">// -Infinity</span></span><br></pre></td></tr></table></figure><h2 id="案例：封装自己的数学对象"><a href="#案例：封装自己的数学对象" class="headerlink" title="案例：封装自己的数学对象"></a>案例：封装自己的数学对象</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用对象封装自己的数学对象 里面有PI最大值和最小值</span></span><br><span class="line"><span class="keyword">var</span> myMath = &#123;</span><br><span class="line">    <span class="attr">PI</span>: <span class="number">3.1415926535</span>,</span><br><span class="line">    <span class="attr">max</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        max = <span class="built_in">arguments</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="built_in">arguments</span>.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">arguments</span>[i] &gt; max) &#123;</span><br><span class="line">                max = <span class="built_in">arguments</span>[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">min</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        min = <span class="built_in">arguments</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">arguments</span> - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">arguments</span>[i] &lt; min) &#123;</span><br><span class="line">                min = <span class="built_in">arguments</span>[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(myMath.PI);</span><br><span class="line"><span class="built_in">console</span>.log(myMath.max(<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>));</span><br><span class="line"><span class="built_in">console</span>.log(myMath.min(<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">5</span>));</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Math绝对值和三个取整方法</span></span><br><span class="line"><span class="comment">//1.绝对值方法</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.abs(<span class="number">1</span>)); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.abs(-<span class="number">1</span>)); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.abs(<span class="string">&#x27;-1&#x27;</span>)); <span class="comment">// 1 隐式转换，会把字符型转换为数字型</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.abs(<span class="string">&#x27;pink&#x27;</span>)); <span class="comment">// NaN</span></span><br><span class="line"><span class="comment">//2.三个取整方法</span></span><br><span class="line"><span class="comment">//(1)Math.floor() &#x27;地板&#x27; 向下取整，往最小了取值</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.floor(<span class="number">1.2</span>)); <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.floor(<span class="number">1.8</span>)); <span class="comment">//1</span></span><br><span class="line"><span class="comment">//(2)Math.ceil() &#x27;天花板&#x27; 向上取整，往最大了取值</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.ceil(<span class="number">1.2</span>)); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.ceil(<span class="number">1.8</span>)); <span class="comment">// 2</span></span><br><span class="line"><span class="comment">//(3)Math.round() 四舍五入 其他数字都是四舍五入，但是.5特殊，它往大了取</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(<span class="number">1.1</span>)); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(<span class="number">1.5</span>)); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(<span class="number">1.9</span>)); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(-<span class="number">1.1</span>)); <span class="comment">// -1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(-<span class="number">1.5</span>)); <span class="comment">// 这个结果是 -1</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.Math对象随机数方法， random() 返回一个随机小数 0 &lt;= i &lt;1</span></span><br><span class="line"><span class="comment">// 2.这个方法里面不跟参数</span></span><br><span class="line"><span class="comment">// 3.代码验证</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.random());</span><br><span class="line"><span class="comment">// 4.两数之间随机数，包含两数</span></span><br><span class="line"><span class="comment">// Math.floor(Math.random() * (max - min + 1)) + min;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandom</span>(<span class="params">min,max</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min + <span class="number">1</span>)) + min;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getRandom(<span class="number">1</span>,<span class="number">10</span>));</span><br><span class="line"><span class="comment">// 5.随机点名</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;甲&#x27;</span>,<span class="string">&#x27;乙&#x27;</span>,<span class="string">&#x27;丙&#x27;</span>,<span class="string">&#x27;丁&#x27;</span>,<span class="string">&#x27;戊&#x27;</span>,<span class="string">&#x27;己&#x27;</span>,<span class="string">&#x27;庚&#x27;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr[getRandom(<span class="number">0</span>,arr.length - <span class="number">1</span>)]);</span><br></pre></td></tr></table></figure><h2 id="案例：猜数字游戏"><a href="#案例：猜数字游戏" class="headerlink" title="案例：猜数字游戏"></a>案例：猜数字游戏</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//猜数字游戏</span></span><br><span class="line"><span class="comment">//1.随机生成一个1-10的整数，我们需要用到Math.random()方法</span></span><br><span class="line"><span class="comment">//2.需要一直菜刀正确为止，所以要一直循环</span></span><br><span class="line"><span class="comment">//3.while循环更简单</span></span><br><span class="line"><span class="comment">//4.核心算法：使用if else if 多分支语句来判断大于雄安与等于</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandom</span>(<span class="params">min,max</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min + <span class="number">1</span>)) + min;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> random = getRandom(<span class="number">1</span>,<span class="number">10</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123; <span class="comment">//死循环</span></span><br><span class="line">    <span class="keyword">var</span> num = prompt(<span class="string">&#x27;你来猜？请输入1-10之间的一个数字&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(num &gt; random) &#123;</span><br><span class="line">        alert(<span class="string">&#x27;你猜大了&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(num &lt; random) &#123;</span><br><span class="line">        alert(<span class="string">&#x27;你猜小了&#x27;</span>)；</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        alert(<span class="string">&#x27;猜对了&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>; <span class="comment">// 退出整个循环结束程序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Data对象"><a href="#Data对象" class="headerlink" title="Data对象"></a><strong>Data对象</strong></h1><p>  Date 对象和 Math 对象不一样，Date是一个<strong>构造函数</strong>，所以使用时需要实例化后才能使用其中具体方法和属性。Date 实例用来处理日期和时间</p><h2 id="使用Date实例化日期对象"><a href="#使用Date实例化日期对象" class="headerlink" title="使用Date实例化日期对象"></a><strong>使用Date实例化日期对象</strong></h2><ul><li>获取当前时间必须实例化</li><li>获取指定时间的日期对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Data() 日期对象，是一个构造函数，必须使用new来调用创建我们的日期对象</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(); <span class="comment">// 创建一个数组对象</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>(); <span class="comment">// 创建一个对象实例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.使用Data 如果没有参数，返回系统当前时间</span></span><br><span class="line"><span class="keyword">var</span> data = <span class="keyword">new</span> Data();</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.参数常用的写法，数字型 2022,06,11 或者是字符串型 &#x27;2022-06-11 00:00:00&#x27;</span></span><br><span class="line"><span class="keyword">var</span> data1 = <span class="keyword">new</span> Data(<span class="number">2022</span>,<span class="number">06</span>,<span class="number">11</span>);</span><br><span class="line"><span class="built_in">console</span>.log(data1); <span class="comment">//返回的是7月，不是6月</span></span><br><span class="line"><span class="keyword">var</span> data2 = <span class="keyword">new</span> Data(<span class="string">&#x27;2022-06-11 00:00:00&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(data2);</span><br></pre></td></tr></table></figure><h2 id="日期格式化"><a href="#日期格式化" class="headerlink" title="日期格式化"></a><strong>日期格式化</strong></h2><p>获取日期的指定部分，通过日期对象里面的属性和方法手动得到这种格式</p><ul><li>使用Date实例的方法和属性</li><li>getMonth()方法获取到的月份 + 1 = 当月</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206111942811.png"></p><p>格式化日期</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//日期格式化</span></span><br><span class="line"><span class="comment">// 格式化日期 年 月 日</span></span><br><span class="line">      <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">      <span class="built_in">console</span>.log(date.getFullYear()); <span class="comment">//返回当前日期的年 2022</span></span><br><span class="line">      <span class="built_in">console</span>.log(date.getMonth() + <span class="number">1</span>); <span class="comment">//月份 返回的月份小1个月，记得月份加1呦</span></span><br><span class="line">      <span class="built_in">console</span>.log(date.getDate()); <span class="comment">//返回的是 几号</span></span><br><span class="line">      <span class="built_in">console</span>.log(date.getDay); <span class="comment">//周一返回的是1 周六返回的是6 周日返回的是0</span></span><br><span class="line"><span class="comment">//我们写一个 2022年 6月 11日 星期六（当前日期）</span></span><br><span class="line">      <span class="keyword">var</span> year = date.getFullYear();</span><br><span class="line">      <span class="keyword">var</span> month = date.getMonth() + <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">var</span> dates = date.getDate();</span><br><span class="line">      <span class="keyword">var</span> arr = [<span class="string">&#x27;星期日&#x27;</span>,<span class="string">&#x27;星期一&#x27;</span>,<span class="string">&#x27;星期二&#x27;</span>,<span class="string">&#x27;星期三&#x27;</span>,<span class="string">&#x27;星期四&#x27;</span>,<span class="string">&#x27;星期五&#x27;</span>,<span class="string">&#x27;星期六&#x27;</span>]；</span><br><span class="line">      <span class="keyword">var</span> day = date.getDay();</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;今天是&quot;</span> + year + <span class="string">&quot;年&quot;</span> + month + <span class="string">&quot;月&quot;</span> + dates + <span class="string">&quot;日&quot;</span> + arr[day]);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//格式化日期 时分秒</span></span><br><span class="line">      <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">      <span class="built_in">console</span>.log(date.getHours()); <span class="comment">//时</span></span><br><span class="line">      <span class="built_in">console</span>.log(date.getMinutes()); <span class="comment">//分</span></span><br><span class="line">      <span class="built_in">console</span>.log(date.getSeconds()); <span class="comment">// 秒</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//封装一个函数返回当前的 时 分 秒 格式 08:08:08</span></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">getTimer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">        <span class="keyword">var</span> h = time.getHours();</span><br><span class="line">        <span class="keyword">var</span> h = h &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + h : h;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> m = time.getMinutes();</span><br><span class="line">        <span class="keyword">var</span> m = m &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + m : m;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> s = time.getSeconds();</span><br><span class="line">        <span class="keyword">var</span> s = s &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + s : s;</span><br><span class="line">        <span class="keyword">return</span> h + <span class="string">&quot;:&quot;</span> + h + <span class="string">&quot;:&quot;</span> + s;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(getTimer());</span><br></pre></td></tr></table></figure><h2 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h2><p><strong>获取Date日期总的毫秒数(时间戳)</strong><br>基于1970年1月1日(世界标准世界)起的毫秒数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实例化Date对象</span></span><br><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="comment">// 1. 通过 value() getTime()</span></span><br><span class="line"><span class="built_in">console</span>.log(now.valueOf());</span><br><span class="line"><span class="built_in">console</span>.log(now.getTime());</span><br><span class="line"><span class="comment">// 2. 简单写可以这么做 (最常用的)</span></span><br><span class="line"><span class="keyword">var</span> now = + <span class="keyword">new</span> <span class="built_in">Date</span>();   </span><br><span class="line"><span class="comment">// 3. HTML5中提供的方法，有兼容性问题</span></span><br><span class="line"><span class="keyword">var</span> now = <span class="built_in">Date</span>.now();</span><br></pre></td></tr></table></figure><h3 id="案例：倒计时效果"><a href="#案例：倒计时效果" class="headerlink" title="案例：倒计时效果"></a>案例：倒计时效果</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  倒计时案例</span></span><br><span class="line"><span class="comment">//  1. 核心算法：输入的时间减去现在的时间就是剩余的时间，即倒计时，但不能拿时分秒相减。</span></span><br><span class="line"><span class="comment">//  2.用时间戳来做，用户输入时间总的毫秒数减去现在时间的总的毫秒数，</span></span><br><span class="line"><span class="comment">//   得到的就是剩余时间的毫秒数</span></span><br><span class="line"><span class="comment">//  3.把剩余时间总的毫秒数转换为天、时、分、秒  (时间戳转换时分秒)</span></span><br><span class="line"><span class="comment">//    转换公式如下：</span></span><br><span class="line"><span class="comment">//    d = parseInt(总秒数/60/60/24) // 计算天数</span></span><br><span class="line"><span class="comment">//    h = parseInt(总秒数/60/60%24) // 计算小时</span></span><br><span class="line"><span class="comment">//    m = parseInt(总秒数/60%60);   // 计算分钟  </span></span><br><span class="line"><span class="comment">//    s = parseInt(总秒数%60);      // 计算当前秒数 </span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 倒计时案例 封装函数实现</span></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">countDown</span>(<span class="params">time</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> nowTime = +<span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="comment">// 返回的是当前时间总的毫秒数</span></span><br><span class="line">        <span class="keyword">var</span> inputTime = +<span class="keyword">new</span> <span class="built_in">Date</span>(time); <span class="comment">// 返回的是用户输入时间总的毫秒数</span></span><br><span class="line">        <span class="keyword">var</span> times = (inputTime - nowTime) / <span class="number">1000</span>; <span class="comment">// times是剩余时间总的秒数</span></span><br><span class="line">        <span class="keyword">var</span> d = <span class="built_in">parseInt</span>(times / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>); <span class="comment">// 天</span></span><br><span class="line">        d = d &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + d : d;</span><br><span class="line">        <span class="keyword">var</span> h = <span class="built_in">parseInt</span>((times / <span class="number">60</span> / <span class="number">60</span>) % <span class="number">24</span>); <span class="comment">//时</span></span><br><span class="line">        h = h &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + h : h;</span><br><span class="line">        <span class="keyword">var</span> m = <span class="built_in">parseInt</span>((times / <span class="number">60</span>) % <span class="number">60</span>); <span class="comment">// 分</span></span><br><span class="line">        m = m &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + m : m;</span><br><span class="line">        <span class="keyword">var</span> s = <span class="built_in">parseInt</span>(times % <span class="number">60</span>); <span class="comment">// 当前的秒</span></span><br><span class="line">        s = s &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + s : s;</span><br><span class="line">        <span class="keyword">return</span> d + <span class="string">&quot;天&quot;</span> + h + <span class="string">&quot;时&quot;</span> + m + <span class="string">&quot;分&quot;</span> + s + <span class="string">&quot;秒&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(countDown(<span class="string">&quot;2022-10-1 18:00:00&quot;</span>));</span><br><span class="line">      <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">      <span class="built_in">console</span>.log(date);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="数组对象"><a href="#数组对象" class="headerlink" title="数组对象"></a><strong>数组对象</strong></h1><h2 id="「创建数组的两种方式」"><a href="#「创建数组的两种方式」" class="headerlink" title="「创建数组的两种方式」"></a><strong>「创建数组的两种方式」</strong></h2><ul><li><strong>1. 字面量方式</strong><code>var arr = [1,&quot;test&quot;,true];</code></li><li><strong>2. 实例化数组对象 new Array()</strong><code>var arr = new Array();</code></li></ul><p><strong>注意：</strong></p><ol><li>上面代码中 arr 创建出的是一个空数组，如果需要使用构造函数Array创建非空数组，可以在创建数组时传入参数</li><li>如果只传入一个参数(数字)，则参数规定了数组的长度。</li><li>如果传入了多个参数，则参数称为数组的元素。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.利用数组字面量</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.利用new Array()</span></span><br><span class="line"><span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="built_in">Array</span>(); <span class="comment">// 创建了一个空数组</span></span><br><span class="line"><span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">2</span>); <span class="comment">// 这个2表示数组长度为2 里面有两个空的数组元素</span></span><br><span class="line"><span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">2</span>,<span class="number">3</span>); <span class="comment">// 等价于[2,3] 这样写表示 里面有两个数组元素 是2和1 </span></span><br><span class="line"><span class="built_in">console</span>.log(arr1);</span><br></pre></td></tr></table></figure><h2 id="「检测是否为数组」"><a href="#「检测是否为数组」" class="headerlink" title="「检测是否为数组」"></a><strong>「检测是否为数组」</strong></h2><ul><li><strong>1. instanceof 运算符</strong></li></ul><p>instanceof 可以判断一个对象是否是某个构造函数的实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">23</span>];</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(obj <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><ul><li><strong>2. Array.isArray()</strong></li></ul><p>Array.isArray()用于判断一个对象是否为数组，isArray() 是 HTML5 中提供的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">23</span>];</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(arr));   <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(obj));   <span class="comment">// false</span></span><br></pre></td></tr></table></figure><ul><li><strong>3. 注意 typeof用法</strong></li></ul><p>typeof 用于判断变量的类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">23</span>];</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="keyword">typeof</span> arr) <span class="comment">// object 对象arr是构造函数的实例因此是对象数据类型</span></span><br></pre></td></tr></table></figure><h2 id="「添加删除数组元素的方法」"><a href="#「添加删除数组元素的方法」" class="headerlink" title="「添加删除数组元素的方法」"></a><strong>「添加删除数组元素的方法」</strong></h2><ul><li>数组中有进行增加、删除元素的方法，部分方法如下表</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206121009271.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加删除素组元素的方法</span></span><br><span class="line"><span class="comment">// 1.push() 在数组的末尾添加一个或者多个数组元素，</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr.push(<span class="number">4</span>,<span class="string">&#x27;pink&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr.push(<span class="number">4</span>,<span class="string">&#x27;pink&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="comment">// (1)push可以给数组追加新的元素</span></span><br><span class="line"><span class="comment">// (2)push() 参数直接写数组元素就可以</span></span><br><span class="line"><span class="comment">// (3)push完毕后，返回的结果是 新数组的长度</span></span><br><span class="line"><span class="comment">// (4)原数组也会发生变化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.unshiift是可以给数组前面追加新元素</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.unshift(<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="comment">// 和push同理</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.pop() 可以删除数组里最后一个元素</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.pop());</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="comment">// (1)pop是可以删除数组最后一个元素，但一次只能删除一个元素</span></span><br><span class="line"><span class="comment">// (2)pop() 没有参数</span></span><br><span class="line"><span class="comment">// (3)pop完毕之后，返回的结果是删除的那个元素</span></span><br><span class="line"><span class="comment">// (4)原数组也会发生变化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.shift() 可以删除数组的第一个元素</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.shift());</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="comment">// 和pop同理</span></span><br></pre></td></tr></table></figure><h3 id="案例：筛选数组"><a href="#案例：筛选数组" class="headerlink" title="案例：筛选数组"></a>案例：筛选数组</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 有一个包含工资的数组[1500,1200,2000,2100,1800]，要求把超过2000的删除，剩余的放到新数组里</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1500</span>,<span class="number">1200</span>,<span class="number">2000</span>,<span class="number">2100</span>,<span class="number">1800</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &lt; <span class="number">2000</span>) &#123;</span><br><span class="line">        <span class="comment">// newArr[newArr.length] = arr[i];</span></span><br><span class="line">        newArr.push(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(newArr);</span><br></pre></td></tr></table></figure><h2 id="「数组排序」"><a href="#「数组排序」" class="headerlink" title="「数组排序」"></a><strong>「数组排序」</strong></h2><p>数组中有对数组本身排序的方法，部分方法如下表</p><table><thead><tr><th>方法名</th><th>说明</th><th>是否修改原数组</th></tr></thead><tbody><tr><td>reverse()</td><td>颠倒数组中元素顺序，无参数</td><td>会改变原来数组，返回新数组</td></tr><tr><td>sort()</td><td>对数组元素进行排序</td><td>会改变原来数组， 返回新数组</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组排序</span></span><br><span class="line"><span class="comment">// 1.翻转数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;pink&#x27;</span>,<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>];</span><br><span class="line">arr.reverse();</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.数组排序(冒泡排序)</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">13</span>,<span class="number">4</span>,<span class="number">77</span>,<span class="number">1</span>,<span class="number">77</span>];</span><br><span class="line">arr1.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// return a - b; // 升序的顺序排列</span></span><br><span class="line">    <span class="keyword">return</span> b - a; <span class="comment">// 降序的顺序排列</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arr1);</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li><strong>sort方法需要传入参数(函数)来设置升序、降序排序</strong></li><li>如果传入“function(a,b){ return a-b;}”，则为升序</li><li>如果传入“function(a,b){ return b-a;}”，则为降序</li></ul><h2 id="「数组索引方法」"><a href="#「数组索引方法」" class="headerlink" title="「数组索引方法」"></a><strong>「数组索引方法」</strong></h2><ul><li>数组中有获取数组指定元素索引值的方法，部分方法如下表</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206121049869.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回数组元素索引号的方法 indexOf(数组元素)  作用就是返回该数组元素的索引号 从前面开始查找</span></span><br><span class="line"><span class="comment">// 它只返回第一个满足条件的索引号</span></span><br><span class="line"><span class="comment">// 如果在数组里面找不到元素，则返回的结果是-1</span></span><br><span class="line"><span class="comment">//var arr = [&#x27;red&#x27;,&#x27;green&#x27;,&#x27;blue&#x27;,&#x27;pink&#x27;,&#x27;blue&#x27;];</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;pink&#x27;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="string">&#x27;blue&#x27;</span>)); <span class="comment">//-1</span></span><br><span class="line"><span class="comment">// 返回数组元素索引号的方法 lastindexOf(数组元素)  作用就是返回该数组元素的索引号 从后面开始查找</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>,<span class="string">&#x27;pink&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.lastindexOf(<span class="string">&#x27;blue&#x27;</span>)); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><h3 id="案例：数组去重"><a href="#案例：数组去重" class="headerlink" title="案例：数组去重"></a>案例：数组去重</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组去重 [&#x27;c&#x27;,&#x27;a&#x27;,&#x27;z&#x27;,&#x27;a&#x27;,&#x27;x&#x27;,&#x27;a&#x27;,&#x27;x&#x27;,&#x27;c&#x27;,&#x27;b&#x27;] 要求去除重复元素</span></span><br><span class="line"><span class="comment">// 1.目标：把旧数组里面不重复的元素取出来放进新数组，重复的元素只保留一个，放到新数组里去重</span></span><br><span class="line"><span class="comment">// 2.核心算法：遍历旧数组，然后拿旧数组元素查询新数组，如果该元素在新数组里没有出现过，我们就添加，否则不添加</span></span><br><span class="line"><span class="comment">// 3.如何知道该元素有没有存在？利用 新数组.indexOf(数组元素) 如果返回-1 ，说明数组里没有该元素</span></span><br><span class="line"><span class="comment">// 封装一个去重函数 unique &#x27;独一无二的&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newArr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (newArr.indexOf(arr[i]) === -<span class="number">1</span>) &#123;</span><br><span class="line">            newArr.push(arr[i]);     </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> demo = unique([<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;z&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;b&#x27;</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(demo);</span><br></pre></td></tr></table></figure><h2 id="「数组转换为字符串」"><a href="#「数组转换为字符串」" class="headerlink" title="「数组转换为字符串」"></a><strong>「数组转换为字符串」</strong></h2><ul><li>数组中有把数组转化为字符串的方法，部分方法如下表</li><li>注意：join方法如果不传入参数，则按照 “ , ”拼接元素</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206121108168.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.toString(</span></span><br><span class="line">)    </span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> str = arr.toString(); <span class="comment">// 将数组转换为字符串   </span></span><br><span class="line"><span class="built_in">console</span>.log(str); <span class="comment">// 1,2,3,4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.join(分隔符)</span></span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> str2 = arr2.join(<span class="string">&quot;|&quot;</span>);<span class="comment">//按照键入字符将数组转换为字符串    </span></span><br><span class="line"><span class="built_in">console</span>.log(str2); <span class="comment">// 1|2|3|4</span></span><br></pre></td></tr></table></figure><h2 id="「其他方法」"><a href="#「其他方法」" class="headerlink" title="「其他方法」"></a><strong>「其他方法」</strong></h2><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206121111243.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>];</span><br><span class="line"><span class="keyword">var</span> arr3 = arr.concat(arr2);</span><br><span class="line"><span class="built_in">console</span>.log(arr3); <span class="comment">// [1,2,3,4,5,6,7,8]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// slice(begin,end) 是一种左闭右开区间 [1,3)</span></span><br><span class="line"><span class="comment">// 从索引1出开始截取，到索引3之前</span></span><br><span class="line"><span class="keyword">var</span> arr4 = arr.slice(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr4); <span class="comment">// [2,3]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr5 = arr2.splice(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr5); <span class="comment">// [5,6,7]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">// [8]   splice()会影响原数组</span></span><br></pre></td></tr></table></figure><h1 id="字符串对象"><a href="#字符串对象" class="headerlink" title="字符串对象"></a><strong>字符串对象</strong></h1><h2 id="「基本包装类型」"><a href="#「基本包装类型」" class="headerlink" title="「基本包装类型」"></a><strong>「基本包装类型」</strong></h2><p>为了方便操作基本数据类型，JavaScript 还提供了三个特殊的引用类型：String、Number和 Boolean。<br>  <code>基本包装类型就是把简单数据类型包装成为复杂数据类型</code>，这样基本数据类型就有了属性和方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面代码有什么问题？</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;andy&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.length); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><p>  按道理基本数据类型是没有属性和方法的，而对象才有属性和方法，但上面代码却可以执行，这是因为 js 会把基本数据类型包装为复杂数据类型，其执行过程如下 ：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 生成临时变量，把简单类型包装为复杂数据类型</span></span><br><span class="line"><span class="keyword">var</span> temp = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&#x27;andy&#x27;</span>);</span><br><span class="line"><span class="comment">// 2. 赋值给我们声明的字符变量</span></span><br><span class="line">str = temp;</span><br><span class="line"><span class="comment">// 3. 销毁临时变量</span></span><br><span class="line">temp = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><h2 id="「字符串的不可变」"><a href="#「字符串的不可变」" class="headerlink" title="「字符串的不可变」"></a><strong>「字符串的不可变」</strong></h2><ul><li>指的是里面的值不可变，虽然看上去可以改变内容，但其实是地址变了，内存中新开辟了一个内存空间。</li><li>当重新给字符串变量赋值的时候，变量之前保存的字符串不会被修改，依然在内存中重新给字符串赋值，会重新在内存中开辟空间，这个特点就是字符串的不可变。</li><li>由于字符串的不可变，在<strong>「大量拼接字符串」</strong>的时候会有效率问题</li></ul><h2 id="「根据字符返回位置」"><a href="#「根据字符返回位置」" class="headerlink" title="「根据字符返回位置」"></a><strong>「根据字符返回位置」</strong></h2><p>字符串通过基本包装类型可以调用部分方法来操作字符串，以下是返回指定字符的位置的方法：</p><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206121130186.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;anndy&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">&quot;d&quot;</span>)); <span class="comment">// 3</span></span><br><span class="line"><span class="comment">//指定从索引号为4的地方开始查找字符&quot;d&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">&quot;d&quot;</span>, <span class="number">4</span>)); <span class="comment">// -1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.lastIndexOf(<span class="string">&quot;n&quot;</span>)); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h3 id="案例：查找字符串”abcoefoxyozzopp”中所有o出现的位置以及次数"><a href="#案例：查找字符串”abcoefoxyozzopp”中所有o出现的位置以及次数" class="headerlink" title="案例：查找字符串”abcoefoxyozzopp”中所有o出现的位置以及次数"></a>案例：查找字符串”abcoefoxyozzopp”中所有o出现的位置以及次数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//核心算法：先查找第一个o出现的位置</span></span><br><span class="line"><span class="comment">//然后 只要indexOf 返回的结果不是 -1 就继续往后查找</span></span><br><span class="line"><span class="comment">//因为indexOf 只能查找到第一个，所以后面的查找，利用第二个参数，当前索引加1，从而继续查找</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;oabcoefoxyozzopp&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> index = str.indexOf(<span class="string">&quot;o&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (index !== -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(index);</span><br><span class="line">    num++;</span><br><span class="line">    index = str.indexOf(<span class="string">&quot;o&quot;</span>, index + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;o出现的次数是&#x27;</span> + num);</span><br></pre></td></tr></table></figure><h2 id="「根据位置返回字符」"><a href="#「根据位置返回字符」" class="headerlink" title="「根据位置返回字符」"></a><strong>「根据位置返回字符」</strong></h2><p>字符串通过基本包装类型可以调用部分方法来操作字符串，以下是根据位置返回指定位置上的字符：</p><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206121136083.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据位置返回字符</span></span><br><span class="line"><span class="comment">// 1. charAt(index) 根据位置返回字符</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;andy&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.charAt(<span class="number">3</span>)); <span class="comment">// y</span></span><br><span class="line"><span class="comment">// 遍历所有的字符</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(str.charAt(i));</span><br><span class="line">&#125; <span class="comment">// a n d y</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. charCodeAt(index)  </span></span><br><span class="line"><span class="comment">//返回相应索引号的字符ASCII值 目的： 判断用户按下了那个键 </span></span><br><span class="line"><span class="built_in">console</span>.log(str.charCodeAt(<span class="number">0</span>)); <span class="comment">// 97</span></span><br><span class="line"><span class="comment">// 3. str[index] H5 新增的</span></span><br><span class="line"><span class="built_in">console</span>.log(str[<span class="number">0</span>]); <span class="comment">// a</span></span><br></pre></td></tr></table></figure><h3 id="案例：判断一个字符串-‘abcoefoxyozzopp’-中出现次数最多的字符，并统计其次数"><a href="#案例：判断一个字符串-‘abcoefoxyozzopp’-中出现次数最多的字符，并统计其次数" class="headerlink" title="案例：判断一个字符串 ‘abcoefoxyozzopp’ 中出现次数最多的字符，并统计其次数"></a>案例：判断一个字符串 ‘abcoefoxyozzopp’ 中出现次数最多的字符，并统计其次数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//核心算法：利用 charAt(） 遍历这个字符串</span></span><br><span class="line"><span class="comment">//把每个字符都存储给对象， 如果对象没有该属性，就为1，如果存在了就 +1</span></span><br><span class="line"><span class="comment">//遍历对象，得到最大值和该字符 注意：在遍历的过程中，把字符串中的每个字符作为对象的属性存储在对象中，对应的属性值是该字符出现的次数     </span></span><br><span class="line"> <span class="keyword">var</span> str = <span class="string">&quot;abcoefoxyozzopp&quot;</span>;</span><br><span class="line">      <span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> chars = str.charAt(i); <span class="comment">// chars 是 字符串的每一个字符</span></span><br><span class="line">        <span class="keyword">if</span> (o[chars]) &#123;</span><br><span class="line">          <span class="comment">// o[chars] 得到的是属性值</span></span><br><span class="line">          o[chars]++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          o[chars] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(o);</span><br><span class="line">      <span class="comment">// 2. 遍历对象</span></span><br><span class="line">      <span class="keyword">var</span> max = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">var</span> ch = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> o) &#123;</span><br><span class="line">        <span class="comment">// k 得到是 属性名</span></span><br><span class="line">        <span class="comment">// o[k] 得到的是属性值</span></span><br><span class="line">        <span class="keyword">if</span> (o[k] &gt; max) &#123;</span><br><span class="line">          max = o[k];</span><br><span class="line">          ch = k;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(max);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;最多的字符是&quot;</span> + ch);</span><br></pre></td></tr></table></figure><h2 id="「字符串操作方法」"><a href="#「字符串操作方法」" class="headerlink" title="「字符串操作方法」"></a><strong>「字符串操作方法」</strong></h2><p>字符串通过基本包装类型可以调用部分方法来操作字符串，以下是部分操作方法：</p><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206122119052.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串操作方法</span></span><br><span class="line"><span class="comment">// 1. concat(&#x27;字符串1&#x27;,&#x27;字符串2&#x27;....)</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;andy&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.concat(<span class="string">&#x27;red&#x27;</span>)); <span class="comment">// andyred</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. substr(&#x27;截取的起始位置&#x27;, &#x27;截取几个字符&#x27;);</span></span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">&#x27;改革春风吹满地&#x27;</span>;</span><br><span class="line"><span class="comment">// 第一个2 是索引号的2 从第几个开始  第二个2 是取几个字符</span></span><br><span class="line"><span class="built_in">console</span>.log(str1.substr(<span class="number">2</span>, <span class="number">2</span>)); <span class="comment">// 春风</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 替换字符 replace(&#x27;被替换的字符&#x27;, &#x27;替换为的字符&#x27;)  它只会替换第一个字符</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;andyandy&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.replace(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>)); <span class="comment">// bndyandy</span></span><br><span class="line"><span class="comment">// 有一个字符串 &#x27;abcoefoxyozzopp&#x27;  要求把里面所有的 o 替换为 *</span></span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">&quot;abcoefoxyozzopp&quot;</span>;</span><br><span class="line"><span class="keyword">while</span> (str1.indexOf(<span class="string">&quot;o&quot;</span>) !== -<span class="number">1</span>) &#123;</span><br><span class="line">  str1 = str1.replace(<span class="string">&quot;o&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(str1); <span class="comment">// abc*ef*xy*zz*pp</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 字符转换为数组 split(&#x27;分隔符&#x27;)    </span></span><br><span class="line"><span class="comment">// 前面我们学过 join 把数组转换为字符串</span></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">&quot;red, pink, blue&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str2.split(<span class="string">&quot;,&quot;</span>)); <span class="comment">//[red,pink,blue]</span></span><br><span class="line"><span class="keyword">var</span> str3 = <span class="string">&quot;red&amp;pink&amp;blue&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str3.split(<span class="string">&quot;&amp;&quot;</span>)); <span class="comment">// [red,pink,blue]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小白的前端之路 </tag>
            
            <tag> JavaScript基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单数据类型和复杂数据类型</title>
      <link href="/%E5%89%8D%E7%AB%AF/JS%E7%AE%80%E5%8D%95%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/%E5%89%8D%E7%AB%AF/JS%E7%AE%80%E5%8D%95%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="简单数据类型和复杂数据类型"><a href="#简单数据类型和复杂数据类型" class="headerlink" title="简单数据类型和复杂数据类型"></a>简单数据类型和复杂数据类型</h1><p><strong>「简单类型（基本数据类型、值类型）」</strong>：在存储时变量中存储的是值本身，包括string ，number，boolean，undefined，null</p><p><strong>「复杂数据类型（引用类型）」</strong>：在存储时变量中存储的仅仅是地址（引用），通过 new 关键字创建的对象（系统对象、自定义对象），如 Object、Array、Date等；</p><h2 id="「堆栈」"><a href="#「堆栈」" class="headerlink" title="「堆栈」"></a><strong>「堆栈」</strong></h2><p><strong>堆栈空间分配区别：</strong></p><ul><li><p>1、栈（操作系统）：由操作系统自动分配释放存放函数的参数值、局部变量的值等。其操作方式类似于数据结构中的栈；简单数据类型存放到栈里面</p></li><li><p>2、堆（操作系统）：存储复杂类型(对象)，一般由程序员分配释放，若程序员不释放，由垃圾回收机制回收。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206122149383.png"></p><p><strong>简单数据类型的存储方式</strong></p><ul><li>值类型变量的数据直接存放在变量（栈空间）中</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206122150177.png"></p><p><strong>复杂数据类型的存储方式</strong></p><ul><li>引用类型变量（栈空间）里存放的是地址，真正的对象实例存放在堆空间中</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206122150572.png"></p><h2 id="「简单类型传参」"><a href="#「简单类型传参」" class="headerlink" title="「简单类型传参」"></a><strong>「简单类型传参」</strong></h2><p>  函数的形参也可以看做是一个变量，当我们把一个值类型变量作为参数传给函数的形参时，其实是把变量在栈空间里的值复制了一份给形参，那么在方法内部对形参做任何修改，都不会影响到的外部变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    a++;</span><br><span class="line">    <span class="built_in">console</span>.log(a); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line">fn(x);</span><br><span class="line"><span class="built_in">console</span>.log(x)；</span><br><span class="line"><span class="comment">// 11</span></span><br><span class="line"><span class="comment">// 10</span></span><br></pre></td></tr></table></figure><h2 id="「复杂数据类型传参」"><a href="#「复杂数据类型传参」" class="headerlink" title="「复杂数据类型传参」"></a><strong>「复杂数据类型传参」</strong></h2><p>  函数的形参也可以看做是一个变量，当我们把引用类型变量传给形参时，其实是把变量在栈空间里保存的堆地址复制给了形参，形参和实参其实保存的是同一个堆地址，所以操作的是同一个对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">x</span>) </span>&#123; <span class="comment">// x = p</span></span><br><span class="line">      <span class="built_in">console</span>.log(x.name); <span class="comment">// 2. 这个输出什么 ?    </span></span><br><span class="line">      x.name = <span class="string">&quot;张学友&quot;</span>;</span><br><span class="line">      <span class="built_in">console</span>.log(x.name); <span class="comment">// 3. 这个输出什么 ?    </span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">&quot;刘德华&quot;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(p.name);    <span class="comment">// 1. 这个输出什么 ?   </span></span><br><span class="line">  f1(p);</span><br><span class="line">  <span class="built_in">console</span>.log(p.name);    <span class="comment">// 4. 这个输出什么 ?  </span></span><br><span class="line"><span class="comment">//刘德华</span></span><br><span class="line"><span class="comment">//刘德华</span></span><br><span class="line"><span class="comment">//张学友</span></span><br><span class="line"><span class="comment">//张学友</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小白的前端之路 </tag>
            
            <tag> JavaScript基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript对象</title>
      <link href="/%E5%89%8D%E7%AB%AF/Javascript%E5%AF%B9%E8%B1%A1/"/>
      <url>/%E5%89%8D%E7%AB%AF/Javascript%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="对象的概念"><a href="#对象的概念" class="headerlink" title="对象的概念"></a>对象的概念</h1><h2 id="「对象」"><a href="#「对象」" class="headerlink" title="「对象」"></a><strong>「对象」</strong></h2><p>在JavaScript中，对象是一组无序的相关属性和方法的集合，所有的事物都是对象，例如字符串、数值、数组、函数等。</p><p>对象是由属性和方法组成的</p><ol><li>属性：事物的特征，在对象中用属性来表示（常用名词）</li><li>方法：事物的行为，在对象中常用方法来表示（常用动词）</li></ol><h2 id="「为什么需要对象」"><a href="#「为什么需要对象」" class="headerlink" title="「为什么需要对象」"></a><strong>「为什么需要对象」</strong></h2><ul><li>保存一个值时，可以使用变量，保存多个值（一组值）时，可以使用数组，如果保存一个的完整信息呢？</li><li>为了更好地存储一组数据，对象应用而生；对象中为每项数据设置了属性名称，可以访问数据更语义化，数据结构清晰，表意明显，方便开发者使用。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>:<span class="string">&quot;fan&quot;</span>,</span><br><span class="line">  <span class="string">&quot;sex&quot;</span>:<span class="string">&quot;male&quot;</span>,</span><br><span class="line">  <span class="string">&quot;age&quot;</span>:<span class="number">18</span>,</span><br><span class="line">  <span class="string">&quot;height&quot;</span>:<span class="number">155</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="创建对象的三种方式"><a href="#创建对象的三种方式" class="headerlink" title="创建对象的三种方式"></a>创建对象的三种方式</h1><ul><li>利用字面量创建对象</li><li>利用 new object 创建对象</li><li>利用构造函数创建对象</li></ul><h2 id="「1-利用字面量创建对象」"><a href="#「1-利用字面量创建对象」" class="headerlink" title="「1. 利用字面量创建对象」"></a><strong>「1. 利用字面量创建对象」</strong></h2><p>使用对象字面量创建对象：</p><ul><li><p>就是花括号 { } 里面包含了表达这个具体事物（对象）的属性和方法</p></li><li><p>{ } 里面采取键值对的形式表示</p><p>-<code>键</code>：相当于属性名<br>-<code>值</code>：相当于属性值，可以是任意类型的值（数字类型、字符串类型、布尔类型，函数类型等）</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// star 就是创建的对象</span></span><br><span class="line">  <span class="keyword">var</span> star = &#123;</span><br><span class="line">    <span class="attr">name</span> : <span class="string">&#x27;pink&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span> : <span class="number">18</span>,</span><br><span class="line">    <span class="attr">sex</span> : <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">    <span class="attr">sayHi</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      alert(<span class="string">&#x27;大家好啊&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="comment">// 方法冒号后面跟的是一个匿名函数</span></span><br></pre></td></tr></table></figure><h3 id="对象的的两个概念"><a href="#对象的的两个概念" class="headerlink" title="对象的的两个概念"></a>对象的的两个概念</h3><ol><li>对象的属性：对象中<code>存储具体数据</code>的“键值对”中的‘键’称为对象的属性，即对象中存储具体数据的项。</li><li>对象的方法：对象中<code>存储函数</code>的“键值对”中的“键”称为对象的方法，即对象中存储函数的项。（这里方法是名词）</li></ol><h3 id="对象的使用"><a href="#对象的使用" class="headerlink" title="对象的使用"></a>对象的使用</h3><ul><li>访问对象的属性（两种方式）：</li></ul><ol><li>对象里面的属性调用：<code>对象.属性名</code>；</li><li>对象里面属性的另一种调用方式：<code>对象[&#39;属性名&#39;]</code>,注意方括号里面的属性必须加上引号。</li></ol><ul><li>调用对象的方法:   <code>对象.方法名();</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用属性</span></span><br><span class="line"><span class="built_in">console</span>.log(star.name)     <span class="comment">// 调用名字属性</span></span><br><span class="line"><span class="built_in">console</span>.log(star[<span class="string">&#x27;name&#x27;</span>])  <span class="comment">// 调用名字属性</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// 调用方法</span></span><br><span class="line">star.sayHi(); <span class="comment">// 调用对象方法</span></span><br></pre></td></tr></table></figure><h3 id="变量、属性、函数、方法总结"><a href="#变量、属性、函数、方法总结" class="headerlink" title="变量、属性、函数、方法总结"></a>变量、属性、函数、方法总结</h3><p><code>①变量</code>：单独声明赋值，单独存在<br><code>②属性</code>:  对象里面的变量称为属性，不需要声明，用来描述该对象的特征。<br><code>③方法</code>：方法是对象的一部分，函数不是对象的一部分，函数是单独封装操作的容器。对象里面的函数称为方法，方法不需要声明，使用” 对象.方法名() “的方式就可以调用，方法用来描述该对象的行为和功能。<br><code>④函数</code>:  单独存在的，通过” 函数名() “的方式就可以调用。</p><h2 id="「2-利用new-Object创建对象」"><a href="#「2-利用new-Object创建对象」" class="headerlink" title="「2. 利用new Object创建对象」"></a><strong>「2. 利用new Object创建对象」</strong></h2><ul><li>创建空对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过内置构造函数Object创建对象，此时andy变量已经保存了创建出来的空对象</span></span><br><span class="line"><span class="keyword">var</span> andy = <span class="keyword">new</span> <span class="built_in">Object</span>();  </span><br></pre></td></tr></table></figure><ul><li>给空对象添加属性和方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过对象操作属性和方法的方式，来为对象增加属性和方法</span></span><br><span class="line"><span class="comment">// (1)我们利用等号 = 赋值的方法，添加对象的属性和方法</span></span><br><span class="line"><span class="comment">// (2)每个属性和方法之间用分号结束</span></span><br><span class="line">andy.name = <span class="string">&#x27;pink&#x27;</span>;</span><br><span class="line">andy.age = <span class="number">18</span>; <span class="comment">// andy.age = 19修改对象属性</span></span><br><span class="line">andy.sex = <span class="string">&#x27;男&#x27;</span>; <span class="comment">// andy.phoneNum = 110 添加属性</span></span><br><span class="line">andy.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">&#x27;大家好&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">obj.sayHi();<span class="comment">// 调用对象的方法 </span></span><br><span class="line"><span class="comment">//第二种写法 obj[&#x27;sayHi&#x27;]();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Object()第一个字母大写；</span></span><br><span class="line"><span class="comment">//new Object() 需要new关键字，使用的格式:对象.属性 = 值</span></span><br></pre></td></tr></table></figure><h3 id="案例：工厂函数创建对象-这个把创建好的对象返回给函数调用处"><a href="#案例：工厂函数创建对象-这个把创建好的对象返回给函数调用处" class="headerlink" title="案例：工厂函数创建对象 这个把创建好的对象返回给函数调用处"></a>案例：工厂函数创建对象 这个把创建好的对象返回给函数调用处</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 工厂函数创建对象 这个把创建好的对象返回给函数调用处</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//new Object创建对象</span></span><br><span class="line">  <span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">  person.name = name;</span><br><span class="line">  person.age = age;</span><br><span class="line">  person.job = job;</span><br><span class="line">  person.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Hello,everyBody&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="comment">//此函数返回的是一个对象</span></span><br><span class="line">  <span class="keyword">return</span> person;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">var</span> p1 = createPerson(<span class="string">&#x27;张三&#x27;</span>, <span class="number">22</span>, <span class="string">&#x27;actor&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="「3-利用构造函数创建对象」"><a href="#「3-利用构造函数创建对象」" class="headerlink" title="「3. 利用构造函数创建对象」"></a><strong>「3. 利用构造函数创建对象」</strong></h2><p><code>构造函数</code>是一种特殊的函数，主要用来初始化对象，即为对象成员变量赋初始值,它总与new运算符一起使用，我们可以把对象中一些公共的属性和方法抽出来，然后封装到这个函数里面。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用构造函数创建对象</span></span><br><span class="line"><span class="comment">// 构造函数的语法格式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> 构造函数名(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.属性 = 值;</span><br><span class="line">    <span class="built_in">this</span>.属性 = 值;</span><br><span class="line">    <span class="built_in">this</span>.方法 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> 构造函数名();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数的封装格式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> 构造函数名(<span class="params">形参<span class="number">1</span>，形参<span class="number">2</span>，形参<span class="number">3.</span>..</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.属性名<span class="number">1</span> = 参数<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">this</span>.属性名<span class="number">2</span> = 参数<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">this</span>.属性名<span class="number">3</span> = 参数<span class="number">3</span>;</span><br><span class="line">    <span class="built_in">this</span>.方法名 = 函数体;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">// 构造函数的调用格式</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> 构造函数名(实参<span class="number">1</span>，实参<span class="number">2</span>，实参<span class="number">3</span>); <span class="comment">// 以上代码中，obj即接收到构造函数创建出来的对象。</span></span><br><span class="line">注意事项：</span><br><span class="line">    <span class="number">1.</span>构造函数约定首字母大写</span><br><span class="line">    <span class="number">2.</span>函数内的属性和方法前面需要添加<span class="built_in">this</span>，表示当前对象的属性和方法</span><br><span class="line">    <span class="number">3.</span>构造函数中不需要retrun返回结果</span><br><span class="line">    <span class="number">4.</span>但我们创建对象的时候，必须用<span class="keyword">new</span> 来调用构造函数</span><br><span class="line">    </span><br><span class="line">    <span class="number">1.</span>其他：构造函数如Stars(),抽取了对象的公共部分，封装到了函数里面，它</span><br><span class="line">     泛指某一大类(<span class="class"><span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    2.创建对象，如<span class="title">new</span> <span class="title">Stars</span>()</span>;特指某一个，利用<span class="keyword">new</span>关键字创建对象的过程</span><br><span class="line">     我们也称为对象实例化</span><br><span class="line">   </span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我们需要创建四大天王的对象 相同的属性：名字，年龄，性别，相同的方法：唱歌</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params">uname, age, sex</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = uname;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">    <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    <span class="built_in">this</span>.sing = <span class="function"><span class="keyword">function</span>(<span class="params">sang</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(sang);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> Star(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;男&#x27;</span>); <span class="comment">// 调用函数返回的是一个对象</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> ldh);</span><br><span class="line"><span class="built_in">console</span>.log(ldh.name);</span><br><span class="line"><span class="built_in">console</span>.log(ldh[<span class="string">&#x27;sex&#x27;</span>]);</span><br><span class="line">ldh.sang(<span class="string">&#x27;冰雨&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> zcy = <span class="keyword">new</span> Star(<span class="string">&#x27;张学友&#x27;</span>, <span class="number">19</span>, <span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(zxy.name);</span><br><span class="line"><span class="built_in">console</span>.log(zxy.age);</span><br><span class="line">zxy.sing(<span class="string">&#x27;春兰&#x27;</span>)；</span><br></pre></td></tr></table></figure><h3 id="构造函数和对象"><a href="#构造函数和对象" class="headerlink" title="构造函数和对象"></a>构造函数和对象</h3><ul><li>构造函数：如Stars()，抽象了对象的公共部分，封装到了一个函数里面，它泛指某一大类(class)</li><li>创建对象：如new Stars() ，特指某一个，通过new关键字创建对象的过程我们也称为对象实例化</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206111550328.jpg"></p><h3 id="new关键字的作用-面试题"><a href="#new关键字的作用-面试题" class="headerlink" title="new关键字的作用(面试题)"></a><strong>new关键字的作用(面试题)</strong></h3><ol><li>在构造函数代码开始执行之前，创建一个空对象；</li><li>修改this的指向，把this指向创建出来的空对象；</li><li>执行构造函数内的代码，给这个新对象添加属性和方法</li><li>在函数完成之后，返回这个创建出来的新对象(所以构造函数里面不需要return)</li></ol><h1 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// for...in 语句用于对数组或者对象的属性进行循环操作。</span></span><br><span class="line"><span class="comment">// 其语法如下：</span></span><br><span class="line">  <span class="keyword">for</span> (变量 <span class="keyword">in</span> 对象名字) &#123;</span><br><span class="line">      <span class="comment">// 在此执行代码</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//语法中的变量是自定义的，它需要符合命名规范，通常我们会将这个变量写为 k 或者 key。</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(k);      <span class="comment">// 这里的 k 是属性名</span></span><br><span class="line">    <span class="built_in">console</span>.log(obj[k]); <span class="comment">// 这里的 obj[k] 是属性值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小白的前端之路 </tag>
            
            <tag> JavaScript基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript函数</title>
      <link href="/%E5%89%8D%E7%AB%AF/Javascript%E5%87%BD%E6%95%B0/"/>
      <url>/%E5%89%8D%E7%AB%AF/Javascript%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="「1-函数的概念」"><a href="#「1-函数的概念」" class="headerlink" title="「1.函数的概念」"></a><strong>「1.函数的概念」</strong></h2><p>封装了一段可被重复调用执行的代码块，通过函数可以实现大量代码的重复使用。函数是一种数据类型。</p><h2 id="「2-函数的使用」"><a href="#「2-函数的使用」" class="headerlink" title="「2.函数的使用」"></a><strong>「2.函数的使用」</strong></h2><p>函数的使用分为两步：<strong>声明函数</strong>和<strong>调用函数</strong></p><ul><li>声明函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 通过function关键字定义函数 -- 命名函数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> 函数名(<span class="params"></span>) </span>&#123;</span><br><span class="line">    函数体代码</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 1.1 function 是声明函数的关键字，必须小写</span></span><br><span class="line">  <span class="comment">// 1.2 函数名 命名为动词形式 例: getSum</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// 2. 通过函数表达式定义函数 ---匿名函数</span></span><br><span class="line">  <span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">  <span class="comment">// 2.1 fn是变量名，不是函数名</span></span><br><span class="line">  <span class="comment">// 2.2 fn是变量，只不过变量存储的是函数</span></span><br><span class="line">  <span class="comment">// 2.3 函数表达式创建的函数可以通过 变量名() 来调用</span></span><br><span class="line">  <span class="comment">// 2.4 函数表达式也可以定义形参和调用传入实参。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匿名函数使用的有第二种方式- -匿名函数自调用</span></span><br><span class="line">( <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="number">123</span>);</span><br><span class="line">&#125;)</span><br><span class="line">();</span><br></pre></td></tr></table></figure><ul><li>调用函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2.调用函数</span></span><br><span class="line">  函数名(); </span><br><span class="line">  <span class="comment">// 通过调用函数名来执行函数体代码</span></span><br><span class="line">  <span class="comment">// 调用时不要忘记添加小括号</span></span><br><span class="line">  <span class="comment">// 函数不调用，自己不执行</span></span><br></pre></td></tr></table></figure><h3 id="案例：函数封装求1-100和"><a href="#案例：函数封装求1-100和" class="headerlink" title="案例：函数封装求1-100和"></a>案例：函数封装求1-100和</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数计算1-100的和</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">        sum += i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(sum);</span><br><span class="line">&#125; <span class="comment">//声明</span></span><br><span class="line">getSum(); <span class="comment">//调用</span></span><br></pre></td></tr></table></figure><h2 id="「3-函数的参数」"><a href="#「3-函数的参数」" class="headerlink" title="「3.函数的参数」"></a><strong>「3.函数的参数」</strong></h2><ul><li><p>形式参数：函数定义时，传递的参数（实参值传递给形参，不用声明的变量）</p></li><li><p>实际参数：函数调用时，传递的参数</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 带参数的函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params">形参<span class="number">1</span>,形参<span class="number">2</span>,形参<span class="number">3.</span>..</span>) </span>&#123;</span><br><span class="line">    函数体;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 带参数的函数调用</span></span><br><span class="line">函数名(实参<span class="number">1</span>,实参<span class="number">2</span>,实参<span class="number">3.</span>..);</span><br></pre></td></tr></table></figure><p><strong>函数形参和实参数量不匹配时</strong></p><table><thead><tr><th>参数个数</th><th>说明</th></tr></thead><tbody><tr><td>实参 = 形参</td><td>输出正确结果</td></tr><tr><td>实参 &gt; 形参</td><td>只取到形参的个数</td></tr><tr><td>实参 &lt; 形参</td><td>多的形参定义为 undefined，结果为 NaN</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// js中形参的默认值是undefined。</span></span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line"><span class="keyword">var</span> n = getSum(<span class="number">1</span>, <span class="number">2</span>);<span class="comment">// n = NaN</span></span><br><span class="line"><span class="keyword">var</span> n = getSum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>); <span class="comment">//1 + 2 +3 = 6</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="「4-函数的返回值」"><a href="#「4-函数的返回值」" class="headerlink" title="「4.函数的返回值」"></a><strong>「4.函数的返回值」</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.函数是做某件事或者实现某种功能</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cook</span>(<span class="params">aru</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(aru);</span><br><span class="line">&#125;</span><br><span class="line">cook(<span class="string">&#x27;大肘子&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.函数的返回值格式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> 需要返回的结果;</span><br><span class="line">&#125;</span><br><span class="line">函数名();</span><br><span class="line"><span class="comment">// (1)我们函数只是实现某种功能，最终的结果需要返回给函数的调用者 函数名() 通过return实现</span></span><br><span class="line"><span class="comment">// (2)只要函数遇到return 就把后面的结果返回给函数的调用者 函数名() = return返回的结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.代码演示</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getResult</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">666</span>;</span><br><span class="line">&#125;</span><br><span class="line">getResult(); <span class="comment">// getResult() = 666</span></span><br><span class="line"><span class="built_in">console</span>.log(getResult());</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cook</span>(<span class="params">aru</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> aru;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(cook(<span class="string">&#x27;大肘子&#x27;</span>))；</span><br></pre></td></tr></table></figure><h3 id="案例：求两个数最大值"><a href="#案例：求两个数最大值" class="headerlink" title="案例：求两个数最大值"></a>案例：求两个数最大值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用函数，求两个数最大值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMax</span>(<span class="params">num1,num2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(num1 &gt; num2) &#123;</span><br><span class="line">        <span class="keyword">return</span> num1;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// return num1 &gt; num2 ? num1 : num2;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getMax(<span class="number">1</span>,<span class="number">3</span>));</span><br></pre></td></tr></table></figure><h3 id="案例：求数组中最大值"><a href="#案例：求数组中最大值" class="headerlink" title="案例：求数组中最大值"></a>案例：求数组中最大值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用函数求数组[&#x27;5&#x27;,&#x27;2&#x27;,&#x27;99&#x27;,&#x27;101&#x27;,&#x27;67&#x27;,&#x27;77&#x27;] 中的最大值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getArrMax</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> max = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i] &gt; max) &#123;</span><br><span class="line">            max = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line">getArrMax([<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;99&#x27;</span>,<span class="string">&#x27;101&#x27;</span>,<span class="string">&#x27;67&#x27;</span>,<span class="string">&#x27;77&#x27;</span>]); <span class="comment">//实参是一个数组送过去</span></span><br><span class="line"><span class="comment">// 在实际开发中，我们经常用一个变量来接收函数的返回结果</span></span><br><span class="line"><span class="keyword">var</span> re = getArrMax([<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;99&#x27;</span>,<span class="string">&#x27;101&#x27;</span>,<span class="string">&#x27;67&#x27;</span>,<span class="string">&#x27;77&#x27;</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(re);</span><br></pre></td></tr></table></figure><h3 id="函数返回值注意事项"><a href="#函数返回值注意事项" class="headerlink" title="函数返回值注意事项"></a><strong>函数返回值注意事项</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.return终止函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params">num1,num2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2; <span class="comment">// return后面的代码不会被执行</span></span><br><span class="line">    alert(<span class="string">&#x27;我是不会被执行的&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getSum(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.return只能返回一个值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">num1,num2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num1,num2; <span class="comment">// 返回的结果是最后一个</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fn(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.求任意两数加减乘除的结果</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gerResult</span>(<span class="params">num1,num2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [num1+num2, num1-num2,num1*num2, num1/num2];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> re = getResult(<span class="number">1</span>,<span class="number">2</span>); <span class="comment">// 返回的是一个数组</span></span><br><span class="line"><span class="built_in">console</span>.log(re);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.函数没有return，返回undefined</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fun()); <span class="comment">// 函数返回的结果是undefined</span></span><br></pre></td></tr></table></figure><h3 id="break-continue-return的区别"><a href="#break-continue-return的区别" class="headerlink" title="break,continue,return的区别"></a>break,continue,return的区别</h3><ul><li>break: 结束当前的循环体 (如for、while)</li><li>continue: 跳出本次循环，继续执行下次循环</li><li>return: 不仅可以退出(函数体内)循环，还能够返回return语句中的值，同时还可以结束当前的函数体内的代码</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//避免踩坑 return只能结束函数体内的代码</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">breakDown</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i == <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  breakDown();</span><br><span class="line">  </span><br><span class="line"><span class="comment">//避免踩坑2 函数如果有return 则返回的是 return 后面的值；</span></span><br><span class="line"><span class="comment">// return d,a,b; 返回的是b的值</span></span><br><span class="line"><span class="comment">//如果函数没有 return语句，则返回undefined</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="「5-arguments的使用」"><a href="#「5-arguments的使用」" class="headerlink" title="「5.arguments的使用」"></a><strong>「5.arguments的使用」</strong></h2><p>  当不确定有多少个参数传递的时候，可以用 arguments 来获取。JS中，arguments实际上它是当前函数的一个内置对象。所有函数都内   置了一个 arguments 对象，arguments 对象中存储了传递的所有实参。arguments展示形式是一个伪数组，因此可以进行遍历。</p><p>伪数组具有以下特点：</p><ol><li>具有length属性</li><li>按索引方式存储数据</li><li>不具有数组的push，pop等方法</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// arguments的使用 只有函数才有arguments对象，而且每个函数都内置arguments</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//arguments 里面存储了所有传递过来的实参</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);<span class="comment">// [1,2,3...]</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">1</span>]); <span class="comment">// 2</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.length); <span class="comment">// 3</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//我们可以按照数组的方式 遍历argument  </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="built_in">arguments</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  fn(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 伪数组并不是真正意义上的数组</span></span><br></pre></td></tr></table></figure><h3 id="案例：利用函数求最大值"><a href="#案例：利用函数求最大值" class="headerlink" title="案例：利用函数求最大值"></a>案例：利用函数求最大值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用伪数组 实现求最大值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMax</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> max = <span class="built_in">arguments</span>[<span class="number">0</span>];</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">     <span class="keyword">if</span> (<span class="built_in">arguments</span>[i] &gt; <span class="built_in">arguments</span>[<span class="number">0</span>]) &#123;</span><br><span class="line">       max = <span class="built_in">arguments</span>[i];</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> max;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">var</span> result = getMax(<span class="number">1</span>,<span class="number">3</span>,<span class="number">77</span>,<span class="number">5</span>,<span class="number">85</span>)</span><br><span class="line"> colsole.log(result);</span><br></pre></td></tr></table></figure><h3 id="案例：利用函数翻转数组"><a href="#案例：利用函数翻转数组" class="headerlink" title="案例：利用函数翻转数组"></a>案例：利用函数翻转数组</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//利用函数翻转任意数组  reverse 翻转</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newArr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = arr.length - <span class="number">1</span>; i &lt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        newArr[newArr.length] = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr1 = reverse([<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">9</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(arr1);</span><br><span class="line"><span class="keyword">var</span> arr2 = reverse([<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;pink&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(arr2);</span><br></pre></td></tr></table></figure><h3 id="案例：利用函数冒泡排序"><a href="#案例：利用函数冒泡排序" class="headerlink" title="案例：利用函数冒泡排序"></a>案例：利用函数冒泡排序</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用函数冒泡排序</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>;j &lt;= arr.length - i- <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">var</span> temp = arr[j];</span><br><span class="line">                arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr1 = sort([<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(arr1);</span><br><span class="line"><span class="keyword">var</span> arr2 = sort([<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">88</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(arr2);</span><br></pre></td></tr></table></figure><h3 id="案例：利用函数判断闰年"><a href="#案例：利用函数判断闰年" class="headerlink" title="案例：利用函数判断闰年"></a>案例：利用函数判断闰年</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用函数判断闰年</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isRunYear</span>(<span class="params">year</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//如果是闰年返回true，否则返回false</span></span><br><span class="line">    <span class="keyword">var</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span> || year % <span class="number">400</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(isRunYear(<span class="number">2000</span>));</span><br><span class="line"><span class="built_in">console</span>.log(isRunYear(<span class="number">1999</span>));</span><br></pre></td></tr></table></figure><p><strong>函数是可以相互调用的</strong></p><h3 id="案例：输出年份的二月份天数"><a href="#案例：输出年份的二月份天数" class="headerlink" title="案例：输出年份的二月份天数"></a>案例：输出年份的二月份天数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用户输入年份，输出该年份二月份的天数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">backDay</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> year = prompt(<span class="string">&#x27;请您输入年份&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (isRunYear(year)) &#123;  <span class="comment">// 调用函数需要加小括号</span></span><br><span class="line">        alert(<span class="string">&#x27;当前年份是闰年2月份有29天&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        alert(<span class="string">&#x27;当前年份是平年2月份有28天&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isRunYear</span>(<span class="params">year</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//如果是闰年返回true，否则返回false</span></span><br><span class="line">    <span class="keyword">var</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span> || year % <span class="number">400</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line">backDay();</span><br></pre></td></tr></table></figure><h1 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h1><h2 id="作用域-1"><a href="#作用域-1" class="headerlink" title="作用域"></a>作用域</h2><p><strong>「作用域」</strong>一段程序代码中所用到的名字并不总是有效和可靠的，而限定这个名字的可用性代码范围就是这个名字的作用域。</p><ul><li>作用域的使用提高了程序逻辑的局部性，增强了程序的可靠性，减少了名字冲突。</li><li>ES6之前作用域有两种 <code>全局作用域</code>和<code>局部作用域</code>(函数作用域)</li></ul><p><strong>「全局作用域」</strong>作用于所有代码执行的环境(整个 script 标签内部)或者一个独立的 js 文件。</p><p><strong>「局部作用域」</strong>作用于函数内部的代码环境，就是局部作用域。因为跟函数有关系，所以也被称为<code>函数作用域</code>。</p><p><strong>「JS没有块级作用域」</strong></p><ul><li>块作用域由 {} 包括</li><li>在其他编程语言，if语句中，循环语句创建的变量，仅仅只能在本if语句，本循环语句中使用，如下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">  <span class="keyword">int</span> num = <span class="number">123</span>;</span><br><span class="line">  System.out.print(num); <span class="comment">//123</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.print(num);<span class="comment">//报错</span></span><br></pre></td></tr></table></figure><p>以上java代码会报错，因为代码中 {}是一块作用域，其中声明的变量num，在{}之外不能使用，而JavaScript代码则不会报错</p><p>Js中没有块级作用域 (在ES6之前)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">   <span class="keyword">var</span> num = <span class="number">123</span>;</span><br><span class="line">   <span class="built_in">console</span>.log(num); <span class="comment">// 123</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">console</span>.log(num);<span class="comment">// 123</span></span><br></pre></td></tr></table></figure><h2 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h2><p>在JavaScript中，根据作用域的不同，变量可以分为两种:</p><ul><li><code>全局变量</code></li><li><code>局部变量</code></li></ul><p><strong>「全局变量」</strong>在全局作用域下声明的变量(在函数外部定义的变量)</p><ul><li>全局变量在代码的任何位置都可以使用</li><li>在全局作用域下 var 声明的变量 是全局变量</li><li>特殊情况下，在函数内不使用var声明的变量也是全局变量(不建议使用)。</li></ul><p><strong>「局部变量」</strong>在局部作用域下声明的变量(在函数内部定义的变量)</p><ul><li>局部变量只能在函数内部使用</li><li>在函数内部 var声明的变量是局部变量</li><li>函数的形参实际上就是局部变量</li></ul><p><strong>「全局变量和局部变量的区别」</strong></p><ul><li><code>全局变量:</code>在任何一个地方都可以使用，只有在浏览器关闭时才会销毁，因此比较占内存</li><li><code>局部变量:</code>旨在函数内部使用，当其所在的代码块被执行时，才会被初始化；当代码块运行结束后，就会被销毁，因此更节省内存空间。</li></ul><h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><p><strong>「作用域链」</strong>只要是代码都在一个作用域中，写在函数内部的局部作用域，未卸载仍和行数内部即在全局作用域中；如果函数中还有函数，那么在这个作用域中就又可以诞生一个作用域；根据<code>[内部函数可以访问外部函数变量]</code> 的这种机制，用链式查找决定哪些数据能被内部函数访问，就称作作用域链。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">123</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( num );</span><br><span class="line">    &#125;</span><br><span class="line">    f2();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">456</span>;</span><br><span class="line">f1();<span class="comment">//123</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206102305503.png"></p><p><code>作用域链</code>采取就近原则的方式来查找变量最终的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="string">&#x27;22&#x27;</span>;</span><br><span class="line">    fn2();</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">        fn3();</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">fn3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> a = <span class="number">4</span>;</span><br><span class="line">            <span class="built_in">console</span>.log(a); <span class="comment">//a的值 4</span></span><br><span class="line">            <span class="built_in">console</span>.log(b); <span class="comment">//b的值 &#x27;22&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">fn1();</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206102306310.png"></p><h1 id="预解析"><a href="#预解析" class="headerlink" title="预解析"></a>预解析</h1><p><strong>「预解析相关概念」</strong>JavaScript代码是由浏览器中的JavaScript解析器来执行的。JavaScript解析器在运行JavaScript代码的时候分为两步:预解析和代码执行。</p><ul><li><strong>「预解析」</strong>在当前作用域下，JS代码执行之前，浏览器会默认把带有 var 和 function声明的变量在内存中进行提前声明或定义。</li><li><strong>「代码执行」</strong>从上往下执行JS语句</li></ul><p>预解析会把变量和函数的声明在代码执行之前完成，<strong>预解析也叫做变量、函数提升</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小白的前端之路 </tag>
            
            <tag> JavaScript基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript数组</title>
      <link href="/%E5%89%8D%E7%AB%AF/Javascript%E6%95%B0%E7%BB%84/"/>
      <url>/%E5%89%8D%E7%AB%AF/Javascript%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1 id="「1-数组的概念」"><a href="#「1-数组的概念」" class="headerlink" title="「1. 数组的概念」"></a><strong>「1. 数组的概念」</strong></h1><p>一组数据的集合，其中的每个数据被称作<code>元素</code>，在数组中可以存放任意类型的元素。数组是一种将一组数据存储在单个变量名下的优雅方式。数组中可以存放任意类型的数据</p><h1 id="「2-创建数组」"><a href="#「2-创建数组」" class="headerlink" title="「2. 创建数组」"></a><strong>「2. 创建数组」</strong></h1><ul><li>利用new关键字创建数组</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 数组名 = <span class="keyword">new</span> <span class="built_in">Array</span>([n]);<span class="comment">//[]代表可选 若写n，则代表数组的长度</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();<span class="comment">//创建了一个名为 arr 的空数组</span></span><br></pre></td></tr></table></figure><ul><li>利用数组字面量创建数组</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 使用数组字面量方式创建空的数组</span></span><br><span class="line"><span class="keyword">var</span> 数组名 = [];<span class="comment">//若写n，则代表数组的长度</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//2. 使用数组字面量方式创建带初始值的数组</span></span><br><span class="line"><span class="comment">//3. 声明数组并赋值称为数组的初始化</span></span><br><span class="line"><span class="keyword">var</span> arr =[<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="string">&#x27;fan&#x27;</span>,<span class="literal">true</span>,<span class="number">17.5</span>];<span class="comment">//数组中可以存放任意类型的数据</span></span><br></pre></td></tr></table></figure><h1 id="「3-访问数组元素」"><a href="#「3-访问数组元素」" class="headerlink" title="「3. 访问数组元素」"></a><strong>「3. 访问数组元素」</strong></h1><p>索引(下标):用来访问数组元素的序号。索引从 <code>0</code> 开始</p><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206070836311.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义数组</span></span><br><span class="line"><span class="keyword">var</span> arrStus = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="comment">// 获取数组中的第2个元素 </span></span><br><span class="line">alert(arrStus[<span class="number">1</span>]); </span><br><span class="line"><span class="comment">// 如果访问数组时没有和索引值对应的元素(数组越界)，</span></span><br><span class="line"><span class="comment">// 返回值为undefined</span></span><br></pre></td></tr></table></figure><h1 id="「4-遍历数组」"><a href="#「4-遍历数组」" class="headerlink" title="「4. 遍历数组」"></a><strong>「4. 遍历数组」</strong></h1><p>把数组中的元素从头到尾都访问一次。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1.数组索引号从零开始，所以i必须从零开始</span></span><br><span class="line"><span class="comment">//2.输出结果的时候 arr[i]， i 计数器当索引号使用</span></span><br></pre></td></tr></table></figure><h1 id="「5-数组长度」"><a href="#「5-数组长度」" class="headerlink" title="「5.数组长度」"></a><strong>「5.数组长度」</strong></h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组名.length</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;甲&#x27;</span>,<span class="string">&#x27;乙&#x27;</span>,<span class="string">&#x27;丙&#x27;</span>,<span class="string">&#x27;戍&#x27;</span>,<span class="string">&#x27;己&#x27;</span>,<span class="string">&#x27;庚&#x27;</span>,<span class="string">&#x27;辛&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr.length);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1. 数组的长度是元素个数，不要跟索引号混淆</span></span><br><span class="line"><span class="comment">//2. arr.length 动态监测数组元素个数</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="案例：求数组中最大值"><a href="#案例：求数组中最大值" class="headerlink" title="案例：求数组中最大值"></a>案例：求数组中最大值</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求数组中最大值</span></span><br><span class="line"><span class="comment">//声明一个保存最大元素的变量max</span></span><br><span class="line"><span class="comment">//默认最大值可取数组中第一个元素</span></span><br><span class="line"><span class="comment">//遍历这个数组，把里面的每个元素与max比较</span></span><br><span class="line"><span class="comment">//如果该数组元素大于max，把这个元素保存到max里面</span></span><br><span class="line"><span class="comment">//最后输出max</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;77&#x27;</span>,<span class="string">&#x27;52&#x27;</span>,<span class="string">&#x27;25&#x27;</span>,<span class="string">&#x27;7&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> max = arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &gt; arr[<span class="number">0</span>]) &#123;</span><br><span class="line">        max = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;该数组中最大的是&#x27;</span> + max);</span><br></pre></td></tr></table></figure><h2 id="案例：数组转换为字符串"><a href="#案例：数组转换为字符串" class="headerlink" title="案例：数组转换为字符串"></a>案例：数组转换为字符串</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将数组转换为字符串，并用*分割</span></span><br><span class="line"><span class="comment">//1.需要一个新变量存放转换完成的字符串</span></span><br><span class="line"><span class="comment">//2.遍历原来的数组，分别把里面的数组元素取出来，加到字符串里面</span></span><br><span class="line"><span class="comment">//3.同时在后面多加一个*</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>,<span class="string">&#x27;pink&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> sep = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    str += arr[i] + sep;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure><h1 id="「6-数组新增元素」"><a href="#「6-数组新增元素」" class="headerlink" title="「6.数组新增元素」"></a><strong>「6.数组新增元素」</strong></h1><p>可以通过修改length长度以及索引号增加数组元素</p><ul><li><strong>「修改length属性」</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.新增数组元素，修改length长度</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.length);</span><br><span class="line">arr.length = <span class="number">5</span>; <span class="comment">// 把数组元素长度修改为5，里面应该有5个元素</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">3</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">3</span>]); <span class="comment">// 新增空间没有给值，所以是undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">4</span>]); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><ul><li><strong>「修改数组索引」</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2.新增数组元素，修改索引号，追加数组元素</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>];</span><br><span class="line">arr1[<span class="number">3</span>] = <span class="string">&#x27;pink&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr1);</span><br><span class="line">arr1[<span class="number">4</span>] = <span class="string">&#x27;hotpink&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr1);</span><br><span class="line">arr1[<span class="number">0</span>] = <span class="string">&#x27;yellow&#x27;</span>; <span class="comment">// 这里是替换原来的数组元素</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1);</span><br><span class="line">arr1 = <span class="string">&#x27;有点意思&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// 不要直接给数组名赋值，会覆盖掉以前的数据，数组里面的数组元素都没有了</span></span><br></pre></td></tr></table></figure><h2 id="案例：数组中存放1-100个值"><a href="#案例：数组中存放1-100个值" class="headerlink" title="案例：数组中存放1-100个值"></a>案例：数组中存放1-100个值</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//新建一数组，存放1-100个值</span></span><br><span class="line"><span class="comment">//核心原理：使用循环追加数组</span></span><br><span class="line"><span class="comment">//1.声明一个空数组 arr</span></span><br><span class="line"><span class="comment">//2.循环中计数器 i 可作为数组元素存入</span></span><br><span class="line"><span class="comment">//3.由于数组索引号是从0开始，因此计数器从0开始合适，存入的数组元素需要 + 1</span></span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    arr[i] = i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure><h2 id="案例：筛选数组"><a href="#案例：筛选数组" class="headerlink" title="案例：筛选数组"></a>案例：筛选数组</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将数组[&#x27;2&#x27;,&#x27;0&#x27;,&#x27;6&#x27;,&#x27;1&#x27;,&#x27;77&#x27;,&#x27;0&#x27;,&#x27;52&#x27;,&#x27;0&#x27;,&#x27;25&#x27;,&#x27;7&#x27;,&#x27;6&#x27;]中大于等于10 的元素选出来放入新数组</span></span><br><span class="line"><span class="comment">// 1.声明一个新的数组用于存放新数据 newArr</span></span><br><span class="line"><span class="comment">// 2.遍历原来旧的数组，找出大于等于 10 的元素</span></span><br><span class="line"><span class="comment">// 3.依次追加给新数组 newArr</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;77&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;52&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;25&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;6&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = [];</span><br><span class="line"><span class="keyword">var</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="comment">// 新数组索引号从0开始，依次递增</span></span><br><span class="line">        newArr[j] = arr[i];</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(newArr);</span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;77&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;52&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;25&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;6&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = [];</span><br><span class="line"><span class="comment">// 刚开始 newArr.length 就是0</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="comment">// 新数组索引号应该从0开始，依次递增</span></span><br><span class="line">        newArr[newArr.length] = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(newArr);</span><br></pre></td></tr></table></figure><h2 id="案例：翻转数组"><a href="#案例：翻转数组" class="headerlink" title="案例：翻转数组"></a>案例：翻转数组</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将数组</span></span><br><span class="line"><span class="comment">// 1.声明一个新数组 newArr</span></span><br><span class="line"><span class="comment">// 2.把旧数组索引号4个取过来（arr.length - 1），给新数组索引号第0个元素（newArr.length）</span></span><br><span class="line"><span class="comment">// 3.采用递减的方式 i++</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>,<span class="string">&#x27;pink&#x27;</span>,<span class="string">&#x27;purple&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> newArr[];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = arr.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    newArr[newArr.length] = arr[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(newArr);</span><br></pre></td></tr></table></figure><h2 id="案例：冒泡排序-把数组从大到小或从小到大重新排序"><a href="#案例：冒泡排序-把数组从大到小或从小到大重新排序" class="headerlink" title="案例：冒泡排序 把数组从大到小或从小到大重新排序"></a>案例：冒泡排序 把数组从大到小或从小到大重新排序</h2><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206070959111.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 冒泡排序 从小到大排序</span></span><br><span class="line"><span class="comment">// var arr = [5, 4, 3, 2, 1];</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>,];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= arr.length - <span class="number">1</span>; i++) &#123; <span class="comment">// 外层循环负责趟数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt;= arr.length - i - <span class="number">1</span>; j++) &#123; <span class="comment">// 内层循环负责每一趟的交换次数</span></span><br><span class="line">        <span class="comment">// 内部交换两个变量的值，第一个和后面一个数组元素相比较</span></span><br><span class="line">        <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">var</span> temp = arr[j];</span><br><span class="line">            arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">            arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小白的前端之路 </tag>
            
            <tag> JavaScript基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>H5C3新增</title>
      <link href="/%E5%89%8D%E7%AB%AF/H5C3%E6%96%B0%E5%A2%9E%E5%B1%9E%E6%80%A7/"/>
      <url>/%E5%89%8D%E7%AB%AF/H5C3%E6%96%B0%E5%A2%9E%E5%B1%9E%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="H5简介"><a href="#H5简介" class="headerlink" title="H5简介"></a>H5简介</h1><h2 id="「1-什么是HTML5」"><a href="#「1-什么是HTML5」" class="headerlink" title="「1. 什么是HTML5」"></a><strong>「1. 什么是HTML5」</strong></h2><ul><li><p>定义：<strong>HTML5</strong>定义了<strong>HTML</strong>标准的最新版本，是对<strong>HTML</strong>的第五次重大修改，号称下一代的HTML。</p></li><li><p>两个概念：</p><ol><li>是一个新版本的<strong>HTML</strong>语言，定义了新的标签、特性和属性</li><li>拥有一个强大的技术集，这些技术集是指：<strong>HTML5、CSS3、JavaScript</strong>,这也是广义上的HTML5</li></ol></li></ul><h2 id="「2-HTML5拓展了哪些内容」"><a href="#「2-HTML5拓展了哪些内容」" class="headerlink" title="「2. HTML5拓展了哪些内容」"></a><strong>「2. HTML5拓展了哪些内容」</strong></h2><ul><li>语义化标签</li><li>本地存储</li><li>兼容特性</li><li>2D、3D</li><li>动画、过渡</li><li>CSS3特性</li><li>性能与集成</li></ul><h1 id="HTML5新增"><a href="#HTML5新增" class="headerlink" title="HTML5新增"></a>HTML5新增</h1><h2 id="「1-什么是语义化」"><a href="#「1-什么是语义化」" class="headerlink" title="「1. 什么是语义化」"></a><strong>「1. 什么是语义化」</strong></h2><p>语义化是指用HTML写出符合<strong>内容的结构化</strong>（内容语义化），选择<strong>合适的标签</strong>（代码语义化），能够便于开发者阅读和写出更优雅的代码的同时让浏览器的爬虫和机器很好地解析。</p><h2 id="「2-新增了哪些语义化标签」"><a href="#「2-新增了哪些语义化标签」" class="headerlink" title="「2. 新增了哪些语义化标签」"></a><strong>「2. 新增了哪些语义化标签」</strong></h2><ul><li><code>header</code>  —  头部标签</li><li><code>nav</code>     —  导航标签</li><li><code>article</code> —  内容标签</li><li><code>section</code> —  块级标签</li><li><code>aside</code>   —  侧边栏标签</li><li><code>footer</code>  —  尾部标签</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202205291552900.png"></p><h2 id="「3-新增多媒体音频标签」"><a href="#「3-新增多媒体音频标签」" class="headerlink" title="「3. 新增多媒体音频标签」"></a><strong>「3. 新增多媒体音频标签」</strong></h2><p>多媒体标签有两个，分别是音频 <strong>audio</strong>和视频<strong>video</strong>。</p><p><code>audio 标签说明</code></p><ul><li>可以在不使用标签的情况下，也能够原生的支持音频格式文件的播放，</li><li>但是：播放的格式是<strong>有限</strong>的。</li></ul><p><strong>audio 参数</strong></p><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>autoplay</td><td>autoplay</td><td>音频就绪后立刻播放</td></tr><tr><td>controls</td><td>controls</td><td>向用户展示音频控件</td></tr><tr><td>loop</td><td>loop</td><td>音频结束后重新循环播放</td></tr><tr><td>src</td><td>src</td><td>播放音频的url地址</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注意：在 chrome 浏览器中已经禁用了 autoplay 属性 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;audio src=&quot;./media/snow.mp3&quot; controls autoplay&gt;&lt;/audio&gt; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    因为不同浏览器支持不同的格式，所以我们采取的方案是这个音频准备多个文件 --&gt;</span>                             </span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;myAudio.mp3&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/mpeg&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;myAudio.ogg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/ogg&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Your browser doesn&#x27;t support HTML5 audio. Here is</span><br><span class="line">     a <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;myAudio.mp4&quot;</span>&gt;</span>link to the audio<span class="tag">&lt;/<span class="name">a</span>&gt;</span> instead.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>video 参数</strong></p><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>autoplay</td><td>autoplay</td><td>自动播放</td></tr><tr><td>aontrols</td><td>controls</td><td>播放控件</td></tr><tr><td>width</td><td>px像素</td><td>宽度</td></tr><tr><td>height</td><td>px像素</td><td>高度</td></tr><tr><td>loop</td><td>loop</td><td>循环播放</td></tr><tr><td>preload</td><td>auto || none</td><td>是否预加载视频（如又autoplay忽略该属性）</td></tr><tr><td>src</td><td>url</td><td>视频url地址</td></tr><tr><td>poster</td><td>imgurl</td><td>加载等待图片地址</td></tr><tr><td>muted</td><td>muted</td><td>静音播放</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;video src=&quot;./media/video.mp4&quot; controls=&quot;controls&quot;&gt;&lt;/video&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 谷歌浏览器禁用了自动播放功能，如果想自动播放，需要添加 muted 属性 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span>=<span class="string">&quot;controls&quot;</span> <span class="attr">autoplay</span> <span class="attr">muted</span> <span class="attr">loop</span> <span class="attr">poster</span>=<span class="string">&quot;./media/pig.jpg&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;./media/video.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;./media/video.ogg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/ogg&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>多媒体标签总结</strong></p><ul><li>音频标签和视频标签使用基本一致</li><li>多媒体标签在不同浏览器下情况不同，存在兼容性问题</li><li>谷歌浏览器把音频和视频标签的自动播放都<strong>禁止</strong>了</li><li>谷歌浏览器中视频添加<strong>muted</strong>属性就可以自己播放了</li><li>注意：重点记住使用方法及自动播放即可，其他属性在使用时查找对应的手册</li></ul><h2 id="「4-新增input标签」"><a href="#「4-新增input标签」" class="headerlink" title="「4. 新增input标签」"></a><strong>「4. 新增input标签」</strong></h2><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>type=“email”</td><td>限制用户输入必须为Email类型</td></tr><tr><td>type=“url”</td><td>限制用户输入必须为url类型</td></tr><tr><td>type=“date”</td><td>限制用户输入必须为日期类型</td></tr><tr><td>type=“time”</td><td>限制用户输入必须为时间类型</td></tr><tr><td>type=“month”</td><td>限制用户输入必须为月类型</td></tr><tr><td>type=“week”</td><td>限制用户输入必须为周类型</td></tr><tr><td>type=“number”</td><td>限制用户输入必须为数字类型</td></tr><tr><td>type=“tel”</td><td>手机号码</td></tr><tr><td>type=“search”</td><td>搜索框</td></tr><tr><td>type=“color”</td><td>生成一个颜色选择表单</td></tr></tbody></table><h2 id="「5-新增表单属性」"><a href="#「5-新增表单属性」" class="headerlink" title="「5. 新增表单属性」"></a><strong>「5. 新增表单属性」</strong></h2><table><thead><tr><th>属性</th><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>required</td><td>required</td><td>表单为必填项</td></tr><tr><td>placeholder</td><td>提示文本</td><td>表单的提示信息</td></tr><tr><td>autofoucs</td><td>autofoucs</td><td>自动聚焦属性，页面加载完成时自动聚焦表单</td></tr><tr><td>autocomplete</td><td>off / on</td><td>显示之前提交过的值，须name属性和成功提交同时满足</td></tr><tr><td>multiple</td><td>multiple</td><td>可以多选文件提交</td></tr></tbody></table><h1 id="CSS3新增"><a href="#CSS3新增" class="headerlink" title="CSS3新增"></a>CSS3新增</h1><h2 id="「1-CSS3属性选择器」"><a href="#「1-CSS3属性选择器」" class="headerlink" title="「1. CSS3属性选择器」"></a><strong>「1. CSS3属性选择器」</strong></h2><table><thead><tr><th>选择符</th><th>简介</th></tr></thead><tbody><tr><td>E {att}</td><td>选择具有att属性的E元素</td></tr><tr><td>E {att=“val”}</td><td>选择具有att属性且属性值等于val的E元素</td></tr><tr><td>E {att^=“val”}</td><td>匹配具有att属性，且值以val开头的E元素</td></tr><tr><td>E {att$=“val”}</td><td>匹配具有att属性，且值以val结尾的E元素</td></tr><tr><td>E {att*=“val”}</td><td>匹配具有att属性，且值中含有val的E元素</td></tr></tbody></table><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">   <span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">button</span><span class="selector-attr">[disabled]</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: default;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=search]</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: skyblue;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">span</span><span class="selector-attr">[class^=black]</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: lightgreen;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">span</span><span class="selector-attr">[class$=black]</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: lightsalmon;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">span</span><span class="selector-attr">[class*=black]</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: lightseagreen;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="「2-结构伪类选择器」"><a href="#「2-结构伪类选择器」" class="headerlink" title="「2. 结构伪类选择器」"></a><strong>「2. 结构伪类选择器」</strong></h2><table><thead><tr><th>选择符</th><th>简介</th></tr></thead><tbody><tr><td>E:first-child</td><td>匹配父元素中第一个子元素E</td></tr><tr><td>E:last-child</td><td>匹配父元素中最后一个子元素E</td></tr><tr><td>E:nth-child(n)</td><td>匹配父元素中第n个子元素E</td></tr><tr><td>E:first-of-type</td><td>指定类型E的第一个</td></tr><tr><td>E:last-of-type</td><td>指定类型E的最后一个</td></tr><tr><td>E:nth-of-type(n)</td><td>指定类型E的第n个</td></tr></tbody></table><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:first</span>-child &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: lightseagreen;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: lightcoral;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: aqua;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**nth-child(n)**参数n详解</p><ul><li>注意：本质上就是选中第几个子元素</li><li>n 可以是数字、关键字、公式</li><li>n 如果是数字，就是选中第几个</li><li>常见的关键字有 <code>even</code> 偶数、<code>odd</code> 奇数</li><li>常见的公式如下(如果 n 是公式，则从 0 开始计算)</li><li>但是第 0 个元素或者超出了元素的个数会被忽略</li></ul><table><thead><tr><th>公式</th><th>取值</th></tr></thead><tbody><tr><td>2n</td><td>偶数</td></tr><tr><td>2n+1</td><td>奇数</td></tr><tr><td>5n</td><td>5 10 15…</td></tr><tr><td>n+5</td><td>从第五个开始到最后（包含第五个）</td></tr><tr><td>-n+5</td><td>前五个（包含第五）</td></tr></tbody></table><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  <span class="comment">/* 偶数 */</span></span><br><span class="line">  <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(even) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: aquamarine;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 奇数 */</span></span><br><span class="line">  <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(odd) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: blueviolet;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*n 是公式，从 0 开始计算 */</span></span><br><span class="line">  <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(n) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: lightcoral;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 偶数 */</span></span><br><span class="line">  <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>n) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: lightskyblue;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 奇数 */</span></span><br><span class="line">  <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>n + <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: lightsalmon;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 选择第 0 5 10 15, 应该怎么选 */</span></span><br><span class="line">  <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">5</span>n) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: orangered;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* n + 5 就是从第5个开始往后选择 */</span></span><br><span class="line">  <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(n + <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: peru;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* -n + 5 前五个 */</span></span><br><span class="line">  <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(-n + <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: tan;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>类选择器，属性选择器，伪类选择器，权重为10</strong></p><p><strong>nth-child与nth-of-type区别</strong></p><ul><li><code>nth-child</code> 对父元素里面的所有孩子排列选择（序号是固定的）先找到第n个孩子，然后看看是否和E匹配</li><li><code>nth-of-type</code> 对父元素里面指定的子元素进行排列选择。先匹配E，然后在根据E找第n个孩子</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  <span class="selector-tag">div</span> <span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: lightblue;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">div</span> <span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: lightpink;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">div</span> <span class="selector-tag">span</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">2</span>) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: lightseagreen;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">div</span> <span class="selector-tag">span</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">3</span>) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="「3-伪元素选择器」"><a href="#「3-伪元素选择器」" class="headerlink" title="「3. 伪元素选择器」"></a><strong>「3. 伪元素选择器」</strong></h2><table><thead><tr><th>选择符</th><th>简介</th></tr></thead><tbody><tr><td>::before</td><td>在元素内部的前面插入内容</td></tr><tr><td>::after</td><td>在元素内部的后面插入内容</td></tr></tbody></table><h3 id="伪元素选择器注意事项"><a href="#伪元素选择器注意事项" class="headerlink" title="伪元素选择器注意事项"></a><strong>伪元素选择器注意事项</strong></h3><ul><li><code>before</code> 和 <code>after</code> 必须有 <code>content</code> 属性</li><li><code>before</code> 在内容前面，after 在内容后面</li><li><code>before</code> 和 <code>after</code> 创建的是一个元素，但是属于行内元素</li><li>创建出来的元素在 <code>Dom</code> 中查找不到，所以称为伪元素</li><li>伪元素和标签选择器一样，权重为 1</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="selector-tag">div</span> &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">      <span class="attribute">border</span>: <span class="number">1px</span> solid lightcoral;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-pseudo">::after</span>,</span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">      <span class="attribute">text-align</span>: center;</span><br><span class="line">      <span class="attribute">display</span>: inline-block;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">&#x27;德&#x27;</span>;</span><br><span class="line">      <span class="attribute">background-color</span>: lightskyblue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">&#x27;道&#x27;</span>;</span><br><span class="line">      <span class="attribute">background-color</span>: mediumaquamarine;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="伪元素字体图标"><a href="#伪元素字体图标" class="headerlink" title="伪元素字体图标"></a>伪元素字体图标</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line"><span class="attribute">font-family</span>: ‘icomoon’;</span><br><span class="line"><span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">‘fonts/icomoon.eot?7kkyc2’</span>);</span><br><span class="line"><span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">‘fonts/icomoon.eot?7kkyc2#iefix’</span>) <span class="built_in">format</span>(‘embedded-opentype’),</span><br><span class="line"><span class="built_in">url</span>(<span class="string">‘fonts/icomoon.ttf?7kkyc2’</span>) <span class="built_in">format</span>(‘truetype’),</span><br><span class="line"><span class="built_in">url</span>(<span class="string">‘fonts/icomoon.woff?7kkyc2’</span>) <span class="built_in">format</span>(‘woff’),</span><br><span class="line"><span class="built_in">url</span>(<span class="string">‘fonts/icomoon.svg?7kkyc2#icomoon’</span>) <span class="built_in">format</span>(‘svg’);</span><br><span class="line"><span class="attribute">font-weight</span>: normal;</span><br><span class="line"><span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">   <span class="attribute">position</span>: relative;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">220px</span>;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">22px</span>;</span><br><span class="line">   <span class="attribute">border</span>: <span class="number">1px</span> solid lightseagreen;</span><br><span class="line">   <span class="attribute">margin</span>: <span class="number">60px</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;\ea50&#x27;</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;icomoon&#x27;</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="伪元素清除浮动"><a href="#伪元素清除浮动" class="headerlink" title="伪元素清除浮动"></a>伪元素清除浮动</h3><ol><li>额外标签法也称隔墙法，是W3C推荐的做法</li><li>父元素添加overflow属性</li><li>父元素添加afte伪元素</li><li>父元素添加双伪元素</li></ol><p>额外标签法是基本做法，在浮动元素后面新增一个空标签，必须为块级盒子，属性为clear:both。</p><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202205301012442.png"></p><p>后面两种伪元素清除浮动的方法是第一种额外标签法的升级和优化</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line"><span class="attribute">content</span>:<span class="string">&quot;&quot;</span>;伪元素必填属性</span><br><span class="line">    <span class="attribute">display</span>: block;插入元素必须是块级</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;不要看见这个元素</span><br><span class="line">    <span class="attribute">clear</span>: both;核心代码清除浮动</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;不要看见这个元素</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::before</span> <span class="selector-class">.clear</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>:table;    转换为块级元素并且一行显示</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="「4-CSS3盒子模型」"><a href="#「4-CSS3盒子模型」" class="headerlink" title="「4. CSS3盒子模型」"></a><strong>「4. CSS3盒子模型」</strong></h2><p>box-sizing属性可用来指定盒子模型，有两个属性值值，可指定为content-box，border-box。</p><p><strong>区别：</strong></p><ol><li>box-sizing: content-box;盒子大小为width+padding+border（以前默认的）</li><li>box-sizing: border-box; 盒子大小为width</li></ol><p>如果盒子模型改为第二种，则padding和border就不会撑大盒子（前提是padding和border不会超过width宽度）</p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小白的前端之路 </tag>
            
            <tag> CSS基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS高级技巧</title>
      <link href="/%E5%89%8D%E7%AB%AF/CSS%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7/"/>
      <url>/%E5%89%8D%E7%AB%AF/CSS%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="元素的显示与隐藏"><a href="#元素的显示与隐藏" class="headerlink" title="元素的显示与隐藏"></a>元素的显示与隐藏</h1><p>让一个元素在页面中隐藏或显示出来</p><p>共有三个属性</p><table><thead><tr><th>属性</th><th>属性值</th></tr></thead><tbody><tr><td>display</td><td>none | display</td></tr><tr><td>visibility</td><td>hidden | visible</td></tr><tr><td>overflow</td><td>visible | hidden | scroll | auto</td></tr></tbody></table><p>display属性隐藏后会脱标，不占有原来位置</p><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202205282000945.png"></p><p>visibility属性隐藏后不会脱标，继续占有原来位置</p><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202205282001733.png"></p><p>overflow属性针对溢出，visible | hidden | scroll | auto</p><table><thead><tr><th>overflow属性值</th><th>描述</th></tr></thead><tbody><tr><td>visible</td><td>不剪切内容不添加滚动条</td></tr><tr><td>hidden</td><td>隐藏超出对象尺寸的内容</td></tr><tr><td>scroll</td><td>总分是显示滚动条</td></tr><tr><td>auto</td><td>超出内容自动显示滚动条，不超出不显示</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202205282002302.png"></p><h1 id="精灵图技术"><a href="#精灵图技术" class="headerlink" title="精灵图技术"></a>精灵图技术</h1><h2 id="「概述」"><a href="#「概述」" class="headerlink" title="「概述」"></a>「概述」</h2><ul><li>图所示为网页的请求原理图，当用户访问一个网站时，需要向服务器发送请求，网页上的每张图像都要经过一次请求才能展现给用户。</li><li>然而，一个网页中往往会应用很多小的背景图像作为修饰，当网页中的图像过多时，服务器就会频繁地接受和发送请求，这将大大降低页面的加载速度。</li></ul><p>为了有效地减少服务器接受和发送请求的次数，提高页面的加载速度。CSS 精灵其实是将网页中的一些背景图像整合到一张大图中（精灵图），然而，各个网页元素通常只需要精灵图中不同位置的某个小图，要想精确定位到精灵图中的某个小图。这样，当用户访问该页面时，只需向服务发送一次请求，网页中的背景图像即可全部展示出来。</p><h2 id="「需要的属性」"><a href="#「需要的属性」" class="headerlink" title="「需要的属性」"></a>「需要的属性」</h2><ul><li>background-image、</li><li>background-repeat</li><li>background-position属性进行背景定位，</li><li>其中最关键的是使用<code>background-position</code> 属性精确地定位。</li></ul><h2 id="「核心总结」"><a href="#「核心总结」" class="headerlink" title="「核心总结」"></a>「核心总结」</h2><p>首先我们知道，css精灵技术主要针对于背景图片，插入的图片img 是不需要这个技术的。</p><ol><li>精确测量，每个小背景图片的大小和位置。</li><li>给盒子指定小背景图片时，背景定位基本都是 负值。</li></ol><h1 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h1><p>网页中的一些小图标通常用字体图标iconfont来显示，字体图标本质上是字体，现实的是图标。</p><p><strong>字体图标下载网站</strong></p><ul><li>icomoon字库 <a href="https://icomoon.io/">https://icomoon.io</a> </li><li>阿里iconfont字库 <a href="https://www.iconfont.cn/">https://www.iconfont.cn</a></li></ul><ol><li>在字体图标网站选中图标下载后，需要将其引入到，将下载包里的fonts文件夹放入页面根目录下</li><li>在CSS样式中全局声明字体，把这些字体文件通过CSS引入到我们页面中，一定要注意字体文件路径问题</li></ol><p><strong>声明代码如下</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line"><span class="attribute">font-family</span>: ‘icomoon’;</span><br><span class="line"><span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">‘fonts/icomoon.eot?7kkyc2’</span>);</span><br><span class="line"><span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">‘fonts/icomoon.eot?7kkyc2#iefix’</span>) <span class="built_in">format</span>(‘embedded-opentype’),</span><br><span class="line"><span class="built_in">url</span>(<span class="string">‘fonts/icomoon.ttf?7kkyc2’</span>) <span class="built_in">format</span>(‘truetype’),</span><br><span class="line"><span class="built_in">url</span>(<span class="string">‘fonts/icomoon.woff?7kkyc2’</span>) <span class="built_in">format</span>(‘woff’),</span><br><span class="line"><span class="built_in">url</span>(<span class="string">‘fonts/icomoon.svg?7kkyc2#icomoon’</span>) <span class="built_in">format</span>(‘svg’);</span><br><span class="line"><span class="attribute">font-weight</span>: normal;</span><br><span class="line"><span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;icomoon&#x27;</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">spam</span>&gt;</span> <span class="tag">&lt;/<span class="name">spam</span>&gt;</span>  /复制图标网站上的源码</span><br></pre></td></tr></table></figure><p>字体图标的追加：把压缩包中slection.json重新上传，然后选中自己想要更新的图标，重新下载压缩包，并途欢原来的文件即可。</p><h1 id="CSS三角"><a href="#CSS三角" class="headerlink" title="CSS三角"></a>CSS三角</h1><ol><li>我们用css 边框可以模拟三角效果</li><li>宽度高度为0</li><li>我们4个边框都要写， 只保留需要的边框颜色，其余的不能省略，都改为 transparent 透明就好了</li><li>为了照顾兼容性 低版本的浏览器，加上 font-size: 0;  line-height: 0;</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">line-height</span>:<span class="number">0</span>；</span><br><span class="line">    font-size: <span class="number">0</span>;</span><br><span class="line">   <span class="attribute">border-top</span>: <span class="number">10px</span> solid red;</span><br><span class="line"></span><br><span class="line">   <span class="attribute">border-right</span>: <span class="number">10px</span> solid green;</span><br><span class="line"></span><br><span class="line">   <span class="attribute">border-bottom</span>: <span class="number">10px</span> solid blue;</span><br><span class="line"></span><br><span class="line">   <span class="attribute">border-left</span>: <span class="number">10px</span> solid <span class="number">#000</span>; </span><br><span class="line"></span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202205281959548.png"></p><h1 id="CSS用户页面样式"><a href="#CSS用户页面样式" class="headerlink" title="CSS用户页面样式"></a>CSS用户页面样式</h1><h2 id="「鼠标样式cursor」"><a href="#「鼠标样式cursor」" class="headerlink" title="「鼠标样式cursor」"></a>「鼠标样式cursor」</h2><p>设置或检索在对象上移动的鼠标指针采用何种系统预定义的光标形状。</p><table><thead><tr><th>属性</th><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>cursor</td><td>default</td><td>小白(默认)</td></tr><tr><td></td><td>pointer</td><td>小手</td></tr><tr><td></td><td>move</td><td>移动</td></tr><tr><td></td><td>text</td><td>文本</td></tr><tr><td></td><td>not-allowed</td><td>禁止</td></tr></tbody></table><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">ul</span>&gt;</span><br><span class="line">  &lt;<span class="selector-tag">li</span> style=&quot;<span class="attribute">cursor</span><span class="selector-pseudo">:default</span>&quot;&gt;我是小白&lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">  &lt;<span class="selector-tag">li</span> style=&quot;<span class="attribute">cursor</span>:pointer<span class="string">&quot;&gt;我是小手&lt;/li&gt;</span></span><br><span class="line"><span class="string">  &lt;li style=&quot;</span>cursor:move<span class="string">&quot;&gt;我是移动&lt;/li&gt;</span></span><br><span class="line"><span class="string">  &lt;li style=&quot;</span>cursor:text<span class="string">&quot;&gt;我是文本&lt;/li&gt;</span></span><br><span class="line"><span class="string">  &lt;li style=&quot;</span>cursor:not-allowed<span class="string">&quot;&gt;我是文本&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;</span></span><br></pre></td></tr></table></figure><h2 id="「轮廓线outline」"><a href="#「轮廓线outline」" class="headerlink" title="「轮廓线outline」"></a>「轮廓线outline」</h2><p>是绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">outline</span> : outline-color || outline-style || outline-width </span><br></pre></td></tr></table></figure><p>但是我们都不关心可以设置多少，我们平时都是去掉的。<br>最直接的写法是 ： outline: 0;  或者  outline: none;</p><h2 id="「防拖拽文本域resize」"><a href="#「防拖拽文本域resize」" class="headerlink" title="「防拖拽文本域resize」"></a>「防拖拽文本域resize」</h2><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202205282012600.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/*css行内式写法*/</span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">style</span>=<span class="string">&quot;resize: none;&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="「vertical-align属性应用」"><a href="#「vertical-align属性应用」" class="headerlink" title="「vertical-align属性应用」"></a>「vertical-align属性应用」</h2><p>vertical-align 垂直对齐，它只针对于<strong>「行内元素」</strong>或者<strong>「行内块元素」</strong></p><p>可以用来设置<strong>图片表单文字对齐</strong>和<strong>去除图片底侧空白空袭</strong></p><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202205282016270.jpg"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">设置或检索对象内容的垂直对其方式。</span><br><span class="line"><span class="attribute">vertical-align</span> : baseline |top |middle |bottom </span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><ul><li>vertical-align 不影响块级元素中的内容对齐，它只针对于<strong>「行内元素」</strong>或者<strong>「行内块元素」</strong></li><li>特别是行内块元素， 通常用来控制图片/表单与文字的对齐。</li><li>有宽度的块级元素居中对齐，是margin: 0 auto;</li><li>让文字居中对齐，是 text-align: center;</li></ul><h2 id="「溢出文字省略号显示」"><a href="#「溢出文字省略号显示」" class="headerlink" title="「溢出文字省略号显示」"></a>「溢出文字省略号显示」</h2><p><strong>三个步骤</strong></p><ol><li>先强制一行内显示文本</li><li>超出的部分隐藏</li><li>文字用省略号替代超出的部分</li></ol><p>white-space属性设置或检索对象内文本显示方式。通常我们使用于强制一行显示内容</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">white-space</span>:normal ；默认处理方式</span><br><span class="line"></span><br><span class="line">white-space:nowrap ； 强制在同一行内显示所有文本，直到文本结束或者遭遇br标签对象才换行。</span><br></pre></td></tr></table></figure><p>text-overflow属性设置或检索是否使用一个省略标记（…）标示对象内文本的溢出</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">text-overflow</span> : clip ；不显示省略标记（...），而是简单的裁切 </span><br><span class="line"></span><br><span class="line">text-overflow：ellipsis ； 当对象内文本溢出时显示省略标记（...）</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*1. 先强制一行内显示文本*/</span></span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line"><span class="comment">/*2. 超出的部分隐藏*/</span></span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="comment">/*3. 文字用省略号替代超出的部分*/</span></span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br></pre></td></tr></table></figure><h1 id="常见布局技巧"><a href="#常见布局技巧" class="headerlink" title="常见布局技巧"></a>常见布局技巧</h1><ol><li>margin负值的运用</li><li>文字环绕浮动元素</li><li>行内块元素巧妙运用</li><li>CSS三角强化</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小白的前端之路 </tag>
            
            <tag> CSS基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript流程控制</title>
      <link href="/%E5%89%8D%E7%AB%AF/Javascript%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
      <url>/%E5%89%8D%E7%AB%AF/Javascript%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a><strong>流程控制</strong></h1><p>在一个程序执行的过程中，各条代码的执行顺序对程序的结果是有直接影响的。很多时候我们要通过控制代码的执行顺序来实现我们要完成的功能。流程控制主要有三种结构，分别是<strong>顺序结构</strong>、<strong>分支结构</strong>和<strong>循环结构</strong>，代表三种代码执行的顺序。</p><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202205311435023.png"></p><h1 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a><strong>分支结构</strong></h1><p>js语言提供了两种分支结构语句</p><ul><li>if语句</li><li>switch语句</li></ul><h2 id="「if-语句」"><a href="#「if-语句」" class="headerlink" title="「if 语句」"></a><strong>「if 语句」</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//条件成立执行代码，否则什么也不做</span></span><br><span class="line"><span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">    <span class="comment">//条件成立执行代码语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>语句可以理解为一个行为，循环语句和分支语句就是典型的语句。一个程序由多个语句组成，一般情况下，会被分割成一个一个的语句。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//执行思路，如果if里面的条件表达式结果为真，true，则执行大括号里面的执行语句</span></span><br><span class="line"><span class="comment">//如果if条件表达式结果为假，则不执行大括号里的语句，执行if语句后面的代码</span></span><br><span class="line"><span class="comment">//演示</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">3</span>&gt;<span class="number">2</span>)&#123;</span><br><span class="line">    alert(<span class="string">&#x27;前端路漫漫&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="「if-else语句（双分支语句）」"><a href="#「if-else语句（双分支语句）」" class="headerlink" title="「if else语句（双分支语句）」"></a><strong>「if else语句（双分支语句）」</strong></h2><p>语法结构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//条件成立，执行if里代码，否则执行else里代码</span></span><br><span class="line"><span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">    <span class="comment">//if条件成立时执行的代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//else执行的代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//if里面的语句1和else里面的语句2，最终只能有一个语句被执行 2选1</span></span><br><span class="line"><span class="comment">//else后面直接跟大括号</span></span><br></pre></td></tr></table></figure><h3 id="案例：进入网吧"><a href="#案例：进入网吧" class="headerlink" title="案例：进入网吧"></a>案例：进入网吧</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//弹出prompt警示框，用户输入年龄，存入变量age</span></span><br><span class="line"><span class="comment">//使用if语句判断年龄，如年龄大于等于18，执行括号里内容</span></span><br><span class="line"><span class="keyword">var</span> age = prompt(<span class="string">&#x27;请输入您的年龄&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span>(age &gt;= <span class="number">18</span>)&#123;</span><br><span class="line">    alert(<span class="string">&#x27;我想带你去网吧&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;滚&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="案例：判断闰年"><a href="#案例：判断闰年" class="headerlink" title="案例：判断闰年"></a>案例：判断闰年</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//算法：能被四整除且不能被100整除的为闰年 或着 能被400整除的是闰年</span></span><br><span class="line"><span class="comment">//弹出prompt输入框，输入年份存入白能量</span></span><br><span class="line"><span class="comment">//使用if语句判断</span></span><br><span class="line"><span class="comment">//注意&amp;&amp; 还有|| ，同时注意判断整除的方法是取余为0</span></span><br><span class="line"><span class="keyword">var</span> year = prompt(<span class="string">&#x27;请输入年份&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span> || year % <span class="number">400</span> == <span class="number">0</span>)&#123;</span><br><span class="line">    alert(<span class="string">&#x27;您输入的年份是闰年&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;您输入的年份是平年&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="「if-else-if-语句（多分支语句）」"><a href="#「if-else-if-语句（多分支语句）」" class="headerlink" title="「if else if 语句（多分支语句）」"></a><strong>「if else if 语句（多分支语句）」</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.多分支语句，就是利用多个条件来选择不同的语句执行，得到不同的结果，多选一的过程</span></span><br><span class="line"><span class="comment">//2.if else if语句是多分支语句</span></span><br><span class="line"><span class="comment">//3.语法规范</span></span><br><span class="line"><span class="keyword">if</span>(条件表达式<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="comment">//语句1;</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(条件表达式<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="comment">//语句2;</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(条件表达式<span class="number">3</span>)&#123;</span><br><span class="line">    <span class="comment">//语句3;</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//最后的语句;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4.执行思路</span></span><br><span class="line"><span class="comment">/*如果条件表达式1满足就执行语句1，执行完毕后，退出整个if分支语句</span></span><br><span class="line"><span class="comment">如果条件表达式1不满足，则判断条件表达式2，满足的话执行语句2，以此类推</span></span><br><span class="line"><span class="comment">如果上面条件都不满足，则执行else里的语句</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//5.注意点</span></span><br><span class="line"><span class="comment">/* 多分支语句是多选一，最后只能有一个语句被执行</span></span><br><span class="line"><span class="comment">else if 理论上可以是任意多个</span></span><br><span class="line"><span class="comment"></span></span><br></pre></td></tr></table></figure><h3 id="案例：判断成绩"><a href="#案例：判断成绩" class="headerlink" title="案例：判断成绩"></a>案例：判断成绩</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//(伪代码) 按从大到小的顺序</span></span><br><span class="line"><span class="comment">//弹出prompt输入框，让用户输入分数保存在变量中</span></span><br><span class="line"><span class="comment">//使用if else if多分支判断</span></span><br><span class="line"><span class="keyword">var</span> score = prompt(<span class="string">&#x27;请输入成绩&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(score &gt;= <span class="number">90</span>)&#123;</span><br><span class="line">    alert(<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(score &gt;= <span class="number">80</span>)&#123;</span><br><span class="line">    alert(<span class="string">&#x27;B&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(score &gt;= <span class="number">70</span>)&#123;</span><br><span class="line">    alert(<span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(score &gt;= <span class="number">60</span>)&#123;</span><br><span class="line">    alert(<span class="string">&#x27;D&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;E&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="「三元表达式」"><a href="#「三元表达式」" class="headerlink" title="「三元表达式」"></a><strong>「三元表达式」</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.有三个运算符组成的式子我们成为三元表达式</span></span><br><span class="line"><span class="comment">//2.++num  3+5  ? :</span></span><br><span class="line"><span class="comment">//3.语法结构</span></span><br><span class="line">条件表达式?表达式<span class="number">1</span>:表达式<span class="number">2</span>;</span><br><span class="line"><span class="comment">//4.执行思路</span></span><br><span class="line"><span class="comment">//如果条件表达式结果为真，则返回表达式1的值，如果条件表达式结果为假，则返回表达式2的值</span></span><br><span class="line"><span class="comment">//5.代码体验</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> result = num &gt; <span class="number">5</span> ? <span class="string">&#x27;是的&#x27;</span> : <span class="string">&#x27;不是的&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure><h3 id="案例：数字补0"><a href="#案例：数字补0" class="headerlink" title="案例：数字补0"></a>案例：数字补0</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用户输入0-59之间的一个数字</span></span><br><span class="line"><span class="comment">//如果数字小于10，则在这个数字面前补0，（加0拼接），否则不做操作</span></span><br><span class="line"><span class="comment">//用一个变量接收这个返回值，输出</span></span><br><span class="line"><span class="keyword">var</span> time = prompt(<span class="string">&#x27;请输入一个数字&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> result = time &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + time : time;<span class="comment">//把返回值赋值给第一个变量</span></span><br><span class="line">alert(result);</span><br></pre></td></tr></table></figure><h2 id="「switch分支」"><a href="#「switch分支」" class="headerlink" title="「switch分支」"></a><strong>「switch分支」</strong></h2><p>switch语句也是多分支语句，它用于基于不同的条件来执行不同的代码，当要针对变量设置一系列的特定值的选项时，就可以使用switch</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.switch也是多分支，可以实现多线一</span></span><br><span class="line"><span class="comment">//2.语法结构  switch 转换，开关  case 小例子或选项的意思</span></span><br><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line">    <span class="keyword">case</span> value1:</span><br><span class="line">        执行语句<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> value2:</span><br><span class="line">        执行语句<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">    执行最后的语句;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3.执行思路，利用表达式的值和case后面的选项值相匹配，如果匹配上，就执行该case里面的语句，如果都没有匹配上，则执行default里面的语句</span></span><br><span class="line"><span class="comment">//4.代码验证</span></span><br><span class="line"><span class="keyword">switch</span>(<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;这是1&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;这是2&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;这是3&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;无匹配结果&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="switch注意事项"><a href="#switch注意事项" class="headerlink" title="switch注意事项"></a>switch注意事项</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">switch</span>(num)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;无匹配&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1.开发里面，表达式经常写成变量</span></span><br><span class="line"><span class="comment">//2.num和case里值相匹配的时候要求全等，必须数值和数据类型一致才可以 num === 1</span></span><br><span class="line"><span class="comment">//3.break 如果当前case没有break，则不会退出switch，而是继续执行下一个case</span></span><br></pre></td></tr></table></figure><h3 id="案例：查询水果案例"><a href="#案例：查询水果案例" class="headerlink" title="案例：查询水果案例"></a>案例：查询水果案例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//弹出prompt输入框，输入水果名称存入变量</span></span><br><span class="line"><span class="comment">//将这个变量作为switch括号内的表达式</span></span><br><span class="line"><span class="comment">//case后面的值写几个不同水果的名称，注意一定要加引号，因为必须时全等匹配</span></span><br><span class="line"><span class="comment">//弹出不同价格即可，注意每个case后面的break语句</span></span><br><span class="line"><span class="comment">//将default设置成无此水果</span></span><br><span class="line"><span class="keyword">var</span> frult = prompt(<span class="string">&#x27;请输入查询的水果&#x27;</span>);</span><br><span class="line"><span class="keyword">switch</span>(frult)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;苹果&#x27;</span>:</span><br><span class="line">        alert(<span class="string">&#x27;苹果的价格是3.5&#x27;</span>)；</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;榴莲&#x27;</span>:</span><br><span class="line">        alert(<span class="string">&#x27;榴莲的价格是35&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        alert(<span class="string">&#x27;无此水果&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="switch和if-else-if的区别"><a href="#switch和if-else-if的区别" class="headerlink" title="switch和if..else..if的区别"></a>switch和if..else..if的区别</h3><ol><li><p>一般情况下，可以互相替换</p></li><li><p>switch…case通常处理case比较确定的值的情况，而if…else…if更加灵活常用于范围判断</p></li><li><p>switch语句进行条件判断后直接执行条件语句，效率更高，而if else if有多少条件就要判断多少次</p></li><li><p>当分支较少时，if…else执行效率比switch高</p></li><li><p>当分支较多时，switch语句执行效率比较高，且结构清晰</p></li></ol><h1 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a><strong>循环结构</strong></h1><p>js中主要由三种类型的循环语句</p><ul><li>for循环</li><li>while循环</li><li>do..while循环</li></ul><h2 id="「for循环」"><a href="#「for循环」" class="headerlink" title="「for循环」"></a><strong>「for循环」</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.for循环重复执行某些代码，通常跟计数有关</span></span><br><span class="line"><span class="comment">//2.for循环语法结构</span></span><br><span class="line"><span class="keyword">for</span>(初始化变量;条件表达式;操作表达式)&#123;</span><br><span class="line">    循环体;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3.初始化变量 就是用var声明的一个普通变量，通常用作计数器使用</span></span><br><span class="line"><span class="comment">//4.条件表达式 就是用来决定每一次循环是否继续执行 ，就是终止的条件</span></span><br><span class="line"><span class="comment">//5.操作表达式 是每次循环最后执行的代码 经常用于我们计数器变量的更新（递增或者递减）</span></span><br><span class="line"><span class="comment">//6.代码体验</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;你好吗&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for循环执行过程</p><ol><li>初始化变量，初始化操作在整个 for 循环只会执行一次。</li><li>执行条件表达式，如果为true，则执行循环体语句，否则退出循环，循环结束。</li><li>执行操作表达式,此时第一轮结束。</li><li>第二轮开始，直接去执行条件表达式（不再初始化变量），如果为 true ，则去执行循环体语句，否则退出循环。</li><li>继续执行操作表达式，第二轮结束。……</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//for循环执行相同代码</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;我错了&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//让用户控制输出次数</span></span><br><span class="line"><span class="keyword">var</span> num = prompt(<span class="string">&#x27;输入循环次数&#x27;</span>);</span><br><span class="line"><span class="function"><span class="title">var</span>(<span class="params"><span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= num; i++</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;我错了&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//for循环可以重复执行不同的代码 因为我们有计数器变量i的存在 i每次循环值都会变化</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;这个人今年1岁了，他出生了&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">100</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;这个人今年100岁了，他死了&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;这个人今年&#x27;</span> + i + <span class="string">&#x27;岁了&#x27;</span>);<span class="comment">//字符串与数字拼接</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="案例：for循环求1-100累加和案例"><a href="#案例：for循环求1-100累加和案例" class="headerlink" title="案例：for循环求1-100累加和案例"></a>案例：for循环求1-100累加和案例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要循环100次，我们需要一个计数器i</span></span><br><span class="line"><span class="comment">//需要一个储存结果的变量sum，初始值为0</span></span><br><span class="line"><span class="comment">//核心算法：1+2+3+4+...，sum = sum + i</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">    sum = sum + i;</span><br><span class="line">    <span class="comment">//sum += i;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="案例：for循环求1-100平均值"><a href="#案例：for循环求1-100平均值" class="headerlink" title="案例：for循环求1-100平均值"></a>案例：for循环求1-100平均值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> average = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">    sum += i;</span><br><span class="line">&#125;</span><br><span class="line">average = sum / <span class="number">100</span>;</span><br><span class="line"><span class="built_in">console</span>.log(average);</span><br></pre></td></tr></table></figure><h3 id="案例：求1-100所有奇数和偶数的和"><a href="#案例：求1-100所有奇数和偶数的和" class="headerlink" title="案例：求1-100所有奇数和偶数的和"></a>案例：求1-100所有奇数和偶数的和</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> even = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> odd = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">2</span> = <span class="number">0</span>) &#123;</span><br><span class="line">        even += i;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        odd += i;</span><br><span class="line">    &#125;     </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;1-100之间所有的偶数的和是&#x27;</span> + even);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;1-100之间所有的奇数的和是&#x27;</span> + odd);</span><br></pre></td></tr></table></figure><h3 id="案例：求1-100所有能被3整除的数字的和"><a href="#案例：求1-100所有能被3整除的数字的和" class="headerlink" title="案例：求1-100所有能被3整除的数字的和"></a>案例：求1-100所有能被3整除的数字的和</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">3</span> = <span class="number">0</span>) &#123;</span><br><span class="line">        result += i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;1-100之前能够被3整除的数字的和是&#x27;</span> + result);</span><br></pre></td></tr></table></figure><h3 id="案例：求学生成绩案例"><a href="#案例：求学生成绩案例" class="headerlink" title="案例：求学生成绩案例"></a>案例：求学生成绩案例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//弹出输入框输入总的班级人数（num)</span></span><br><span class="line"><span class="comment">//依次输入学生成绩（保存起来 score），此时用到for循环</span></span><br><span class="line"><span class="comment">//for循环，弹出的次数跟输入的班级总人数有关系，条件表达式 i &lt;= num</span></span><br><span class="line"><span class="comment">//进行业务处理：计算成绩，先求总成绩（sum），之后求平均成绩（average）</span></span><br><span class="line"><span class="comment">//弹出结果</span></span><br><span class="line"><span class="keyword">var</span> num = prompt(<span class="string">&#x27;请输入班级总人数：&#x27;</span>); <span class="comment">// num 班级总人数</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>; <span class="comment">// 求和的变量sum</span></span><br><span class="line"><span class="keyword">var</span> average = <span class="number">0</span>; <span class="comment">// 平均值的变量average</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= num; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> score = prompt(<span class="string">&#x27;请输入第&#x27;</span> + i + <span class="string">&#x27;个学生成绩&#x27;</span>);</span><br><span class="line">    <span class="comment">// 因为从prompt取过来的数都是字符串型的，需要转换成数字型</span></span><br><span class="line">    sum = sum + <span class="built_in">parseFloat</span>(score);</span><br><span class="line">&#125;</span><br><span class="line">average = sum / num;</span><br><span class="line">alert(<span class="string">&#x27;班级总成绩是&#x27;</span> + sum);</span><br><span class="line">alert(<span class="string">&#x27;班级平均分是&#x27;</span> + average);</span><br></pre></td></tr></table></figure><h3 id="案例：一行打印5个星星"><a href="#案例：一行打印5个星星" class="headerlink" title="案例：一行打印5个星星"></a>案例：一行打印5个星星</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一行打印5个星星(不能全部显示)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果一行全部展示出星星，采用拼接字符串型</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    str = str + <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line"><span class="comment">//自定义输出个数</span></span><br><span class="line"><span class="keyword">var</span> num = prompt(<span class="string">&#x27;请输入星星的个数&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= num; i++)&#123;</span><br><span class="line">    str = str + <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure><h2 id="「双重for循环」"><a href="#「双重for循环」" class="headerlink" title="「双重for循环」"></a><strong>「双重for循环」</strong></h2><p>循环嵌套是指在一个循环语句中再定义一个循环语句的语法结构，例如在for循环语句中，可以再嵌套一个for 循环，这样的 for 循环语句我们称之为双重for循环。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.双重for循环语法结构</span></span><br><span class="line"><span class="keyword">for</span> (外层初始化变量; 外层条件表达式; 外层操作表达式) &#123;</span><br><span class="line">    <span class="keyword">for</span> (里层初始化变量; 里层条件表达式; 里层操作表达式)&#123;</span><br><span class="line">        <span class="comment">//执行语句</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.我们可以把里面的循环看作是外层循环的语句</span></span><br><span class="line"><span class="comment">//3.外层循环循环一次，里面的循环执行全部</span></span><br><span class="line"><span class="comment">//4.代码验证</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;这是外层循环第&#x27;</span> + i + <span class="string">&#x27;次&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt;= <span class="number">3</span>; j++) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;这是内层循环第&#x27;</span> + j + <span class="string">&#x27;次&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="案例：打印5行5列星星"><a href="#案例：打印5行5列星星" class="headerlink" title="案例：打印5行5列星星"></a>案例：打印5行5列星星</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//内层循环负责一行打印5个星星</span></span><br><span class="line"><span class="comment">//外层循环负责打印5行</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123; <span class="comment">//外层负责打印5行</span></span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">var</span> j = <span class="number">1</span>; j &lt;= <span class="number">5</span>; j++)&#123; <span class="comment">// 内层负责一行打印5个星星</span></span><br><span class="line">        str = str + <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//一行打完5个星星需要另起一行，加 \n</span></span><br><span class="line">    str = str + <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure><h3 id="案例：打印n行n列星星"><a href="#案例：打印n行n列星星" class="headerlink" title="案例：打印n行n列星星"></a>案例：打印n行n列星星</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打印n行n列</span></span><br><span class="line"><span class="keyword">var</span> rows = prompt(<span class="string">&#x27;请您输入行数&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> cols = prompt(<span class="string">&#x27;请您输入列数&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= rows; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt;= cols; j++) &#123;</span><br><span class="line">        str = str + <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    str += <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure><h3 id="案例：打印倒三角"><a href="#案例：打印倒三角" class="headerlink" title="案例：打印倒三角"></a>案例：打印倒三角</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打印倒三角</span></span><br><span class="line"><span class="comment">//核心算法：j = i; j &lt;= 10; j++</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123; <span class="comment">//外层控制行数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = i; j &lt;= <span class="number">10</span>; j++) &#123; <span class="comment">//内层循环打印个数不一样 j = i</span></span><br><span class="line">        str = str + <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    str += <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure><h3 id="案例：打印九九乘法表"><a href="#案例：打印九九乘法表" class="headerlink" title="案例：打印九九乘法表"></a>案例：打印九九乘法表</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//九九乘法表</span></span><br><span class="line"><span class="comment">//一共有9行，但每行个数不一样，因此用到双重for循环</span></span><br><span class="line"><span class="comment">//外层for循环控制行数i，循环9次，可以打印9行</span></span><br><span class="line"><span class="comment">//内层for循环控制每行公式 j</span></span><br><span class="line"><span class="comment">//核心算法：每一行公式的个数正好和行数一样， j &lt;= i</span></span><br><span class="line"><span class="comment">//每行打印完毕都需要重新换行</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123; <span class="comment">//外层控制行数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123; <span class="comment">//内层控制每一行个数 j &lt;= i</span></span><br><span class="line">        <span class="comment">//1 × 2 = 2</span></span><br><span class="line">        <span class="comment">//str = str + &#x27;#&#x27;</span></span><br><span class="line">        str += j + <span class="string">&#x27;×&#x27;</span> + i + <span class="string">&#x27;=&#x27;</span> + i * j + <span class="string">&#x27;\t&#x27;</span>; <span class="comment">//字符串拼接</span></span><br><span class="line">    &#125;</span><br><span class="line">    str += <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="「while循环」"><a href="#「while循环」" class="headerlink" title="「while循环」"></a><strong>「while循环」</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.while循环语法结构  （while 当...时候）</span></span><br><span class="line"><span class="keyword">while</span> (条件表达式) &#123;</span><br><span class="line">    <span class="comment">//循环体</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.执行思路，当条件表达式结果为true时，则执行循环体，否则退出循环</span></span><br><span class="line"><span class="comment">//3.代码验证</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (num &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;循环&#x27;</span>);</span><br><span class="line">    num++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4.里面需要添加计数器，初始化变量</span></span><br><span class="line"><span class="comment">//5.里面也需要操作表达式，完成计数器的更新，防止死循环</span></span><br></pre></td></tr></table></figure><h3 id="案例：打印人的一生"><a href="#案例：打印人的一生" class="headerlink" title="案例：打印人的一生"></a>案例：打印人的一生</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;这个人今年&#x27;</span> + i + <span class="string">&#x27;岁了&#x27;</span>);</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="案例：计算1-100整数的和"><a href="#案例：计算1-100整数的和" class="headerlink" title="案例：计算1-100整数的和"></a>案例：计算1-100整数的和</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> j = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (j &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">    sum += j;</span><br><span class="line">    j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> message = prompt(<span class="string">&#x27;你爱我吗&#x27;</span>);</span><br><span class="line"><span class="keyword">while</span> (message !== <span class="string">&#x27;我爱你&#x27;</span>) &#123;</span><br><span class="line">    message = prompt(<span class="string">&#x27;你爱我吗&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">alert(<span class="string">&#x27;我也爱你&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="「do-while循环」"><a href="#「do-while循环」" class="headerlink" title="「do while循环」"></a><strong>「do while循环」</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.do while语法结构</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">//循环体</span></span><br><span class="line">&#125; <span class="keyword">while</span> (条件表达式)</span><br><span class="line"><span class="comment">//2.执行思路，跟while不同的地方在于，do while先执行一次循环体，然后在判断条件，如果条件结果为真则继续执行循环体，否则退出循环</span></span><br><span class="line"><span class="comment">//3.代码验证</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;你好吗&#x27;</span>);</span><br><span class="line">    i++;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt;= <span class="number">100</span>);</span><br><span class="line"><span class="comment">//4.do while循环体至少执行一次</span></span><br></pre></td></tr></table></figure><h3 id="案例：打印人的一生-1"><a href="#案例：打印人的一生-1" class="headerlink" title="案例：打印人的一生"></a>案例：打印人的一生</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;这个人今年&#x27;</span> + i + <span class="string">&#x27;岁了&#x27;</span>);</span><br><span class="line">    i++;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt;= <span class="number">100</span>)</span><br></pre></td></tr></table></figure><h3 id="案例：计算1-100所有整数的和"><a href="#案例：计算1-100所有整数的和" class="headerlink" title="案例：计算1-100所有整数的和"></a>案例：计算1-100所有整数的和</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> j = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    sum += j;</span><br><span class="line">    j++;</span><br><span class="line">&#125; <span class="keyword">while</span>(j &lt;= <span class="number">100</span>)</span><br><span class="line"><span class="built_in">console</span>.log(sum)</span><br></pre></td></tr></table></figure><h2 id="「continue、break」"><a href="#「continue、break」" class="headerlink" title="「continue、break」"></a><strong>「continue、break」</strong></h2><ol><li><p>  <code>continue</code> 关键字用于立即跳出本次循环，继续下一次循环（本次循环体中 continue 之后的代码就会少执行一次）。</p></li><li><p>  <code>break</code> 关键字用于立即跳出整个循环（循环结束）。</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//continue关键字 退出本次循环（当前次循环），继续执行剩余次数循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;<span class="comment">//只要遇见continue就退出本次循环，直接跳到i++</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;我正在吃第&#x27;</span> + i + <span class="string">&#x27;个包子&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="案例：求1-100之间，除了能被7整除之外的整数和"><a href="#案例：求1-100之间，除了能被7整除之外的整数和" class="headerlink" title="案例：求1-100之间，除了能被7整除之外的整数和"></a>案例：求1-100之间，除了能被7整除之外的整数和</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">7</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sum += i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//break退出整个循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>;<span class="comment">//退出整个循环</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;我正在吃第&#x27;</span> + i + <span class="string">&#x27;个包子&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a><strong>代码规范</strong></h1><ol><li>标识符命名规范</li></ol><ul><li>变量、函数的命名必须要有意义</li><li>变量的名称一般用名词</li><li>函数的名称一般用动词</li></ul><ol start="2"><li><p>操作符规范</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 操作符的左右两侧各保留一个空格</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">      <span class="keyword">break</span>; <span class="comment">// 直接退出整个 for 循环，跳到整个for循环下面的语句</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;我正在吃第&#x27;</span> + i + <span class="string">&#x27;个包子呢&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>单行注释规范</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">      <span class="keyword">break</span>; <span class="comment">// 单行注释前面注意有个空格</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;我正在吃第&#x27;</span> + i + <span class="string">&#x27;个包子呢&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>其他规范</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//关键词 操作符空格</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;=<span class="number">10</span>; i++) &#123;&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小白的前端之路 </tag>
            
            <tag> JavaScript基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS定位</title>
      <link href="/%E5%89%8D%E7%AB%AF/CSS%E5%AE%9A%E4%BD%8D/"/>
      <url>/%E5%89%8D%E7%AB%AF/CSS%E5%AE%9A%E4%BD%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="定位基础"><a href="#定位基础" class="headerlink" title="定位基础"></a>定位基础</h1><p>定位就是将盒子定在某一位置，定位=定位模式+位偏移。</p><p><strong>定位模式</strong>和<strong>位偏移</strong>都属于属性</p><ul><li>定位模式用于指定一个元素在文档中的定位方式</li><li>边偏移就是决定该元素的最终位置。</li></ul><p>定位模式由position属性设置，属性值分为四个</p><table><thead><tr><th>属性</th><th>属性值</th><th>语义</th></tr></thead><tbody><tr><td>position</td><td>static</td><td>静态定位</td></tr><tr><td></td><td>relative</td><td>相对定位</td></tr><tr><td></td><td>absolute</td><td>绝对定位</td></tr><tr><td></td><td>fixed</td><td>固定定位</td></tr><tr><td></td><td>sticky</td><td>粘性定位</td></tr></tbody></table><p>边偏移有四个属性 top left right bottom</p><table><thead><tr><th>属性</th><th>属性值示例</th><th>描述</th></tr></thead><tbody><tr><td>top</td><td>top: 50px;</td><td>顶端偏移量，定义元素相对于其父元素上边线的距离</td></tr><tr><td>bottom</td><td>bottom: 50px;</td><td>下端偏移量，定义元素相对于其父元素下边线的距离</td></tr><tr><td>left</td><td>left: 50px;</td><td>左端偏移量，定义元素相对于其父元素左边线的距离</td></tr><tr><td>right</td><td>right: 50px</td><td>右端偏移量，定义元素相对于其父元素右边线的距离</td></tr></tbody></table><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">选择器 &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">top</span>；<span class="number">0px</span>；</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="「static定位」"><a href="#「static定位」" class="headerlink" title="「static定位」"></a>「static定位」</h2><p>static定位是元素的默认定位方式，无定位的意思，按照标准流的位置，平时很少用到这种</p><h2 id="「relative定位」"><a href="#「relative定位」" class="headerlink" title="「relative定位」"></a>「relative定位」</h2><p>相对定位</p><p><strong>特点：</strong></p><ol><li>元素在移动位置时，相对于它原来的位置来移动的，移动位置时以自身位置为参考点</li><li>不会脱标，继续保留原来标准流的位置，后面盒子仍以标准流对待他</li><li>子绝父相</li></ol><h2 id="「absolute定位」"><a href="#「absolute定位」" class="headerlink" title="「absolute定位」"></a>「absolute定位」</h2><p>绝对定位</p><p><strong>特点：</strong></p><ol><li>移动位置时相对它祖先元素来移动，如果没有祖先元素或者祖先元素没有添加定位，则以浏览器为准定位</li><li>如果祖先元素有定位（相对绝对固定），则以最近一级有定位的祖先元素为参考点</li><li>会脱标，不占有原来的位置</li><li>子绝父相</li></ol><h2 id="「fixed定位」"><a href="#「fixed定位」" class="headerlink" title="「fixed定位」"></a>「fixed定位」</h2><p>固定定位，是固定在浏览器可视区的位置，浏览器滚动时元素位置不改变</p><p><strong>特点：</strong></p><ol><li>以浏览器可视窗口为参考点移动元素，与父元素无关，不随滚动条滚动</li><li>也会脱标，不占有原来的位置，可以看作时特殊的绝对定位</li></ol><h2 id="「sticky定位」"><a href="#「sticky定位」" class="headerlink" title="「sticky定位」"></a>「sticky定位」</h2><p>粘性定位，被认为是相对定位和固定定位的混合</p><p><strong>特点：</strong></p><ol><li>以浏览器可视窗口为参照物（固定特点)</li><li>不会脱标，占有原来的位置（相对特点）</li><li>必须添加边偏移其中一个元素才有效</li><li>跟页面滚动搭配使用，兼容性差</li></ol><h2 id="「子绝父相」"><a href="#「子绝父相」" class="headerlink" title="「子绝父相」"></a>「子绝父相」</h2><p>子元素用绝对定位，父元素用相对定位。可以让子元素固定在父元素里面显示，父元素占有位置</p><h2 id="「CSS小算法」"><a href="#「CSS小算法」" class="headerlink" title="「CSS小算法」"></a>「CSS小算法」</h2><p>固定定位固定在版心右侧位置，多走版心宽度一半位置就可让固定定位盒子贴着版心右侧对齐了</p><ol><li>让固定定位的盒子left:50%，走到版心一半的位置</li><li>让固定定位的盒子margin:left;版心宽度一半的距离</li></ol><h1 id="定位拓展"><a href="#定位拓展" class="headerlink" title="定位拓展"></a>定位拓展</h1><h2 id="「定位叠放次序」"><a href="#「定位叠放次序」" class="headerlink" title="「定位叠放次序」"></a>「定位叠放次序」</h2><p>多个盒子使用定位时，可能会出现重叠，可通过z-index属性来控制盒子前后次序（z轴）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">选择器&#123;</span><br><span class="line"><span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>属性值可以是正整数，负整数，或0。默认是auto，数值越大越靠上</li><li>若属性值相同按书写顺序，后来居上</li><li>数字不加单位</li><li>只有定位的盒子才有z-index 属性</li></ol><h2 id="「定位盒子垂直居中」"><a href="#「定位盒子垂直居中」" class="headerlink" title="「定位盒子垂直居中」"></a>「定位盒子垂直居中」</h2><p>加了定位的盒子不能通过margin: 0 auto;水平居中，需要通过下面算法实现水平和垂直居中</p><ol><li>left: 50%；让盒子左侧移动到父级元素的水平中心位置</li><li>margin-left: 100px; 让盒子向左移动自身宽度的一半</li><li>垂直居中同理</li></ol><h1 id="定位特殊性"><a href="#定位特殊性" class="headerlink" title="定位特殊性"></a>定位特殊性</h1><h2 id="「绝对定位和固定定位和浮动类似」"><a href="#「绝对定位和固定定位和浮动类似」" class="headerlink" title="「绝对定位和固定定位和浮动类似」"></a>「绝对定位和固定定位和浮动类似」</h2><ol><li>行内元素添加绝对或固定后，可以直接设置宽度和高度</li><li>块级元素添加后，如不设置宽度和高度，默认为内容大小</li></ol><h2 id="「脱标盒子不会引发外边距塌陷」"><a href="#「脱标盒子不会引发外边距塌陷」" class="headerlink" title="「脱标盒子不会引发外边距塌陷」"></a>「脱标盒子不会引发外边距塌陷」</h2><p><strong>浮动元素</strong>，<strong>绝对定位</strong>，<strong>固定定位</strong>都不会触发外边距合并问题</p><h2 id="「绝对固定定位会完全压住盒子」"><a href="#「绝对固定定位会完全压住盒子」" class="headerlink" title="「绝对固定定位会完全压住盒子」"></a>「绝对固定定位会完全压住盒子」</h2><ol><li>浮动元素会压住标准流和盒子，但不会压住标准流盒子里面的文字图片</li><li>绝对和固定会压住盒子所有内容</li><li>浮动之所以不会压住文字，是因为浮动最初目的就是做文字环绕效果</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小白的前端之路 </tag>
            
            <tag> CSS基础 </tag>
            
            <tag> CSS三大重点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>括号法解读英语句子</title>
      <link href="/%E8%8B%B1%E8%AF%AD/%E6%8B%AC%E5%8F%B7%E6%B3%95%E8%A7%A3%E8%AF%BB%E8%8B%B1%E8%AF%AD%E5%8F%A5%E5%AD%90/"/>
      <url>/%E8%8B%B1%E8%AF%AD/%E6%8B%AC%E5%8F%B7%E6%B3%95%E8%A7%A3%E8%AF%BB%E8%8B%B1%E8%AF%AD%E5%8F%A5%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<h1 id="括号法解读英语句子"><a href="#括号法解读英语句子" class="headerlink" title="括号法解读英语句子"></a>括号法解读英语句子</h1><h2 id="目标："><a href="#目标：" class="headerlink" title="目标："></a><strong>目标：</strong></h2><ol><li>理解能力：读懂句子</li><li>表达能力：写出句子</li></ol><h2 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识:"></a><strong>基本知识:</strong></h2><ul><li><p>主语：句子描述的对象</p></li><li><p>谓语：用来描述主语</p></li><li><p>谓语动词：谓语部分中的核心的动词；<strong>一个单句有且只有一个谓语动词！</strong></p></li></ul><p>eg:</p><p>李辉教英语</p><p>李辉帅。LiHui is handsome.</p><p>句子=主干结构+修饰结构</p><p><strong>主干结构</strong>：</p><ul><li><p>主谓    I come.</p></li><li><p>主谓宾    I love you.</p></li><li><p>主谓宾宾    I give you my heart.</p></li><li><p>主谓宾补    You make me happy.</p></li><li><p>主系表    You are my everything.</p></li></ul><p><strong>修饰结构：</strong></p><p><strong>短：</strong>                            </p><ul><li><p>形容词    This is a big box.    Let me tell you something interesting.（不定代词）</p></li><li><p>副词    I really love you.</p></li></ul><p><strong>长：</strong>“四朵金花”导致英语语序和中文并不一样！</p><ul><li><p>介词短语    I love you (in my heart).    （介词….名词）</p></li><li><p>从句    LiHui is a teacher (who teaches English).    （引导词+陈述语序）</p></li><li><p>非谓语动词    Lihui is a teacher (teaching English).    (to do)/(doing)/(done)</p></li><li><p>时间状语    (Last week),I went (to the park).    表时间，无介词。</p></li></ul><p>eg：</p><p>Lihui is a teacher (teaching English) (in Beijing) (which is the capital) (of China).</p><p>(After chatting) (with LiHui) (on this matter) (in this room) (for a long time) (from 2:00) (to 4:00) (in the afternoon), I returned (to my office).</p><h2 id="断句！"><a href="#断句！" class="headerlink" title="断句！"></a>断句！</h2><ol><li><p>主干部分直接翻</p></li><li><p>遇到金花画括号</p></li><li><p>提着问题往下顺（每个括号里第一个单词，都叫挂钩单词，可以利用挂钩自问自答，将句子“顺下来”）</p></li><li><p>调字调序写中文（如果需要做翻译题，则需要调整语序；如果想学听说读写，则不必调整语序——要训练自己习惯英语思维顺序）</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript基础</title>
      <link href="/%E5%89%8D%E7%AB%AF/Javascript%E5%9F%BA%E7%A1%80/"/>
      <url>/%E5%89%8D%E7%AB%AF/Javascript%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="Javascript基础"><a href="#Javascript基础" class="headerlink" title="Javascript基础"></a>Javascript基础</h1><h2 id="编程基础"><a href="#编程基础" class="headerlink" title="编程基础"></a>编程基础</h2><p><strong>「计算机语言」</strong>分为机器语言，汇编语言，高级语言。计算机内部最终执行的都是机器语言，由<code>0</code>和<code>1</code>这样的二进制数构成。</p><p><strong>「数据存储单位」</strong>8bit(比特) = 1B(Byte)字节  千字节1KB = 1024B</p><p><strong>「翻译器」</strong>高级语言编写的程序不能被计算机识别，需要经过转换，将源代码程序翻译成<code>机器语言</code>才能运行。浏览器里面的js解释器就是这样的一个翻译器。</p><p><strong>「程序运行」</strong></p><ul><li>打开某个程序时，先从硬盘中把程序的代码加载到内存中</li><li>CPU执行内存中的代码</li><li>注意：之所以要内存的一个重要原因，是因为 cpu运行太快了，如果只从硬盘中读数据，会浪费cpu性能，所以，才使用存取速度更快的内存来保存运行时的数据。（内存是电，硬盘是机械）</li></ul><h2 id="初识JavaScript"><a href="#初识JavaScript" class="headerlink" title="初识JavaScript"></a>初识JavaScript</h2><p><strong>「创始人」</strong>布兰登·艾奇(Brendan Eich),起初命名为<code>LiveScript</code>后来与Sun公司合作改名为<code>JavaScript</code>。</p><p><strong>「JavaScript」</strong>运行在客户端的脚本语言，不需要编译，由js解释器(js引擎)逐行解释执行。Node.js也可以用于服务器端编程。</p><p><strong>「JavaScript组成」</strong>ECMAScript(JavaScript语法)、DOM(文档对象模型)、BOM(浏览器对象模型)</p><p><strong>「JavaScript的作用」</strong></p><ul><li>表单动态校验(密码强度检测)</li><li>网页特效</li><li>服务端开发(Node.js)</li><li>桌面程序(Electron)、App(Cordova)、控制硬件-物联网(Ruff)、游戏开发(cocos2d-js)</li></ul><p><strong>「JavaScript书写位置」</strong></p><blockquote><p>JS有3种书写位置，分别为行内、内嵌和外部。</p></blockquote><ol><li><p>行内</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;botton&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点我试试&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;Helo World!&#x27;)&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>内嵌</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">alret(<span class="string">&#x27;Hello World!&#x27;</span>);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>外部</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">引用外部js文件</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;my.js&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br></pre></td></tr></table></figure></li></ol><p><strong>「注释」</strong></p><ol><li><p>单行注释</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我是单行注释 （ctrl + /）</span></span><br></pre></td></tr></table></figure></li><li><p>多行注释</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  获取用户年龄和姓名</span></span><br><span class="line"><span class="comment">  并通过提示框显示出来</span></span><br><span class="line"><span class="comment">  点击vscode左下角管理-键盘快捷方式-切换块注释</span></span><br><span class="line"><span class="comment">  (默认快捷键 alt + shift + a) 修改为 (ctrl + shift + /)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="输入和输出语句"><a href="#输入和输出语句" class="headerlink" title="输入和输出语句"></a>输入和输出语句</h2><table><thead><tr><th>函数</th><th>说明</th><th>归属</th></tr></thead><tbody><tr><td>prompt(‘输入’);</td><td>浏览器弹出输入框</td><td>浏览器</td></tr><tr><td>alert(‘输出’);</td><td>浏览器弹出警示框</td><td>浏览器</td></tr><tr><td>console.log(‘控制台输出’)</td><td>浏览器控制台打印输出信息</td><td>浏览器</td></tr></tbody></table></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">//输入框</span></span></span><br><span class="line"><span class="javascript">    prompt(<span class="string">&#x27;请输入&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">//弹出警示框，输出的展示给用户</span></span></span><br><span class="line"><span class="javascript">    alert(<span class="string">&#x27;计算的结果是&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">//控制台输出，给程序员测试用</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;控制台显示&#x27;</span>);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="变量概述"><a href="#变量概述" class="headerlink" title="变量概述"></a><strong>变量概述</strong></h2><p>变量是程序在内存中申请的一块用于存放数据的空间。变量是用于存放数据的容器，可以通过变量名获取数据，甚至修改数据。</p><p>白话讲，变量就是一个装东西的盒子。</p><h2 id="变量的使用"><a href="#变量的使用" class="headerlink" title="变量的使用"></a>变量的使用</h2><p>变量在使用时分为两步，声明和赋值</p><h3 id="「1-声明变量」"><a href="#「1-声明变量」" class="headerlink" title="「1. 声明变量」"></a><strong>「1. 声明变量」</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明变量</span></span><br><span class="line"><span class="keyword">var</span> age; <span class="comment">//声明一个名称为age的变量</span></span><br></pre></td></tr></table></figure><p>var是一个JS关键字，用来声明变量(variable变量的意思)。num是我们定义的变量名，可以通过变量名来访问内存中分配的空间。</p><h3 id="「2-赋值」"><a href="#「2-赋值」" class="headerlink" title="「2. 赋值」"></a><strong>「2. 赋值」</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">10</span>;<span class="comment">//给age变量赋值为10</span></span><br></pre></td></tr></table></figure><h3 id="「3-变量的初始化」"><a href="#「3-变量的初始化」" class="headerlink" title="「3. 变量的初始化」"></a><strong>「3. 变量的初始化」</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">10</span>;<span class="comment">//声明变量并赋值为10</span></span><br></pre></td></tr></table></figure><h3 id="小案例"><a href="#小案例" class="headerlink" title="小案例"></a>小案例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明</span></span><br><span class="line"><span class="keyword">var</span> age;</span><br><span class="line"><span class="comment">//赋值</span></span><br><span class="line">age=<span class="number">10</span>;</span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line"><span class="built_in">console</span>.log(age);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用户输入姓名，存到一个myname的变量中</span></span><br><span class="line"><span class="keyword">var</span> myname=prompt(<span class="string">&#x27;请输入你的名字&#x27;</span>)；</span><br><span class="line"><span class="comment">//输出这个用户名</span></span><br><span class="line">alert(myname);</span><br></pre></td></tr></table></figure><h3 id="「4-变量语法扩展」"><a href="#「4-变量语法扩展」" class="headerlink" title="「4. 变量语法扩展」"></a><strong>「4. 变量语法扩展」</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.一个变量被重新赋值后，它原有的值会被覆盖掉，变量值以最后一次赋的值为准。</span></span><br><span class="line"><span class="keyword">var</span> age=<span class="number">10</span>;</span><br><span class="line">age=<span class="number">18</span>;</span><br><span class="line"><span class="comment">// 2.同时声明多个变量(只需要写一个var,多个变量名之间用英文逗号隔开)</span></span><br><span class="line"><span class="keyword">var</span> num=<span class="number">10</span>,age=<span class="number">18</span>,name=<span class="string">&#x27;name&#x27;</span>;</span><br></pre></td></tr></table></figure><p>声明变量特殊情况</p><table><thead><tr><th>情况</th><th>说明</th><th>结果</th></tr></thead><tbody><tr><td>var age; console.log(age);</td><td>只声明，不赋值</td><td>undefined</td></tr><tr><td>console.log(age);</td><td>不声明，不赋值，直接使用</td><td>报错</td></tr><tr><td>age=10;console.log(age);</td><td>不声明，只赋值</td><td>10</td></tr></tbody></table><h3 id="「5-变量命名规范」"><a href="#「5-变量命名规范」" class="headerlink" title="「5. 变量命名规范」"></a><strong>「5. 变量命名规范」</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202205302255403.png"></p><h3 id="小案例-1"><a href="#小案例-1" class="headerlink" title="小案例"></a>小案例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//小案例，交换两个变量的值</span></span><br><span class="line"><span class="keyword">var</span> temp;<span class="comment">//引入临时变量</span></span><br><span class="line"><span class="keyword">var</span> apple1=<span class="string">&#x27;青苹果&#x27;</span>,apple2=<span class="string">&#x27;红苹果&#x27;</span>；</span><br><span class="line">temp=apple1;</span><br><span class="line">apple1=apple2;</span><br><span class="line">apple2=temp;</span><br><span class="line"><span class="built_in">console</span>.log(apple1);</span><br><span class="line"><span class="built_in">console</span>.log(apple2);</span><br></pre></td></tr></table></figure><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>分为两类：简单数据类型(Number,String,Boolean,Undefined,Null)和复杂数据类型(object)。</p><table><thead><tr><th>简单数据类型</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td>Number</td><td>数字型，包含整数和浮点数</td><td>0</td></tr><tr><td>String</td><td>字符串类型</td><td>“ ”</td></tr><tr><td>Boolean</td><td>布尔值类型</td><td>false</td></tr><tr><td>Undefined</td><td>声明但不赋值，a=undefined</td><td>undefined</td></tr><tr><td>Null</td><td>var a=null; 声明a为空值</td><td>null</td></tr></tbody></table><h2 id="Number数字型"><a href="#Number数字型" class="headerlink" title="Number数字型"></a>Number数字型</h2><h3 id="「数字型进制」"><a href="#「数字型进制」" class="headerlink" title="「数字型进制」"></a><strong>「数字型进制」</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.在JS中八进制前面加0，十六进制前面加 0x</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">07</span>;   <span class="comment">// 对应十进制的7</span></span><br><span class="line"><span class="comment">// 2.十六进制数字序列范围：0~9以及A~F</span></span><br><span class="line"> <span class="keyword">var</span> num = <span class="number">0xA</span>; <span class="comment">//对应十进制10</span></span><br></pre></td></tr></table></figure><h3 id="「数字型范围」"><a href="#「数字型范围」" class="headerlink" title="「数字型范围」"></a><strong>「数字型范围」</strong></h3><p>JavaScript中的数值有最大值和最小值</p><ul><li>最大值:<code>Number.MAX_VALUE</code>，值为：1.7976931348623157e+308</li><li>最小值:<code>Number.MIN_VALUE</code>，值为：5e-32</li><li>特殊值：<code>Infinity</code> 无穷大 <code>-Infinity</code> 无穷小 <code>NaN</code> 代表一个非数字（not a number）</li><li>isNaN(): 用来判断一个变量是否为非数字的类型。非数字型为true,数字型为false。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.MAX_VALUE);<span class="comment">//数字的最大值</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.MIN_VALUE);<span class="comment">//数字的最小值</span></span><br><span class="line"><span class="comment">//无穷大</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.MAX_VALUE*<span class="number">2</span>);<span class="comment">//Infinity 无穷大</span></span><br><span class="line"><span class="comment">//无穷小</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.MIN_VALUE*<span class="number">2</span>);<span class="comment">//-Infinity 无穷小</span></span><br><span class="line"><span class="comment">//非数字</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;pink老师&#x27;</span>-<span class="number">100</span>)；<span class="comment">//NaN</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> usrage = <span class="number">21</span>;</span><br><span class="line"><span class="keyword">var</span> isOK = <span class="built_in">isNaN</span>(usrage);</span><br><span class="line"><span class="built_in">console</span>.log(isOK); <span class="comment">//false 21不是一个非数字</span></span><br><span class="line"><span class="keyword">var</span> usrname = <span class="string">&quot;andy&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(usrname));<span class="comment">//true &quot;andy&quot;是一个非数字</span></span><br></pre></td></tr></table></figure><h2 id="String字符串型"><a href="#String字符串型" class="headerlink" title="String字符串型"></a>String字符串型</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.字符串型可以是引号中的任意文本，语法为 单引号 和 双引号</span></span><br><span class="line"><span class="keyword">var</span> msg = <span class="string">&#x27;我的名字叫&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;fan&quot;</span>;</span><br></pre></td></tr></table></figure><p>由于HTML标签属性是双引号，这里推荐使用单引号，常见错误未使用引号，会被认定是js代码，但js没有这些语法。</p><h3 id="「字符串引号嵌套」"><a href="#「字符串引号嵌套」" class="headerlink" title="「字符串引号嵌套」"></a><strong>「字符串引号嵌套」</strong></h3><p>js可以使用单引号套双引号，或者使用双引号套单引号（外双内单，外单内双）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1=<span class="string">&quot;我是&#x27;程序员&#x27;&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> str2=<span class="string">&#x27;我是&quot;程序员&quot;&#x27;</span>;</span><br><span class="line"><span class="comment">//常见错误</span></span><br><span class="line"><span class="keyword">var</span> str3=<span class="string">&#x27;我是程序员&quot;;//报错，不能单双引号搭配</span></span><br></pre></td></tr></table></figure><h3 id="「1-字符串转义符」"><a href="#「1-字符串转义符」" class="headerlink" title="「1. 字符串转义符」"></a><strong>「1. 字符串转义符」</strong></h3><p>都是以 \ 开头，详细如下</p><table><thead><tr><th>转义符</th><th>说明</th></tr></thead><tbody><tr><td>\n</td><td>换行符，n是newline的意思</td></tr><tr><td>\ \</td><td>斜杠\</td></tr><tr><td>\ ‘</td><td>单引号‘</td></tr><tr><td>\ “</td><td>双引号 “</td></tr><tr><td>\t</td><td>tab缩进</td></tr><tr><td>\b</td><td>空格，b是blank 的意思</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字符串转义字符，都是\开头，写在引号里面</span></span><br><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;我是\n程序员&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure><h3 id="「2-字符串长度」"><a href="#「2-字符串长度」" class="headerlink" title="「2. 字符串长度」"></a><strong>「2. 字符串长度」</strong></h3><p>  字符串是由若干字符组成的，这些字符的数量就是字符串的长度，通过length属性可以获取整个字符串长度。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&#x27;我是程序员&#x27;</span>;</span><br><span class="line">alert(str.length);<span class="comment">//显示5</span></span><br></pre></td></tr></table></figure><h3 id="「3-字符串拼接」"><a href="#「3-字符串拼接」" class="headerlink" title="「3. 字符串拼接」"></a><strong>「3. 字符串拼接」</strong></h3><ul><li>  多个字符串之间可以使用 + 进行拼接，其拼接方式为 字符串 + 任何类型 = 拼接之后的新字符串。</li><li>  拼接前会把与字符串相加的任何类型转成字符串，再拼接成一个新的字符串</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.1 字符串 &quot;相加&quot;</span></span><br><span class="line">alert(<span class="string">&#x27;hello&#x27;</span> + <span class="string">&#x27; &#x27;</span> + <span class="string">&#x27;world&#x27;</span>); <span class="comment">// hello world</span></span><br><span class="line"><span class="comment">//1.2 数值字符串 &quot;相加&quot;</span></span><br><span class="line">alert(<span class="string">&#x27;100&#x27;</span> + <span class="string">&#x27;100&#x27;</span>); <span class="comment">// 100100</span></span><br><span class="line"><span class="comment">//1.3 数值字符串 + 数值</span></span><br><span class="line">alert(<span class="string">&#x27;11&#x27;</span> + <span class="number">12</span>);     <span class="comment">// 1112 +号口诀：数值相加，字符相连</span></span><br><span class="line"><span class="comment">//1.4 数值相加</span></span><br><span class="line">alert(<span class="number">12</span>+<span class="number">12</span>); <span class="comment">//24</span></span><br><span class="line"><span class="comment">// 1.5 字符串拼接加强</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line">alert(<span class="string">&quot;你&quot;</span> + age +<span class="string">&quot;岁了&quot;</span>); <span class="comment">//变量和字符串引引加加</span></span><br></pre></td></tr></table></figure><p><strong>+号口诀：数值相加，字符相连</strong></p><h3 id="案例：字符串拼接加强"><a href="#案例：字符串拼接加强" class="headerlink" title="案例：字符串拼接加强"></a>案例：字符串拼接加强</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//弹出一个输入框，输入年宁</span></span><br><span class="line"><span class="comment">//把输入年龄与字符串相接</span></span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line"><span class="keyword">var</span> age=prompt(<span class="string">&#x27;请输入年龄&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> str=<span class="string">&#x27;您今年已经&#x27;</span>+ age + <span class="string">&#x27;岁了&#x27;</span>;</span><br><span class="line">alert(str);</span><br></pre></td></tr></table></figure><h2 id="Boolean布尔型"><a href="#Boolean布尔型" class="headerlink" title="Boolean布尔型"></a>Boolean布尔型</h2><p>  布尔类型有两个值：true 和 false ，其中 true 表示真（对），而 false 表示假（错）。<br>  布尔型和数字型相加的时候， true 的值为 1 ，false 的值为 0。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> + <span class="number">1</span>); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">false</span> + <span class="number">1</span>); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h2 id="Undefined-和-Null"><a href="#Undefined-和-Null" class="headerlink" title="Undefined 和 Null"></a>Undefined 和 Null</h2><p>  一个变量声明后没有赋值会有一个默认值undefined（如果相连或者相加时，注意结果）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> variable;</span><br><span class="line"><span class="built_in">console</span>.log(variable); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;你好&quot;</span> + variable); <span class="comment">// 你好undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">11</span> + variable); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> + variable);<span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><p>  一个变量声明并赋值null,里面存的值为空</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> var2 = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">console</span>.log(var2); <span class="comment">// null</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;你好&quot;</span> + var2); <span class="comment">// 你好null</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">11</span> + var2); <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> + var2);<span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h2 id="获取变量类型及转换"><a href="#获取变量类型及转换" class="headerlink" title="获取变量类型及转换"></a>获取变量类型及转换</h2><h3 id="「获取变量类型」"><a href="#「获取变量类型」" class="headerlink" title="「获取变量类型」"></a><strong>「获取变量类型」</strong></h3><ul><li> 检测变量的数据类型语法<code>typeof</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> num);<span class="comment">//结果为 number</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;pink&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> str);<span class="comment">//结果为 string</span></span><br><span class="line"><span class="keyword">var</span> flag = <span class="string">&#x27;true&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> flog);<span class="comment">//结果为 boolean</span></span><br><span class="line"><span class="keyword">var</span> vari = <span class="literal">undefined</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> vari);<span class="comment">//结果为 undefined</span></span><br><span class="line"><span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> timer); <span class="comment">//结果为 object</span></span><br><span class="line"><span class="comment">//prompt 取过来的值是字符型的</span></span><br><span class="line"><span class="keyword">var</span> age = prompt(<span class="string">&#x27;请输入年龄&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(age);</span><br><span class="line">conloge.log(<span class="keyword">typeof</span> age);</span><br></pre></td></tr></table></figure><p><strong>prompt 取过来的值是字符型的</strong></p><p><code>字面量</code>:是源代码中一个固定值的表示法，就是字面量如何去表达这个值。通过数据的格式特征可以判断数据的类型</p><ul><li>有数字字面量:8,9,10</li><li>字符串字面量:’饭老板’，”前端开发”</li><li>布尔字面量:true,false</li></ul><h3 id="「数据类型转换」"><a href="#「数据类型转换」" class="headerlink" title="「数据类型转换」"></a><strong>「数据类型转换」</strong></h3><h4 id="转换为字符串"><a href="#转换为字符串" class="headerlink" title="转换为字符串"></a>转换为字符串</h4><table><thead><tr><th>方式</th><th>说明</th><th>案例</th></tr></thead><tbody><tr><td>toString()</td><td>转换成字符型</td><td></td></tr><tr><td>String()</td><td>强制转换</td><td></td></tr><tr><td>加号拼接字符串</td><td>和字符型拼接的结果都是字符型</td><td></td></tr></tbody></table><p>toString()和String()使用方式不一样</p><p><strong>三种转换方式更喜欢用第三种，被称为隐式转换</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1,数字型转换字符串 变量.toString()</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> str = num.toString();</span><br><span class="line"><span class="built_in">console</span>,log(str);</span><br><span class="line"><span class="built_in">console</span>,log(<span class="keyword">typeof</span> str);</span><br><span class="line"><span class="comment">//2，String()</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="built_in">String</span>(num);</span><br><span class="line"><span class="built_in">console</span>,log(<span class="keyword">typeof</span> str);</span><br><span class="line"><span class="comment">//3，加号拼接字符串</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num + <span class="string">&#x27;&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="转换为数字型"><a href="#转换为数字型" class="headerlink" title="转换为数字型"></a>转换为数字型</h4><table><thead><tr><th>方式</th><th>说明</th><th>案例</th></tr></thead><tbody><tr><td>parseInt(String)函数</td><td>转化为整数型</td><td></td></tr><tr><td>parseFloat(String)函数</td><td>转化为浮点型</td><td></td></tr><tr><td>Number()强制转换函数</td><td>强制转换数值型</td><td></td></tr><tr><td>js隐式转换（- * /)</td><td>算数因算符转换数值</td><td></td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1，parseInt(变量) 得到的是整数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">&#x27;3.14&#x27;</span>));<span class="comment">//3 取整</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">&#x27;3.93&#x27;</span>));<span class="comment">//3 取整</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">&#x27;120px&#x27;</span>));<span class="comment">//120 会去掉px单位</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">&#x27;rem120px&#x27;</span>));<span class="comment">//NaN</span></span><br><span class="line"><span class="comment">//2，parseFloat(变量) 得到的是浮点数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">&#x27;3.14&#x27;</span>));<span class="comment">//3.14</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">&#x27;120px&#x27;</span>));<span class="comment">//120 去掉单位</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">&#x27;rem120px&#x27;</span>));<span class="comment">//NaN</span></span><br><span class="line"><span class="comment">//3，Number(变量)</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(str));<span class="comment">//123</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">&#x27;12&#x27;</span>));<span class="comment">//12</span></span><br><span class="line"><span class="comment">//4，利用算数运算符</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;12&#x27;</span>-<span class="number">0</span>);<span class="comment">//12</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;123&#x27;</span>-<span class="string">&#x27;120&#x27;</span>);<span class="comment">//3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;123&#x27;</span>*<span class="number">1</span>);<span class="comment">//123</span></span><br></pre></td></tr></table></figure><h4 id="案例：简单加法器"><a href="#案例：简单加法器" class="headerlink" title="案例：简单加法器"></a>案例：简单加法器</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = prompt(<span class="string">&#x27;请输入第一个数&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> num2 = prompt(<span class="string">&#x27;请输入第二个数&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> result = <span class="built_in">parseFloat</span>(num1) + <span class="built_in">parseFloat</span>(num2);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;您的结果是&#x27;</span> + result);</span><br></pre></td></tr></table></figure><h4 id="案例：计算年龄"><a href="#案例：计算年龄" class="headerlink" title="案例：计算年龄"></a>案例：计算年龄</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> year = prompt(<span class="string">&#x27;请输入生日年份&#x27;</span>)；</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">2022</span> - year; <span class="comment">//隐式转换</span></span><br><span class="line">alert(<span class="string">&#x27;你的年龄&#x27;</span>+ age + <span class="string">&#x27;岁了&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="转换为布尔型"><a href="#转换为布尔型" class="headerlink" title="转换为布尔型"></a>转换为布尔型</h4><ol><li>代表空、否定的值会被转换为false，如’ ‘、0、NaN、null、undefined </li><li>其余值都会被转换为true。</li></ol><table><thead><tr><th>方式</th><th>说明</th><th>案例</th></tr></thead><tbody><tr><td>Boolean()函数</td><td>其他类型转换布尔型</td><td>Boolean(‘true’)</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="string">&#x27;&#x27;</span>));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="number">0</span>));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">NaN</span>));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">null</span>));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">undefined</span>));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="string">&#x27;小白&#x27;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="string">&#x27;12&#x27;</span>));<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h1 id="关键字和保留字"><a href="#关键字和保留字" class="headerlink" title="关键字和保留字"></a>关键字和保留字</h1><p><strong>「标识符」</strong>指开发人员为变量、属性、函数、参数取得名字。标识符不能是关键字或保留字。</p><p><strong>「关键字」</strong>指 JS本身已经使用了的字，不能再用它们充当变量名、方法名</p><blockquote><p>包括：break、case、catch、continue、default、delete、do、else、finally、for、function、if、in、instanceof、new、return、switch、this、throw、try、typeof、var、void、while、with 等。</p></blockquote><p><strong>「保留字」</strong>实际上就是预留的“关键字”，意思是现在虽然还不是关键字，但是未来可能会成为关键字，同样不能使用它们当变量名或方法名。</p><blockquote><p>boolean、byte、char、class、const、debugger、double、enum、export、extends、fimal、float、goto、implements、import、int、interface、long、mative、package、private、protected、public、short、static、super、synchronized、throws、transient、volatile 等。</p><p>注意：如果将保留字用作变量名或函数名，那么除非将来的浏览器实现了该保留字，否则很可能收不到任何错误消息。当浏览器将其实现后，该单词将被看做关键字，如此将出现关键字错误。</p></blockquote><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="「运算符」"><a href="#「运算符」" class="headerlink" title="「运算符」"></a><strong>「运算符」</strong></h2><p>是用于实现赋值、比较和执行算数运算等功能的符号。常用运算符分类如下</p><ul><li>算数运算符</li><li>递增和递减运算符</li><li>比较运算符</li><li>逻辑运算符</li><li>赋值运算符</li></ul><table><thead><tr><th>运算符</th><th>描述</th><th>案例</th></tr></thead><tbody><tr><td>+</td><td>加</td><td>10+20=30</td></tr><tr><td>-</td><td>减</td><td>10-20=-10</td></tr><tr><td>*</td><td>乘</td><td>10*20=200</td></tr><tr><td>/</td><td>除</td><td>10/20=0.5</td></tr><tr><td>%</td><td>取余（取模）</td><td>返回除法的余数9%2=1</td></tr></tbody></table><h3 id="浮点数的精度问题"><a href="#浮点数的精度问题" class="headerlink" title="浮点数的精度问题"></a>浮点数的精度问题</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">var</span> result = <span class="number">0.1</span> + <span class="number">0.2</span>;    <span class="comment">// 结果不是 0.3，而是：0.30000000000000004</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">0.07</span> * <span class="number">100</span>);   <span class="comment">// 结果不是 7，  而是：7.000000000000001</span></span><br><span class="line"><span class="comment">//浮点数不能用来比较是否相等</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0.1</span> + <span class="number">0.2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num == <span class="number">0.3</span>);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>浮点数值的最高精度是17位小数，但是在进行算数运算时其精确度远远不如整数,所以不要直接判断两个浮点数是否相等!</p><h3 id="表达式与返回值"><a href="#表达式与返回值" class="headerlink" title="表达式与返回值"></a><strong>表达式与返回值</strong></h3><ol><li>表达式：由数字、运算符和变量组成的式子。</li><li>返回值：每一个表达式经过相应的运算之后，会有一个最终结果，称为表达式的返回值</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>+<span class="number">1</span>);<span class="comment">//2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>-<span class="number">1</span>);<span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>*<span class="number">1</span>);<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>/<span class="number">1</span>);<span class="comment">//1</span></span><br><span class="line"><span class="comment">//取余</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">4</span>%<span class="number">2</span>);<span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.lpg(<span class="number">5</span>%<span class="number">3</span>);<span class="comment">//2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>%<span class="number">5</span>);<span class="comment">//3</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>+<span class="number">1</span>);<span class="comment">//2为返回值</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">1</span> + <span class="number">1</span>;<span class="comment">//右边表达式计算完毕把返回值给左边</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="「递增和递减运算符」"><a href="#「递增和递减运算符」" class="headerlink" title="「递增和递减运算符」"></a><strong>「递增和递减运算符」</strong></h2><p>  反复给变量增加或减去1，可以使用递增（++）或递减（- -）运算符，分为前置和后置，必须配合变量使用。</p><ul><li>递增运算符</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//前置递增 </span></span><br><span class="line"><span class="keyword">var</span>  num = <span class="number">10</span>;</span><br><span class="line">alert(++num + <span class="number">10</span>);   <span class="comment">// 21 使用口诀：先自加，后返回值</span></span><br><span class="line"> <span class="comment">//后置递增 </span></span><br><span class="line"><span class="keyword">var</span>  num1 = <span class="number">10</span>;</span><br><span class="line">alert(<span class="number">10</span> + num1++);  <span class="comment">// 20 使用口诀：先返回原值，后自加 </span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = ++num + num++; <span class="comment">//num = 2</span></span><br><span class="line"><span class="built_in">console</span>.log(num2);<span class="comment">//4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = num++ + num1++; <span class="comment">// 1 + 1</span></span><br><span class="line"><span class="built_in">console</span>.log(num2);<span class="comment">//2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = num++ + num++;<span class="comment">// 1 + 2 </span></span><br><span class="line"><span class="built_in">console</span>.log(num2); <span class="comment">// 3  </span></span><br></pre></td></tr></table></figure><h2 id="「比较运算符」"><a href="#「比较运算符」" class="headerlink" title="「比较运算符」"></a><strong>「比较运算符」</strong></h2><p>返回的是布尔值（true || false）</p><table><thead><tr><th>运算符</th><th>描述</th><th>案例</th><th>结果</th></tr></thead><tbody><tr><td>&lt;</td><td>小于号</td><td>1&lt;2</td><td>true</td></tr><tr><td>&gt;</td><td>大于号</td><td>1&gt;2</td><td>false</td></tr><tr><td>&gt;=</td><td>大于等于号</td><td>2 &gt;= 2</td><td>true</td></tr><tr><td>&lt;=</td><td>小于等于号</td><td>3 &lt;= 2</td><td>false</td></tr><tr><td>==</td><td>等判号（会转型）</td><td>15 == ‘15’</td><td>true</td></tr><tr><td>!=</td><td>不等号</td><td>37 != 37</td><td>false</td></tr><tr><td>===</td><td>全等</td><td>37 === ‘37’</td><td>false</td></tr><tr><td>!===</td><td>全不等</td><td>37 !=== ‘37’</td><td>true</td></tr></tbody></table><p>注意：</p><ul><li>==判断两边值是否相等（有隐式转换）</li><li>===判断两边值和数据类型是否完全相同</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//==默认转换数字类型，会把字符串型转换成数字型，要求值相等即可</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span> == <span class="number">5</span>);<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;pink&#x27;</span> == <span class="string">&#x27;我&#x27;</span>);<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">18</span> == <span class="number">18</span>);<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">18</span> == <span class="string">&#x27;18&#x27;</span>);<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">18</span> != <span class="number">18</span>);<span class="comment">//false</span></span><br><span class="line"><span class="comment">//===要求值和数据类型完全一样</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">18</span> === <span class="number">18</span>);<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">18</span> === <span class="string">&#x27;18&#x27;</span>);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><h2 id="「逻辑运算符」"><a href="#「逻辑运算符」" class="headerlink" title="「逻辑运算符」"></a><strong>「逻辑运算符」</strong></h2><p>  逻辑运算符是用来进行布尔值运算的运算符<br>  短路运算:当有多个表达式（值）时,左边的表达式值可以确定结果时,就不再继续运算右边的表达式的值;</p><table><thead><tr><th>运算符</th><th>描述</th><th>案例</th><th>特点</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>“逻辑与”，简称“与” and</td><td>true &amp;&amp; false</td><td>两边都true才返回true</td></tr><tr><td>||</td><td>“逻辑或”，简称“或” or</td><td>true || true</td><td>有真为真</td></tr><tr><td>!</td><td>“逻辑非”，简称“非” not</td><td>! true</td><td>取反</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1,&amp;&amp;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span> &gt; <span class="number">5</span> &amp;&amp; <span class="number">3</span> &gt; <span class="number">2</span>);<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span> &lt; <span class="number">5</span> &amp;&amp; <span class="number">3</span> &gt; <span class="number">2</span>);<span class="comment">//true</span></span><br><span class="line"><span class="comment">//2,||</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span> &gt; <span class="number">5</span> || <span class="number">3</span> &gt; <span class="number">2</span>);<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span> &lt; <span class="number">5</span> || <span class="number">3</span> &lt; <span class="number">2</span>);<span class="comment">//false</span></span><br><span class="line"><span class="comment">//3,!</span></span><br><span class="line"><span class="built_in">console</span>.log(!<span class="literal">true</span>);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//逻辑与短路运算 如表达式1结果为真，则返回表达式2，如果表达式1结果为假，则返回表达式1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">123</span> &amp;&amp; <span class="number">456</span>);<span class="comment">//456</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span> &amp;&amp; <span class="number">456</span>);<span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span> &amp;&amp; <span class="number">1</span>+<span class="number">2</span> &amp;&amp; <span class="number">456</span>*<span class="number">789</span>);<span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;&#x27;</span> &amp;&amp; <span class="number">1</span>+<span class="number">2</span> &amp;&amp; <span class="number">456</span>*<span class="number">789</span>);<span class="comment">//&#x27;&#x27;</span></span><br><span class="line"><span class="comment">//有空的或者否定的是假，其余为真 0 &#x27;&#x27; null undefined NaN</span></span><br><span class="line"><span class="comment">//逻辑或短路运算 如表达式1结果为真，则返回表达式1，如果表达式1结果为假，则返回表达式2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">123</span> || <span class="number">456</span>);<span class="comment">//123</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">123</span> || <span class="number">456</span> || <span class="number">456</span>+<span class="number">789</span>);<span class="comment">//123</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span> || <span class="number">456</span> || <span class="number">456</span>+<span class="number">789</span>);<span class="comment">//456</span></span><br><span class="line"><span class="comment">//逻辑中断很重要，会影响程序运行结果</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">123</span> || num++);<span class="comment">//num++ 运行中断</span></span><br><span class="line"><span class="built_in">console</span>.log(num);<span class="comment">//0</span></span><br></pre></td></tr></table></figure><h2 id="「赋值运算符」"><a href="#「赋值运算符」" class="headerlink" title="「赋值运算符」"></a><strong>「赋值运算符」</strong></h2><table><thead><tr><th>运算符</th><th>描述</th><th>案例</th></tr></thead><tbody><tr><td>=</td><td>直接赋值</td><td>var name = ‘fan’</td></tr><tr><td>+=  -=</td><td>加一个数后在赋值</td><td>var age = 5; age += 5;</td></tr><tr><td>*= /= %=</td><td>乘，除，取模后在赋值</td><td>var age = 5; age *= 5;</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">10</span>;</span><br><span class="line">age += <span class="number">5</span>;<span class="comment">//相当于age = age + 5;</span></span><br><span class="line">age -= <span class="number">5</span>;<span class="comment">//age = age - 5;</span></span><br><span class="line">age *= <span class="number">10</span>;<span class="comment">//age = age * 10;</span></span><br></pre></td></tr></table></figure><h2 id="「运算符优先级」"><a href="#「运算符优先级」" class="headerlink" title="「运算符优先级」"></a><strong>「运算符优先级」</strong></h2><table><thead><tr><th>优先级</th><th>运算符</th><th>顺序</th></tr></thead><tbody><tr><td>1</td><td>小括号</td><td>()</td></tr><tr><td>2</td><td>一元运算符</td><td>! ++ - -</td></tr><tr><td>3</td><td>算数运算符</td><td>先* / % 后+-</td></tr><tr><td>4</td><td>关系运算符</td><td>&gt; &gt;= &lt; &lt;=</td></tr><tr><td>5</td><td>相等运算符</td><td>== != === !=</td></tr><tr><td>6</td><td>逻辑运算符</td><td>先&amp;&amp;后||</td></tr><tr><td>7</td><td>赋值运算符</td><td>=</td></tr><tr><td>8</td><td>逗号运算符</td><td>,</td></tr></tbody></table><ul><li>一元运算符里面逻辑非优先级最高</li><li>与比或高</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小白的前端之路 </tag>
            
            <tag> JavaScript基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS浮动</title>
      <link href="/%E5%89%8D%E7%AB%AF/CSS%E6%B5%AE%E5%8A%A8/"/>
      <url>/%E5%89%8D%E7%AB%AF/CSS%E6%B5%AE%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h1><h2 id="「1-CSS布局的三种机制」"><a href="#「1-CSS布局的三种机制」" class="headerlink" title="「1. CSS布局的三种机制」"></a><strong>「1. CSS布局的三种机制」</strong></h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">网页布局的核心——就是用CSS来摆放盒子。</span><br></pre></td></tr></table></figure><p>CSS 提供了3种机制来设置盒子的摆放位置，分别是普通流（标准流）、浮动和定位，其中：</p><h3 id="A-普通流（标准流）"><a href="#A-普通流（标准流）" class="headerlink" title="A. 普通流（标准流）"></a><strong>A. 普通流（标准流）</strong></h3><ol><li><p>块级元素会独占一行，从上向下顺序排列；</p></li><li><ul><li>常用元素：div、hr、p、h1~h6、ul、ol、dl、form、table</li></ul></li><li><p>行内元素会按照顺序，从左到右顺序排列，碰到父元素边缘则自动换行；</p></li><li><ul><li>常用元素：span、a、i、em等</li></ul></li></ol><h3 id="B-浮动"><a href="#B-浮动" class="headerlink" title="B. 浮动"></a><strong>B. 浮动</strong></h3><ul><li>让盒子从普通流中浮起来,主要作用让多个块级盒子一行显示。</li></ul><h3 id="C-定位"><a href="#C-定位" class="headerlink" title="C. 定位"></a><strong>C. 定位</strong></h3><ul><li>将盒子定在浏览器的某一个位置——CSS 离不开定位，特别是后面的 js 特效。</li></ul><h2 id="「2-什么是浮动」"><a href="#「2-什么是浮动」" class="headerlink" title="「2. 什么是浮动」"></a><strong>「2. 什么是浮动」</strong></h2><p>元素的浮动是指设置了浮动属性的元素会：</p><ul><li>脱离标准普通流的控制,不占位置，脱标</li><li>移动到指定位置。</li></ul><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ol><li>让多个盒子(div)水平排列成一行，使得浮动称为布局的重要手段。</li><li>可以实现盒子的左右对齐等等。</li><li>浮动最早是用来控制图片，实现文字环绕图片效果。</li><li>float属性会改变元素的display属性，任何元素都可以浮动。浮动元素会生成一个块级框，而不论它本身是何种元素。生成的块级框和我们前面的行内块极其相似。</li></ol><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a><strong>语法</strong></h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器 &#123; <span class="attribute">float</span>: 属性值; &#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>none</td><td>元素不浮动（默认值）</td></tr><tr><td>left</td><td>元素向左浮动</td></tr><tr><td>right</td><td>元素向右浮动</td></tr></tbody></table><p>浮动只会影响当前的或者是后面的标准流盒子，不会影响前面的标准流。<br>**建议:**如果一个盒子里面有多个子盒子，如果其中一个盒子浮动了，其他兄弟也应该浮动。防止引起问题</p><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207090743663.jpg"></p><h2 id="浮动-float-小结"><a href="#浮动-float-小结" class="headerlink" title="浮动(float)小结"></a><strong>浮动(float)小结</strong></h2><table><thead><tr><th>特点</th><th>说明</th></tr></thead><tbody><tr><td>浮</td><td>加了浮动的盒子<strong>「是浮起来」</strong>的，漂浮在其他标准流盒子的上面。</td></tr><tr><td>漏</td><td>加了浮动的盒子<strong>「是不占位置的」</strong>，它原来的位置<strong>「漏给了标准流的盒子」</strong>。</td></tr><tr><td>特</td><td>「特别注意」：浮动元素会改变display属性， 类似转换为了行内块，但是元素之间没有空白缝隙</td></tr></tbody></table><h1 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h1><p>因为父级盒子很多情况下，不方便给高度，但是子盒子浮动就不占有位置，最后父级盒子高度为0，就影响了下面的标准流盒子。</p><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207090744999.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207090745976.jpg"></p><p><strong>总结：</strong></p><ul><li>由于浮动元素不再占用原文档流的位置，所以它会对后面的元素排版产生影响</li><li>准确地说，并不是清除浮动，而是清除浮动后造成的影响</li></ul><p><strong>清除浮动本质</strong>：</p><p>清除浮动主要为了解决父级元素因为子级浮动引起内部高度为0 的问题。清除浮动之后， 父级就会根据浮动的子盒子自动检测高度。父级有了高度，就不会影响下面的标准流了</p><h2 id="清除浮动的方法"><a href="#清除浮动的方法" class="headerlink" title="清除浮动的方法"></a>清除浮动的方法</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器 &#123; <span class="attribute">clear</span>: 属性值; &#125;   <span class="attribute">clear</span> 清除  </span><br></pre></td></tr></table></figure><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>left</td><td>不允许左侧有浮动元素（清除左侧浮动的影响）</td></tr><tr><td>right</td><td>不允许右侧有浮动元素（清除右侧浮动的影响）</td></tr><tr><td>both</td><td>同时清除左右两侧浮动的影响</td></tr></tbody></table><p>实际工作中,几乎只用clear: both</p><h3 id="1-额外标签法-隔墙法"><a href="#1-额外标签法-隔墙法" class="headerlink" title="1).额外标签法(隔墙法)"></a><strong>1).额外标签法(隔墙法)</strong></h3><p>是W3C推荐的做法是通过在浮动元素<strong>末尾</strong>添加一个空的标签例如 div style=”clear:both”，或则其他标签br等亦可。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> style=&quot;<span class="attribute">clear</span>:both<span class="string">&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><ul><li>优点：通俗易懂，书写方便</li><li>缺点：添加许多无意义的标签，结构化较差。</li></ul><p><strong>2).父级添加overflow属性方法</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">可以给父级添加： </span><br><span class="line"><span class="attribute">overflow</span>为 hidden| <span class="attribute">auto</span>| scroll  都可以实现。</span><br></pre></td></tr></table></figure><ul><li>优点： 代码简洁</li><li>缺点： 内容增多时候容易造成不会自动换行导致内容被隐藏掉，无法显示需要溢出的元素。</li></ul><p><strong>3).使用after伪元素清除浮动</strong></p><p>after 方式为空元素额外标签法的升级版，好处是不用单独加标签了</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span>:after &#123;</span><br><span class="line">    content: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">/* IE6、7 专有 */</span></span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">    *zoom: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><ul><li>优点：符合闭合浮动思想  结构语义化正确</li><li>缺点：由于IE6-7不支持:after，使用 zoom:1触发 hasLayout。</li></ul><p><strong>4).使用双伪元素清除浮动</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span>:before,</span><br><span class="line">.clearfix:after &#123;</span><br><span class="line">    content: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clearfix</span>:after &#123;</span><br><span class="line">    clear: both;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">   *zoom: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>优点： 代码更简洁</li><li>缺点： 由于IE6-7不支持:after，使用 zoom:1触发 hasLayout。</li></ul><h2 id="清除浮动总结"><a href="#清除浮动总结" class="headerlink" title="清除浮动总结"></a>清除浮动总结</h2><h3 id="什么时候用清除浮动呢？"><a href="#什么时候用清除浮动呢？" class="headerlink" title="什么时候用清除浮动呢？"></a>什么时候用清除浮动呢？</h3><ol><li>父级没高度</li><li>子盒子浮动了</li><li>影响下面布局了，我们就应该清除浮动了</li></ol><table><thead><tr><th>清除浮动的方法</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>额外标签法（隔墙法）</td><td>通俗易懂，书写方便</td><td>添加许多无意义的标签，结构化较差。</td></tr><tr><td>父级overflow:hidden;</td><td>书写简单</td><td>溢出隐藏</td></tr><tr><td>父级after伪元素</td><td>结构语义化正确</td><td>由于IE6-7不支持:after，兼容性问题</td></tr><tr><td>父级双伪元素</td><td>结构语义化正确</td><td>由于IE6-7不支持:after，兼容性问题</td></tr></tbody></table><h1 id="CSS属性书写顺序"><a href="#CSS属性书写顺序" class="headerlink" title="CSS属性书写顺序"></a>CSS属性书写顺序</h1><p>建议遵循以下顺序：</p><ol><li>布局定位属性：display / position / float / clear / visibility / overflow（建议 display 第一个写，毕竟关系到模式）</li><li>自身属性：width / height / margin / padding / border / background</li><li>文本属性：color / font / text-decoration / text-align / vertical-align / white- space / break-word</li><li>其他属性（CSS3）：content / cursor / border-radius / box-shadow / text-shadow / background:linear-gradient …</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.jdc</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">font-family</span>: Arial, <span class="string">&#x27;Helvetica Neue&#x27;</span>, Helvetica, sans-serif;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">5</span>);</span><br><span class="line">    -webkit-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    -moz-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    -o-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    -ms-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小白的前端之路 </tag>
            
            <tag> CSS基础 </tag>
            
            <tag> CSS三大重点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语语法概念系统</title>
      <link href="/%E8%8B%B1%E8%AF%AD/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95%E6%A6%82%E5%BF%B5%E7%B3%BB%E7%BB%9F/"/>
      <url>/%E8%8B%B1%E8%AF%AD/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95%E6%A6%82%E5%BF%B5%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="英语语法概念系统"><a href="#英语语法概念系统" class="headerlink" title="英语语法概念系统"></a>英语语法概念系统</h1><h2 id="语法报菜名"><a href="#语法报菜名" class="headerlink" title="语法报菜名"></a>语法报菜名</h2><p>​      英语语法研究<strong>词法</strong>和<strong>句法</strong>。其中词法研究单词的词义和词性。词性分为<strong>实词</strong>和虚词，实词包括名形动副数，虚词包括冠代介感连。其中，实词中最难的是<strong>动词</strong>。动词研究<strong>谓语动词</strong>（心脏）和<strong>非谓语动词</strong>（脉搏）。谓语动词研究<strong>时态</strong>，<strong>语态</strong>，<strong>语气</strong>和<strong>主谓一致</strong>。而非谓语动词研究三种形式——分别是<strong>动词不定式</strong>to do，<strong>动名词</strong>doing和<strong>分词</strong>，其中分词包括<strong>现在分词</strong>doing（主动）和<strong>过去分词</strong>done（被动）。</p><p>​      以词构句，就形成语法。其中最简单的句子叫<strong>简单句</strong>（一句一主谓），简单句有五种基本结构：主谓，主谓宾，主谓宾宾，主谓宾补，主系表。把简单句变得更加简单，就是省略主语和谓语的一些成分，构成<strong>省略句</strong>。把简单句主语和谓语适当颠倒一下，就构成<strong>倒装句</strong>，倒装句分为完全倒装和不完全倒装句。</p><p>​      简单句还能变得更复杂，一种是并列连词and，or，but，so构成<strong>并列句</strong>；一种是加上从属连词构成<strong>主从复合句</strong>。主从复合句包含三种情况，分别是<strong>名词性从句</strong>，<strong>定语从句</strong>和<strong>状语从句</strong>。其中名词性从句包括<strong>主语</strong>从句，<strong>宾语</strong>从句，<strong>表语</strong>从句，<strong>同位语</strong>从句。定语从句包括<strong>限制性</strong>定语从句和<strong>非限制性</strong>定语从句，也能分成<strong>关系代词</strong>和<strong>关系副词</strong>引导的定语从句。状语从句一般有九种，分别是<strong>时间</strong>，<strong>地点</strong>，<strong>原因</strong>，<strong>结果</strong>，<strong>方式</strong>，<strong>目的</strong>，<strong>条件</strong>，<strong>让步</strong>，<strong>比较</strong>，再加上独立主格结构和强调句型就是全部英语语法。</p><p>​      一个单句有且只有一个谓语动词，当需要使用第二个动词时要么用非谓语动词，要么用从句。</p><h2 id="简要解释"><a href="#简要解释" class="headerlink" title="简要解释"></a>简要解释</h2><h3 id="实词虚词"><a href="#实词虚词" class="headerlink" title="实词虚词"></a>实词虚词</h3><p><strong>实词：大喊一声，你就懂了</strong>（有实际意义）</p><ul><li><p>名词：李辉！</p></li><li><p>动词：跑！</p></li><li><p>形容词：帅！</p></li><li><p>副词：快点！</p></li><li><p>数词：100！</p></li></ul><p><strong>虚词：大喊一声，你就懵了</strong>（无实际意义）</p><ul><li>冠词：a! an! the!</li><li>代词：I! You!</li><li>感叹词：Ah! Oh!</li><li>连词：If! becouse!</li></ul><h3 id="句子结构"><a href="#句子结构" class="headerlink" title="句子结构"></a>句子结构</h3><p><strong>句子=主语部分+谓语部分</strong></p><ul><li><p>主语：句子的主角/被描述的对象（名词）</p></li><li><p>谓语：用来说主语（动词）</p></li></ul><p><strong>eg:</strong></p><p>LiHui teaches English.</p><p>China is an open country.</p><p>(You) Come here.</p><p>李辉帅。    LiHui is handsome.</p><p>一个句子中用到多个动词时，保留一个作<strong>谓语</strong>，其他统统写成<strong>非谓语动词(主动doing/被动done/要做to do)</strong></p><p>eg: </p><p>走在回家的路上，我看到一个老头骑着自行车看报纸计划去买菜被车撞了坐在地上哭</p><p>Working home,I saw an old man ,riding a bike, reading </p><h3 id="省略句"><a href="#省略句" class="headerlink" title="省略句"></a><strong>省略句</strong></h3><ol><li>因为习惯而省略</li><li>因为重复而省略</li><li>状语从句中的省略</li></ol><p>因为习惯而省略</p><p>​        (It is a) Good morning.</p><p>​        (You are) Welcome.</p><p>​        (I )Thank you.</p><p>因为重复而省略</p><p>​        and 后，如果跟前面相同，可省略：</p><p>​        I go to school and I work hard.</p><p>​        情态动词或to 后面，如果跟前面相同，可省略：</p><p>​        -Why don’t you help him? He is your friend.</p><p>​        -Well,I know I should, but I don’t want to.</p><p>状语从句中的省略</p><ul><li><p>陈述语序：主语在前+谓语在后</p></li><li><p>完全倒装语序：谓语在前+主语在后</p></li><li><p>不完全倒装：助/系/情+主语+谓语剩余部分</p></li></ul><p>eg:</p><p>Here comes the bus.</p><p>Never should you talk with your father like that.</p><h3 id="并列和主从"><a href="#并列和主从" class="headerlink" title="并列和主从"></a>并列和主从</h3><ul><li>并列复合句：双胞胎（兄弟俩关系时好时坏，但不存在谁属于谁的关系）</li><li>主从复合句：老大+小弟（小弟属于老大，小弟是老大的一部分，小弟是老大的左膀右臂）</li></ul><p>eg:</p><p>I love you and you love me.</p><p>I love you but you don’t love me.</p><p>I know (that you love me) .（宾语从句）</p><p>I fell in love with you.</p><p>I fell in love with you( when you said you love )</p><p>I fell in love with you( where you saved my life )</p><p>I fell in love with you( because you are handsome. )</p><h3 id="独立主格"><a href="#独立主格" class="headerlink" title="独立主格"></a>独立主格</h3><p>普通句子=名词+谓语动词</p><p>独立主格=名词+非谓语动词/形容词/副词/介词</p><p>eg:</p><p>The blue sky waiting for the smoky rain, I am waitng for you.</p><p>天青色等雨，而我在等你。</p><h3 id="强调句型"><a href="#强调句型" class="headerlink" title="强调句型"></a>强调句型</h3><p>It is/was + 被强调部分+that/who+句子剩余部分</p><p>正是…….（稍微停顿一下）…..</p><p>LiHui teaches English.</p><p>It is Lihui that Teaches English.</p><p>It is English that LiHui teaches.</p><p>LiHui does teaches English.</p><p>​        </p>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS盒子模型</title>
      <link href="/%E5%89%8D%E7%AB%AF/CSS%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/"/>
      <url>/%E5%89%8D%E7%AB%AF/CSS%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>css学习三大重点： css 盒子模型 、 浮动 、 定位 </p><h2 id="网页布局的本质"><a href="#网页布局的本质" class="headerlink" title="网页布局的本质"></a><strong>网页布局的本质</strong></h2><ul><li>首先利用CSS设置好盒子的大小，然后摆放盒子的位置。</li><li>最后把网页元素比如文字图片等等，放入盒子里面。</li></ul><h1 id="1-盒子模型-Box-Model"><a href="#1-盒子模型-Box-Model" class="headerlink" title="1. 盒子模型(Box Model)"></a>1. 盒子模型(Box Model)</h1><ul><li>盒子模型就是把HTML页面中的布局元素看作是一个矩形的盒子，也就是一个盛装内容的容器。</li><li>盒子模型由元素的内容、边框（border）、内边距（padding）、和外边距（margin）组成。</li><li>盒子里面的文字和图片等元素是 内容区域</li><li>盒子的厚度 我们称为为盒子的边框</li><li>盒子内容与边框的距离是内边距</li><li>盒子与盒子之间的距离是外边距</li></ul><h2 id="W3c标准盒子模型"><a href="#W3c标准盒子模型" class="headerlink" title="W3c标准盒子模型"></a><strong>W3c标准盒子模型</strong></h2><p>标准 w3c 盒子模型的范围包括 margin、border、padding、content</p><p>当设置为box-sizing: content-box;时，将采用标准模式解析计算，也是默认模式；</p><p>内盒尺寸计算(元素实际大小)</p><ul><li>宽度：Element Height = content height + padding + border （Height为内容高度）</li><li>高度：Element  Width = content width + padding + border （Width为内容宽度）</li><li>盒子的实际大小：<strong>内容的宽度和高度 +  内边距  +  边框</strong>  </li></ul><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207082125688.png"></p><h2 id="IE盒子模型"><a href="#IE盒子模型" class="headerlink" title="IE盒子模型"></a><strong>IE盒子模型</strong></h2><p>IE 盒子模型的 content 部分包含了 border 和 pading</p><p>当设置为box-sizing: border-box时，将采用怪异模式解析计算；</p><h1 id="2-盒子边框-border"><a href="#2-盒子边框-border" class="headerlink" title="2. 盒子边框(border)"></a>2. 盒子边框(border)</h1><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>border-width</td><td>定义边框粗细，单位是px</td></tr><tr><td>border-style</td><td>边框的样式</td></tr><tr><td>border-color</td><td>边框颜色</td></tr></tbody></table><h3 id="边框的样式："><a href="#边框的样式：" class="headerlink" title="边框的样式："></a><strong>边框的样式：</strong></h3><ul><li>none：没有边框即忽略所有边框的宽度（默认值）</li><li>solid：边框为单实线(最为常用的)</li><li>dashed：边框为虚线</li><li>dotted：边框为点线</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">边框综合设置</span><br><span class="line"><span class="attribute">border</span> : border-width || border-style || border-color </span><br><span class="line"></span><br><span class="line">border: <span class="number">1px</span> solid red;  没有顺序要求  </span><br></pre></td></tr></table></figure><h3 id="盒子边框写法总结表："><a href="#盒子边框写法总结表：" class="headerlink" title="盒子边框写法总结表："></a><strong>盒子边框写法总结表：</strong></h3><p>很多情况下，我们不需要指定4个边框，我们是可以单独给4个边框分别指定的。</p><table><thead><tr><th>上边框</th><th>下边框</th><th>左边框</th><th>右边框</th></tr></thead><tbody><tr><td>border-top-style:样式;</td><td>border-bottom-style:样式;</td><td>border-left-style:样式;</td><td>border-right-style:样式;</td></tr><tr><td>border-top-width:宽度;</td><td>border- bottom-width:宽度;</td><td>border-left-width:宽度;</td><td>border-right-width:宽度;</td></tr><tr><td>border-top-color:颜色;</td><td>border- bottom-color:颜色;</td><td>border-left-color:颜色;</td><td>border-right-color:颜色;</td></tr><tr><td>border-top:宽度 样式 颜色;</td><td>border-bottom:宽度 样式 颜色;</td><td>border-left:宽度 样式 颜色;</td><td>border-right:宽度 样式 颜色;</td></tr></tbody></table><h3 id="表格的细线边框："><a href="#表格的细线边框：" class="headerlink" title="表格的细线边框："></a><strong>表格的细线边框：</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207082133984.png"></p><ul><li>通过表格的<code>cellspacing=&quot;0&quot;</code>,将单元格与单元格之间的距离设置为0，</li><li>但是两个单元格之间的边框会出现重叠，从而使边框变粗</li><li>通过css属性：table{ border-collapse:collapse; }  </li></ul><p><code>collapse</code> 单词是合并的意思,<code>border-collapse: collapse;</code>表示相邻边框合并在一起。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line"> <span class="selector-tag">table</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-tag">td</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-tag">table</span>, <span class="selector-tag">td</span> &#123;</span><br><span class="line">  <span class="attribute">border-collapse</span>: collapse;  <span class="comment">/*合并相邻边框*/</span></span><br><span class="line"> &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h1 id="3-内边距-padding"><a href="#3-内边距-padding" class="headerlink" title="3. 内边距(padding)"></a>3. 内边距(padding)</h1><p>padding属性用于设置内边距。是指边框与内容之间的距离。</p><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a><strong>设置</strong></h3><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>padding-left</td><td>左内边距</td></tr><tr><td>padding-left</td><td>右内边距</td></tr><tr><td>padding-top</td><td>上内边距</td></tr><tr><td>padding-bottom</td><td>下内边距</td></tr></tbody></table><h3 id="padding简写"><a href="#padding简写" class="headerlink" title="padding简写"></a><strong>padding简写</strong></h3><table><thead><tr><th>值的个数</th><th>表达意思</th></tr></thead><tbody><tr><td>1个值</td><td>padding：上下左右内边距;</td></tr><tr><td>2个值</td><td>padding:   上下内边距   左右内边距 ；</td></tr><tr><td>3个值</td><td>padding：上内边距  左右内边距  下内边距；</td></tr><tr><td>4个值</td><td>padding:   上内边距 右内边距 下内边距 左内边距 ；</td></tr></tbody></table><p>当我们给盒子指定padding值之后， 发生了2件事情：</p><ol><li>内容和边框 有了距离，添加了内边距。</li><li>盒子会变大</li></ol><p><strong>解决措施：</strong>通过给设置了宽高的盒子，减去相应的内边距的值，维持盒子原有的大小。</p><p><strong>padding不影响盒子大小情况：</strong>如果没有给一个盒子指定宽度， 此时，如果给这个盒子指定padding， 则不会撑开盒子。</p><h1 id="4-外边距（margin）"><a href="#4-外边距（margin）" class="headerlink" title="4. 外边距（margin）"></a>4. 外边距（margin）</h1><p>margin属性用于设置外边距。margin就是控制<code>盒子和盒子之间的距离</code></p><h2 id="设置-1"><a href="#设置-1" class="headerlink" title="设置"></a><strong>设置</strong></h2><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>margin-left</td><td>左外边距</td></tr><tr><td>margin-right</td><td>右外边距</td></tr><tr><td>margin-top</td><td>上外边距</td></tr><tr><td>margin-bottom</td><td>下外边距</td></tr></tbody></table><p>margin值的简写 （复合写法）代表意思  跟 padding 完全相同。</p><h2 id="块级盒子水平居中"><a href="#块级盒子水平居中" class="headerlink" title="块级盒子水平居中"></a><strong>块级盒子水平居中</strong></h2><ul><li>盒子必须指定宽度（width）</li><li>然后就给左右的外边距都设置为auto</li></ul><p>实际工作中常用这种方式进行网页布局，示例代码如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.header</span>  &#123; </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">960px</span>; </span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常见的写法，以下三种都可以</p><ul><li>margin-left: auto;  margin-right: auto;</li><li>margin: auto;</li><li>margin: 0 auto;</li></ul><h2 id="文字居中和盒子居中区别"><a href="#文字居中和盒子居中区别" class="headerlink" title="文字居中和盒子居中区别"></a><strong>文字居中和盒子居中区别</strong></h2><ol><li>盒子内的文字水平居中是 text-align: center; 而且还可以让 行内元素和行内块居中对齐</li><li>块级盒子水平居中  左右margin 改为 auto</li></ol><h2 id="插入图片和背景图片区别"><a href="#插入图片和背景图片区别" class="headerlink" title="插入图片和背景图片区别"></a><strong>插入图片和背景图片区别</strong></h2><ol><li><code>插入图片</code>我们用的最多 比如产品展示类  移动位置只能靠盒模型 padding margin</li><li><code>背景图片</code>我们一般用于小图标背景或者超大背景图片、背景图片，移动位置只能通过  background-position</li></ol><h2 id="清除元素的默认内外边距"><a href="#清除元素的默认内外边距" class="headerlink" title="清除元素的默认内外边距"></a><strong>清除元素的默认内外边距</strong></h2><ul><li>行内元素为了照顾兼容性,尽量只设置左右内外边距，不要设置上下内外边距。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">   <span class="attribute">padding</span>:<span class="number">0</span>;         <span class="comment">/* 清除内边距 */</span></span><br><span class="line">   <span class="attribute">margin</span>:<span class="number">0</span>;          <span class="comment">/* 清除外边距 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-外边距合并"><a href="#5-外边距合并" class="headerlink" title="5.外边距合并"></a>5.外边距合并</h1><p>使用margin定义块元素的<strong>「垂直外边距」</strong>时，可能会出现外边距的合并。</p><h2 id="1-相邻块元素垂直外边距的合并"><a href="#1-相邻块元素垂直外边距的合并" class="headerlink" title="(1). 相邻块元素垂直外边距的合并"></a>(1). 相邻块元素垂直外边距的合并</h2><ul><li>当上下相邻的两个块元素相遇时，如果上面的元素有下外边距margin-bottom</li><li>下面的元素有上外边距margin-top，则他们之间的垂直间距不是margin-bottom与margin-top之和</li><li><strong>「取两个值中的较大者」</strong>这种现象被称为相邻块元素垂直外边距的合并（也称外边距塌陷）。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207082147271.png"></p><p><strong>「解决方案：尽量给只给一个盒子添加margin值」</strong>。</p><h2 id="2-嵌套块元素垂直外边距的合并（塌陷）"><a href="#2-嵌套块元素垂直外边距的合并（塌陷）" class="headerlink" title="(2). 嵌套块元素垂直外边距的合并（塌陷）"></a>(2). 嵌套块元素垂直外边距的合并（塌陷）</h2><ul><li>对于两个嵌套关系的块元素，如果父元素没有<strong>上内边距及边框</strong></li><li>父元素的上外边距会与子元素的上外边距发生合并</li><li>合并后的外边距为两者中的较大者</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207082149140.png"></p><p><strong>「解决方案：」</strong></p><ol><li>可以为父元素定义上边框。</li><li>可以为父元素定义上内边距</li><li>可以为父元素添加overflow: hidden。</li></ol><p>还有其他方法，比如浮动、固定、绝对定位的盒子不会有问题，后面咱们再总结。。。</p><h2 id="盒子模型布局稳定性"><a href="#盒子模型布局稳定性" class="headerlink" title="盒子模型布局稳定性"></a>盒子模型布局稳定性</h2><p>优先使用  宽度 （width）  其次 使用内边距（padding）   再次  外边距（margin）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">width</span> &gt;  <span class="attribute">padding</span>  &gt;   <span class="attribute">margin</span>   </span><br></pre></td></tr></table></figure><p><strong>原因：</strong></p><ul><li>margin 会有外边距合并 还有 ie6下面margin 加倍的bug（讨厌）所以最后使用。</li><li>padding  会影响盒子大小， 需要进行加减计算（麻烦） 其次使用。</li><li>width  没有问题（嗨皮）我们经常使用宽度剩余法 高度剩余法来做。</li></ul><h1 id="6-CSS3-新增"><a href="#6-CSS3-新增" class="headerlink" title="6. CSS3 新增"></a>6. CSS3 新增</h1><h2 id="圆角边框："><a href="#圆角边框：" class="headerlink" title="圆角边框："></a><strong>圆角边框：</strong></h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>:length;</span><br><span class="line"></span><br><span class="line"><span class="attribute">border-top-left-radius</span>   定义了左上角的弧度</span><br><span class="line"><span class="attribute">border-top-right-radius</span>   定义了右上角的弧度</span><br><span class="line"><span class="attribute">border-bottom-right-radius</span>   定义了右下角的弧度</span><br><span class="line"><span class="attribute">border-bottom-left-radius</span>   定义了左下角的弧度</span><br></pre></td></tr></table></figure><ul><li>其中每一个值可以为 数值或百分比的形式。</li><li>技巧：让一个正方形 变成圆圈</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207082152730.png"></p><p>如果要在四个角上一一指定，可以使用以下规则：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>: 左上角 右上角  右下角  左下角;</span><br></pre></td></tr></table></figure><ol><li>四个值: 第一个值为左上角，第二个值为右上角，第三个值为右下角，第四个值为左下角。</li><li>三个值: 第一个值为左上角, 第二个值为右上角和左下角，第三个值为右下角</li><li>两个值: 第一个值为左上角与右下角，第二个值为右上角与左下角</li><li>一个值：四个圆角值相同</li></ol><h2 id="盒子阴影-box-shadow-："><a href="#盒子阴影-box-shadow-：" class="headerlink" title="盒子阴影(box-shadow)："></a><strong>盒子阴影(box-shadow)：</strong></h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>: offset-x offset-y [blur [spread]] [color] [inset]</span><br></pre></td></tr></table></figure><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>offset-x</td><td>阴影的水平偏移量。正数向右偏移，负数向左偏移。</td></tr><tr><td>offset-y</td><td>阴影的垂直偏移量。正数向下偏移，负数向上偏移。</td></tr><tr><td>blur</td><td>可选。阴影模糊距离，不能取负数。</td></tr><tr><td>spread</td><td>可选。阴影大小</td></tr><tr><td>color</td><td>可选。阴影的颜色</td></tr><tr><td>inset</td><td>可选。表示添加内阴影，默认为外阴影</td></tr></tbody></table><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">   <span class="attribute">border</span>: <span class="number">10px</span> solid red;</span><br><span class="line">   <span class="comment">/* box-shadow: 5px 5px 3px 4px rgba(0, 0, 0, .4);  */</span></span><br><span class="line">   <span class="comment">/* box-shadow:水平位置 垂直位置 模糊距离 阴影尺寸（影子大小） 阴影颜色  内/外阴影； */</span></span><br><span class="line">   <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">15px</span> <span class="number">30px</span>  <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">4</span>);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小白的前端之路 </tag>
            
            <tag> CSS基础 </tag>
            
            <tag> CSS三大重点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS属性</title>
      <link href="/%E5%89%8D%E7%AB%AF/CSS%E5%B1%9E%E6%80%A7/"/>
      <url>/%E5%89%8D%E7%AB%AF/CSS%E5%B1%9E%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS字体样式"><a href="#CSS字体样式" class="headerlink" title="CSS字体样式"></a>CSS字体样式</h1><h2 id="「1-font-size」"><a href="#「1-font-size」" class="headerlink" title="「1. font-size」"></a><strong>「1. font-size」</strong></h2><ul><li>font-size属性用于设置字号(字体大小)</li><li><code>谷歌浏览器</code>默认的文字大小为16px</li><li>不同浏览器可能默认显示的字号大小不一致，我们尽量给一个明确值大小，不要默认大小。一般给body指定整个页面文字的大小。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123; <span class="attribute">font-size</span>:<span class="number">20px</span>; &#125;</span><br></pre></td></tr></table></figure><p><strong>单位</strong></p><p>相对长度单位、绝对长度单位</p><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207081954476.png"></p><h2 id="「2-font-family」"><a href="#「2-font-family」" class="headerlink" title="「2. font-family」"></a><strong>「2. font-family」</strong></h2><p>font-family属性用于设置哪一种字体。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123; <span class="attribute">font-family</span>:<span class="string">&quot;微软雅黑&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><p>指定多个字体，如果浏览器不支持第一个字体就会尝试下一个直到找到合适的字体，如果都没有，以电脑默认字体为准。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;<span class="attribute">font-family</span>: Arial,<span class="string">&quot;Microsoft Yahei&quot;</span>, <span class="string">&quot;微软雅黑&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><p>CSS Unicode字体</p><ul><li>在 CSS 中设置字体名称，直接写中文是可以的。但是在文件编码（GB2312、UTF-8 等）不匹配时会产生乱码的错误。</li><li>xp 系统不支持 类似微软雅黑的中文。</li><li>解决方案：英文来替代。比如<code>font-family:&quot;Microsoft Yahei&quot;</code>。在 CSS 直接使用 Unicode 编码来写字体名称可以避免这些错误。使用 Unicode 写中文字体名称，浏览器是可以正确的解析的。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">font-family</span>: <span class="string">&quot;\5FAE\8F6F\96C5\9ED1&quot;</span>;   表示设置字体为“微软雅黑”。</span><br></pre></td></tr></table></figure><h2 id="「3-font-weight」"><a href="#「3-font-weight」" class="headerlink" title="「3. font-weight」"></a><strong>「3. font-weight」</strong></h2><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>normal</td><td>默认值（不加粗的）</td></tr><tr><td>bold</td><td>定义粗体（加粗的）</td></tr><tr><td>100~900</td><td>400 等同于 normal，而 700 等同于 bold  (数字表示粗细用的多)</td></tr></tbody></table><h2 id="「4-font-style」"><a href="#「4-font-style」" class="headerlink" title="「4. font-style」"></a><strong>「4. font-style」</strong></h2><p>font-style属性用于定义字体风格，如设置斜体、倾斜或正常字体，其可用属性值如下：</p><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>normal</td><td>默认值，浏览器会显示标准的字体样式  font-style: normal;</td></tr><tr><td>italic</td><td>浏览器会显示斜体的字体样式。</td></tr></tbody></table><h2 id="「5-font-综合设置字体样式」"><a href="#「5-font-综合设置字体样式」" class="headerlink" title="「5. font:综合设置字体样式」"></a><strong>「5. font:综合设置字体样式」</strong></h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器 &#123; <span class="attribute">font</span>: font-style  font-weight  font-size/line-height  font-family;&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li><p>使用font属性时，必须按上面语法格式中的顺序书写，不能更换顺序，各个属性以<code>空格</code>隔开</p></li><li><p>其中不需要设置的属性可以省略(取默认值),但必须保留<code>font-size</code>和<code>font-family</code>属性，否则font属性将不起作用</p></li><li></li></ul><h2 id="「6-font总结」"><a href="#「6-font总结」" class="headerlink" title="「6. font总结」"></a><strong>「6. font总结」</strong></h2><table><thead><tr><th>属性</th><th>表示</th><th><strong>注意点</strong></th></tr></thead><tbody><tr><td>font-size</td><td>字号</td><td>我们通常用的单位是px 像素，一定要跟上单位</td></tr><tr><td>font-family</td><td>字体</td><td>实际工作中按照团队约定来写字体</td></tr><tr><td>font-weight</td><td>字体粗细</td><td>记住加粗是 700 或者 bold  不加粗 是 normal 或者  400  记住数字不要跟单位</td></tr><tr><td>font-style</td><td>字体样式</td><td>记住倾斜是 italic   不倾斜 是 normal  工作中我们最常用 normal</td></tr><tr><td>font</td><td>字体连写</td><td>1. 字体连写是有顺序的  不能随意换位置 2. 其中字号 和 字体 必须同时出现</td></tr></tbody></table><h1 id="CSS外观属性"><a href="#CSS外观属性" class="headerlink" title="CSS外观属性"></a>CSS外观属性</h1><h2 id="「1-color」"><a href="#「1-color」" class="headerlink" title="「1. color」"></a><strong>「1. color」</strong></h2><p>color属性用于定义文本的颜色<br>其取值方式有以下3种：</p><p>实际工作中，用16进制的写法是最多的，且我们更喜欢简写方式比如#f0代表红色。</p><table><thead><tr><th>表示</th><th>属性值</th></tr></thead><tbody><tr><td>预定义的颜色值</td><td>red，green，blue，pink</td></tr><tr><td>十六进制</td><td>#FF0000，#FF6600，#29D794</td></tr><tr><td>RGB代码</td><td>rgb(255,0,0)或rgb(100%,0%,0%)</td></tr></tbody></table><h2 id="「2-text-align」"><a href="#「2-text-align」" class="headerlink" title="「2.text-align」"></a><strong>「2.text-align」</strong></h2><p>text-align属性用于设置文本内容的水平对齐方式，相当于html中的align对齐属性。</p><p>注意：是让盒子里面的文本内容水平居中， 而不是让盒子居中对齐</p><p>其可用属性值如下：</p><table><thead><tr><th>属性</th><th>解释</th></tr></thead><tbody><tr><td>left</td><td>左对齐（默认值）</td></tr><tr><td>right</td><td>右对齐</td></tr><tr><td>center</td><td>居中对齐</td></tr></tbody></table><h2 id="「3-line-height」"><a href="#「3-line-height」" class="headerlink" title="「3. line-height」"></a><strong>「3. line-height」</strong></h2><p>line-height属性用于设置行间距，就是行与行之间的距离，即字符的垂直间距，一般称为行高。</p><ul><li>line-height常用的属性值单位有三种，分别为像素px，相对值em和百分比%，实际工作中使用最多的是像素px</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">一般情况下，行距比字号大<span class="number">7</span>--<span class="number">8</span>像素左右就可以了。</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">24px</span>;</span><br></pre></td></tr></table></figure><h3 id="行高测量"><a href="#行高测量" class="headerlink" title="行高测量"></a>行高测量</h3><p>行高测量方法：</p><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207082015839.png"></p><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207082016559.png"></p><p>行高我们利用最多的一个地方是：<strong>可以让单行文本在盒子中垂直居中对齐</strong>。</p><p><strong>文字的行高等于盒子的高度</strong>行高  =  上距离 +  内容高度  + 下距离<br>上距离和下距离总是相等的，因此文字看上去是垂直居中的。</p><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207082017497.png"></p><h3 id="行高与高度的三种关系"><a href="#行高与高度的三种关系" class="headerlink" title="行高与高度的三种关系"></a>行高与高度的三种关系</h3><ul><li>如果 行高 等 高度  文字会 垂直居中</li><li>如果行高 大于 高度  文字会 偏下</li><li>如果行高小于高度  文字会  偏上</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*line-height 要设置在font属性下面，否则无效，例如：*/</span></span><br><span class="line"><span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line"><span class="attribute">text-align</span>: center;</span><br><span class="line"><span class="attribute">font</span>: normal bold <span class="number">30px</span> <span class="string">&quot;宋体&quot;</span>;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">80px</span>;</span><br></pre></td></tr></table></figure><p>可以使用display:flex;布局方式让文字水平垂直居中</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="attribute">align-items</span>: center;     <span class="comment">/* 侧轴对齐方式*/</span></span><br><span class="line"><span class="attribute">justify-content</span>: center; <span class="comment">/* 主轴对齐方式 */</span></span><br></pre></td></tr></table></figure><h2 id="「4-text-indent」"><a href="#「4-text-indent」" class="headerlink" title="「4. text-indent」"></a><strong>「4. text-indent」</strong></h2><p>text-indent属性用于设置首行文本的缩进</p><ul><li>其属性值可为不同单位的数值、em字符宽度的倍数、或相对于浏览器窗口宽度的百分比%，允许使用负值。</li><li>建议使用em作为设置单位。</li><li>1em 就是一个字的宽度。如果是汉字的段落，1em 就是一个汉字的宽度</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">      <span class="comment">/*行间距*/</span></span><br><span class="line">      <span class="attribute">line-height</span>: <span class="number">25px</span>;</span><br><span class="line">      <span class="comment">/*首行缩进2个字  em  1个em 就是1个字的大小*/</span></span><br><span class="line">      <span class="attribute">text-indent</span>: <span class="number">2em</span>;  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="「5-text-decoration」"><a href="#「5-text-decoration」" class="headerlink" title="「5. text-decoration」"></a><strong>「5. text-decoration」</strong></h2><p>文本的装饰text-decoration,通常我们用于给链接修改装饰效果</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>none</td><td>默认。定义标准的文本。取消下划线（最常用）</td></tr><tr><td>underline</td><td>定义文本下的一条线。下划线 也是我们链接自带的（常用）</td></tr><tr><td>overline</td><td>定义文本上的一条线。（不用）</td></tr><tr><td>line-through</td><td>定义穿过文本下的一条线。（不常用）</td></tr></tbody></table><h2 id="「6-CSS外观属性总结」"><a href="#「6-CSS外观属性总结」" class="headerlink" title="「6. CSS外观属性总结」"></a><strong>「6. CSS外观属性总结」</strong></h2><table><thead><tr><th>属性</th><th>表示</th><th>注意点</th></tr></thead><tbody><tr><td>color</td><td>颜色</td><td>我们通常用  十六进制  比如 而且是简写形式 #fff</td></tr><tr><td>line-height</td><td>行高</td><td>控制行与行之间的距离</td></tr><tr><td>text-align</td><td>水平对齐</td><td>可以设定文字水平的对齐方式</td></tr><tr><td>text-indent</td><td>首行缩进</td><td>通常我们用于段落首行缩进2个字的距离  text-indent: 2em;</td></tr><tr><td>text-decoration</td><td>文本修饰</td><td>记住 添加 下划线  underline  取消下划线  none</td></tr></tbody></table><h1 id="标签显示模式"><a href="#标签显示模式" class="headerlink" title="标签显示模式"></a>标签显示模式</h1><p><code>标签显示模式</code>是标签以什么方式进行显示。HTML标签一般分为块标签和行内标签两种类型，它们也称为块元素和行内元素</p><p><strong>标签显示模式转换 display</strong></p><ul><li>块转行内：display:inline;</li><li>行内转块：display:block;</li><li>块、行内元素转换为行内块：display: inline-block;</li></ul><h2 id="「1-块级元素-block-level-」"><a href="#「1-块级元素-block-level-」" class="headerlink" title="「1. 块级元素(block-level)」"></a><strong>「1. 块级元素(block-level)」</strong></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">常见的块元素有<span class="tag">&lt;<span class="name">h1</span>&gt;</span>~<span class="tag">&lt;<span class="name">h6</span>&gt;</span>、<span class="tag">&lt;<span class="name">p</span>&gt;</span>、<span class="tag">&lt;<span class="name">div</span>&gt;</span>、<span class="tag">&lt;<span class="name">ul</span>&gt;</span>、<span class="tag">&lt;<span class="name">ol</span>&gt;</span>、<span class="tag">&lt;<span class="name">li</span>&gt;</span>等，其中<span class="tag">&lt;<span class="name">div</span>&gt;</span>标签是最典型的块元素。</span><br></pre></td></tr></table></figure><h3 id="块级元素的特点"><a href="#块级元素的特点" class="headerlink" title="块级元素的特点"></a>块级元素的特点</h3><ul><li>独占一行</li><li>高度，宽度，外边距以及内边距都可以控制。</li><li>宽度默认是容器(父级宽度)的100%</li><li>是一个容器及盒子，里面可以放行内或者块级元素</li><li><strong>注意</strong>：只有文字才能组成段落，因此p标签里面不能放块级元素，特别是p不能放div。同理，还有h1~h6，dt,它们都是文字类块级标签，里面不能放其他块级元素。</li></ul><h2 id="「2-行内元素-inline-level-」"><a href="#「2-行内元素-inline-level-」" class="headerlink" title="「2. 行内元素(inline-level)」"></a><strong>「2. 行内元素(inline-level)」</strong></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">有的地方也称为内联元素</span><br><span class="line"></span><br><span class="line">常见的行内元素有<span class="tag">&lt;<span class="name">a</span>&gt;</span>、<span class="tag">&lt;<span class="name">strong</span>&gt;</span>、<span class="tag">&lt;<span class="name">b</span>&gt;</span>、<span class="tag">&lt;<span class="name">em</span>&gt;</span>、<span class="tag">&lt;<span class="name">i</span>&gt;</span>、<span class="tag">&lt;<span class="name">del</span>&gt;</span>、<span class="tag">&lt;<span class="name">s</span>&gt;</span>、<span class="tag">&lt;<span class="name">ins</span>&gt;</span>、<span class="tag">&lt;<span class="name">u</span>&gt;</span>、<span class="tag">&lt;<span class="name">span</span>&gt;</span>等，其中<span class="tag">&lt;<span class="name">span</span>&gt;</span>标签最典型的行内元素。</span><br></pre></td></tr></table></figure><h3 id="行内元素的特点"><a href="#行内元素的特点" class="headerlink" title="行内元素的特点"></a>行内元素的特点</h3><ol><li>相邻行内元素在一行上，一行可以显示多个。</li><li>高度、宽度直接设置是无效的。</li><li>默认高度就是它本身内容的宽度。</li><li>行内元素只能容纳文本或其他行内元素。</li></ol><h6 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h6><ul><li>链接里面不能再放链接</li><li>特殊情况a里面可以放块级元素，但是给a转换一下块级模式最安全。</li></ul><h2 id="「3-行内块元素-inline-block-」"><a href="#「3-行内块元素-inline-block-」" class="headerlink" title="「3. 行内块元素(inline-block)」"></a><strong>「3. 行内块元素(inline-block)」</strong></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在行内元素中有几个特殊的标签——<span class="tag">&lt;<span class="name">img</span>&gt;</span>、<span class="tag">&lt;<span class="name">input</span> &gt;</span>、<span class="tag">&lt;<span class="name">td</span>&gt;</span>，可以对它们设置宽高和对齐属性，有些资料可能会称它们为行内块元素。</span><br></pre></td></tr></table></figure><h3 id="行内块元素的特点"><a href="#行内块元素的特点" class="headerlink" title="行内块元素的特点"></a><strong>行内块元素的特点</strong></h3><ol><li>和相邻行内元素(行内块)在一行上，但是之间会有空白风险。一行可以显示多个</li><li>默认宽度就是它本身内容的宽度。</li><li>高度，行高，外边距以及内边距都可以控制。</li></ol><h2 id="三种模式总结"><a href="#三种模式总结" class="headerlink" title="三种模式总结"></a>三种模式总结</h2><table><thead><tr><th>元素模式</th><th>元素排列</th><th>设置样式</th><th>默认宽度</th><th>包含</th></tr></thead><tbody><tr><td>块级元素</td><td>一行只能放一个块级元素</td><td>可以设置宽度高度</td><td>容器的100%</td><td>容器级可以包含任何标签</td></tr><tr><td>行内元素</td><td>一行可以放多个行内元素</td><td>不可设置宽度高度</td><td>它本身内容的宽度</td><td>容纳文本或其他行内元素</td></tr><tr><td>行内块元素</td><td>一行可以放多个行内块元素</td><td>可以设置宽度高度</td><td>它本身内容的宽度</td><td></td></tr></tbody></table><h1 id="CSS背景-background"><a href="#CSS背景-background" class="headerlink" title="CSS背景(background)"></a>CSS背景(background)</h1><ol><li></li></ol><h2 id="「1-背景颜色」"><a href="#「1-背景颜色」" class="headerlink" title="「1. 背景颜色」"></a><strong>「1. 背景颜色」</strong></h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-color</span>: 颜色值;   默认的值是 transparent  透明的</span><br></pre></td></tr></table></figure><h2 id="「2-背景图片-image-」"><a href="#「2-背景图片-image-」" class="headerlink" title="「2. 背景图片(image)」"></a><strong>「2. 背景图片(image)」</strong></h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line"><span class="attribute">background-image</span> : none | url (url) ;</span><br><span class="line">例如:</span><br><span class="line">background-image: <span class="built_in">url</span>(<span class="string">images/1.png</span>);</span><br></pre></td></tr></table></figure><h2 id="「3-背景平铺（repeat）」"><a href="#「3-背景平铺（repeat）」" class="headerlink" title="「3. 背景平铺（repeat）」"></a><strong>「3. 背景平铺（repeat）」</strong></h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-repeat</span> : repeat | no-repeat | repeat-x | repeat-y </span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>repeat</td><td>背景图像在纵向和横向上平铺（默认的）</td></tr><tr><td>no-repeat</td><td>背景图像不平铺</td></tr><tr><td>repeat-x</td><td>背景图像在横向上平铺</td></tr><tr><td>repeat-y</td><td>背景图像在纵向平铺</td></tr></tbody></table><h2 id="「4-背景位置-position-」"><a href="#「4-背景位置-position-」" class="headerlink" title="「4. 背景位置(position)」"></a><strong>「4. 背景位置(position)」</strong></h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-position</span> : length || length</span><br><span class="line">background-position : position || position </span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>值</th></tr></thead><tbody><tr><td>length</td><td>百分数 | 由浮点数字和单位标识符组成的长度值</td></tr><tr><td>position</td><td>top | center | bottom | left | center | right  方位名词</td></tr></tbody></table><p><strong>注意：</strong></p><ul><li>必须先指定background-image属性</li><li>position 后面是x坐标和y坐标。可以使用方位名词或者 精确单位。</li><li>如果指定两个值，两个值都是方位名字，则两个值前后顺序无关，比如left  top和top  left效果一致</li><li>如果只指定了一个方位名词，另一个值默认居中对齐。</li><li>如果position 后面是精确坐标， 那么第一个，肯定是 x 第二个一定是y</li><li>如果只指定一个数值,那该数值一定是x坐标，另一个默认垂直居中</li><li>如果指定的两个值是 精确单位和方位名字混合使用，则第一个值是x坐标，第二个值是y坐标</li></ul><h3 id="背景简写："><a href="#背景简写：" class="headerlink" title="背景简写："></a>背景简写：</h3><ul><li>background：属性的值的书写顺序官方没有强制的标准。为了可读性，建议如下写：</li><li>background: 背景颜色 背景图片地址 背景平铺 背景滚动 背景位置;</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 有背景图片背景颜色可以不用写*/</span></span><br><span class="line"><span class="attribute">background</span>: transparent <span class="built_in">url</span>(<span class="string">image.jpg</span>) repeat-y  scroll center top ;</span><br></pre></td></tr></table></figure><h2 id="「5-背景半透明-CSS3-」"><a href="#「5-背景半透明-CSS3-」" class="headerlink" title="「5. 背景半透明(CSS3)」"></a><strong>「5. 背景半透明(CSS3)」</strong></h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.3</span>);</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">3</span>);</span><br></pre></td></tr></table></figure><ul><li>等同于background-color: rgba(0, 0, 0, .3)</li><li>最后一个参数是alpha 透明度 取值范围 0~1之间</li><li>我们习惯把0.3 的 0 省略掉 这样写 background: rgba(0, 0, 0, .3);</li><li>注意：背景半透明是指盒子背景半透明，盒子里面的内容不受影响</li><li>低于IE 9的版本不支持</li></ul><h3 id="盒子半透明-opacity"><a href="#盒子半透明-opacity" class="headerlink" title="盒子半透明 opacity"></a>盒子半透明 opacity</h3><p>设置opacity元素的所有后代元素会随着一起具有透明性，一般用于调整图片或者模块的整体不透明度</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">opacity</span>: .<span class="number">2</span>;</span><br></pre></td></tr></table></figure><h2 id="「6-背景总结」"><a href="#「6-背景总结」" class="headerlink" title="「6. 背景总结」"></a><strong>「6. 背景总结」</strong></h2><table><thead><tr><th>属性</th><th>作用</th><th>值</th></tr></thead><tbody><tr><td>background-color</td><td>背景颜色</td><td>预定义的颜色值/十六进制/RGB代码</td></tr><tr><td>background-image</td><td>背景图片</td><td>url(图片路径)</td></tr><tr><td>background-repeat</td><td>是否平铺</td><td>repeat/no-repeat/repeat-x/repeat-y</td></tr><tr><td>background-position</td><td>背景位置</td><td>length/position   分别是x  和 y坐标， 切记 如果有 精确数值单位，则必须按照先X 后Y 的写法</td></tr><tr><td>background-attachment</td><td>背景固定还是滚动</td><td>scroll/fixed</td></tr><tr><td>背景简写</td><td>更简单</td><td>背景颜色 背景图片地址 背景平铺 背景滚动 背景位置;  他们没有顺序</td></tr><tr><td>背景透明</td><td>让盒子半透明</td><td>background: rgba(0,0,0,0.3);  后面必须是 4个值</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小白的前端之路 </tag>
            
            <tag> CSS基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS选择器</title>
      <link href="/%E5%89%8D%E7%AB%AF/CSS%E9%80%89%E6%8B%A9%E5%99%A8/"/>
      <url>/%E5%89%8D%E7%AB%AF/CSS%E9%80%89%E6%8B%A9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="选择器简介"><a href="#选择器简介" class="headerlink" title="选择器简介"></a>选择器简介</h1><h2 id="「1-1作用」"><a href="#「1-1作用」" class="headerlink" title="「1.1作用」"></a>「1.1作用」</h2><p>选择器（选择符）就是根据不同需求把不同的标签选出来，这就是选择器的作用。简单来说，就是选择标签用的。 CSS做了两件事： </p><ol><li>找到标签（选对人）</li><li>设置这些标签的样式（做对事）</li></ol><h2 id="「1-2分类」"><a href="#「1-2分类」" class="headerlink" title="「1.2分类」"></a>「1.2分类」</h2><p>在CSS中，可以根据选择器类型把选择器分为<strong>基础选择器</strong>和<strong>复合选择器</strong>。</p><ul><li>基础选择器是由单个选择器组成的 </li><li>基础选择器又包括：<strong>标签选择器、类选择器、id选择器、通配符选择器</strong></li></ul><p>复合选择器是建立在基础选择器之上，对基础选择器进行组合形成的。</p><ul><li>复合选择器可以更精准，更高效的选择目标元素（标签）</li><li>复合选择器是有两个或多个基础选择器，通过不同的方式组合而成的</li><li>常用的复合选择器包括：<strong>后代选择器，子选择器，并集选择器，伪类选择器等</strong></li></ul><h1 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h1><h2 id="「2-1标签选择器」"><a href="#「2-1标签选择器」" class="headerlink" title="「2.1标签选择器」"></a>「2.1标签选择器」</h2><p>标签选择器（元素选择器）是指用HTML标签名称作为选择器，按标签名称分类，为页面中某一类标签指定统一的CSS样式。 </p><ul><li>作用: 标签选择器可以把某一类标签全部选择出来，比如所有的div标签和所有的span标签。 </li><li>优点: 能快速为页面中同类型的标签统一设置样式。 </li><li>缺点: 不能设计差异化样式，只能选择全部的当前标签。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">标签名 &#123; 属性<span class="number">1</span>:属性值<span class="number">1</span>;</span><br><span class="line">        属性<span class="number">2</span>:属性值<span class="number">2</span>; </span><br><span class="line">        属性<span class="number">3</span>:属性值<span class="number">3</span>; </span><br><span class="line">      &#125; </span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><h2 id="「2-2类选择器」"><a href="#「2-2类选择器」" class="headerlink" title="「2.2类选择器」"></a>「2.2类选择器」</h2><p>如果想要差异化选择不同的标签，单独选一个或者某几个标签，可以使用类选择器。</p><p>类选择器在HTML中以class属性表示，在CSS中，类选择器以一个点“ <strong>.</strong> ”号显示。 </p><p><strong>注意</strong></p><ul><li> ①类选择器使用 .（英文点号）进行标识，后面紧跟类名（自定义，我们自己命名的）。 </li><li> ②可以理解为给这个标签起了一个名字来表示。 </li><li> ③长名称或词组可以使用中横线来为选择器命名。 </li><li> ④不要使用纯数字、中文等命名，尽量使用英文字母来表示。 </li><li> ⑤命名要有意义，尽量使别人一眼就知道这个类名的目的。 </li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.类名<span class="number">1</span>  &#123;   </span><br><span class="line">    属性<span class="number">1</span>: 属性值<span class="number">1</span>; </span><br><span class="line">    属性<span class="number">2</span>: 属性值<span class="number">2</span>; </span><br><span class="line">    属性<span class="number">3</span>: 属性值<span class="number">3</span>;     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;类名1 类名2&quot;</span>&gt;</span> 样例 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>各个类名中间用空格隔开</li><li>简单理解：就是给某个标签添加了多个类，或者这个标签有多个名字</li><li>这个标签就可以分别具有这些类名的样式</li><li>从而节省css代码，统一修改也非常方便</li><li>多个类名选择器在后期布局比较复杂的情况下，还是较多使用的</li></ul><h2 id="「2-3id选择器」"><a href="#「2-3id选择器」" class="headerlink" title="「2.3id选择器」"></a>「2.3id选择器」</h2><p>id选择器可以为标有特定id的HTML元素指定特定的样式。</p><p>HTML元素以id属性来设置id选择器，CSS中id选择器以“ <strong>#</strong> ”来定义。</p><ul><li><strong>注意</strong>：id属性只能在每个HTML文档中出现一次</li><li><strong>口诀</strong>：样式#定义，结构id调用，只能调用一次，别人切勿使用</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#id</span>名 &#123; 属性<span class="number">1</span>:属性值<span class="number">1</span>; </span><br><span class="line">        属性<span class="number">2</span>:属性值<span class="number">2</span>; </span><br><span class="line">        属性<span class="number">3</span>:属性值<span class="number">3</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;id名&quot;</span>&gt;</span>样例<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="id选择器和类选择器的区别"><a href="#id选择器和类选择器的区别" class="headerlink" title="id选择器和类选择器的区别"></a><strong>id选择器和类选择器的区别</strong></h3><ol><li>类选择器(class)好比人的名字，一个人可以有多个名字，同时一个名字也可以被多个人使用。 </li><li>id选择器好比人的身份证号码β、全中国是唯一的,不得重复。 </li><li>id选择器和类选择器最大的不同在于使用次数上。 </li><li>类选择器在修改样式中用的最多，id选择器一般用于页面唯一性的元素上，经常和 JavaScript 搭配使用。</li></ol><h2 id="「2-4通配符选择器」"><a href="#「2-4通配符选择器」" class="headerlink" title="「2.4通配符选择器」"></a>「2.4通配符选择器」</h2><p>在CSS中，通配符选择器使用*定义，它表示选取页面中所有元素(标签)。</p><ul><li>通配符选择器不需要调用，自动就给所有的元素使用样式</li><li>特殊情况才使用，后面讲解使用</li></ul><p><strong>注意：</strong>会匹配页面所有的元素，降低页面响应速度，不建议随便使用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* &#123; 属性<span class="number">1</span>:属性值<span class="number">1</span>; </span><br><span class="line">    属性<span class="number">2</span>:属性值<span class="number">2</span>; </span><br><span class="line">    属性<span class="number">3</span>:属性值<span class="number">3</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如下面代码，使用通配符选择器定义CSS样式，清除所有HTML标记的默认边距。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">   <span class="attribute">margin</span>: <span class="number">0</span>;                    <span class="comment">/* 定义外边距*/</span></span><br><span class="line">   <span class="attribute">padding</span>: <span class="number">0</span>;                   <span class="comment">/* 定义内边距*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-5基础选择器总结"><a href="#2-5基础选择器总结" class="headerlink" title="2.5基础选择器总结"></a>2.5基础选择器总结</h2><table><thead><tr><th>标签选择器</th><th>作用</th><th>特点</th><th>使用情况</th><th>用法</th></tr></thead><tbody><tr><td>标签选择器</td><td>可以选出所有相同的标签</td><td>不能差异化选择</td><td>较多</td><td>p {color: red}</td></tr><tr><td>类选择器</td><td>可以选出一个或多个标签</td><td>可以根据需求选择</td><td>最多</td><td>.nav {color: red}</td></tr><tr><td>id选择器</td><td>一次只能选择一个标签</td><td>id属性在每个html文档中只能出现一次</td><td>一般和js搭配</td><td>#nav {color: red}</td></tr><tr><td>通配符选择器</td><td>选择所有标签</td><td>选择过多，有部分不需要</td><td>特殊情况使用</td><td>* {color: red}</td></tr></tbody></table><p>每个基础选择器都有使用场景，都需要掌握，如果是修改样式，类选择器是使用最多的</p><h1 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a>复合选择器</h1><h2 id="「3-1后代选择器」"><a href="#「3-1后代选择器」" class="headerlink" title="「3.1后代选择器」"></a>「3.1后代选择器」</h2><p>后代选择器又称为包含选择器，可以选择父元素里面的子元素，其写法就是把外层标签写在前面，内层标签写在后面，中间用空格分隔，当标签发生嵌套时，内层标签就成为外层标签的后代。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">元素<span class="number">1</span> 元素<span class="number">2</span> &#123;属性:属性值;</span><br><span class="line">    属性:属性值;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.class</span> <span class="selector-tag">h3</span> &#123;<span class="attribute">color</span>:red;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">16px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述语法表示选择元素1里面的所有元素2（后代元素）</p><ul><li>元素1和元素2中间用空格隔开</li><li>元素1是父级，元素2是子级，<strong>最终选择的是元素2</strong></li><li>元素2可以是儿子，也可以是孙子等，只要是元素1 的后代即可</li><li>元素1和元素2可以是任意基础选择器</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/CSS4.png"></p><h2 id="「3-2子选择器」"><a href="#「3-2子选择器」" class="headerlink" title="「3.2子选择器」"></a>「3.2子选择器」</h2><p>子元素选择器（子选择器）只能选择作为某元素的最近一级子元素，简单理解就是选亲儿子元素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">元素<span class="number">1</span>&gt;元素<span class="number">2</span> &#123;样式声明</span><br><span class="line">    属性:属性值;</span><br><span class="line">    属性:属性值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述语法表示选择元素1里面的所有直接后代（子元素）元素2.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&gt;<span class="selector-tag">p</span> &#123;样式声明&#125;  <span class="comment">/*选择div里面所有最近一级p标签元素*/</span></span><br></pre></td></tr></table></figure><ul><li>元素1和元素2中间用大于号隔开</li><li>元素1是父级，元素2是子级，<strong>最终选择的是元素2</strong></li><li>元素2必须是亲儿子，其孙子，重孙之类都不归他管，你也可以叫他亲儿子选择器</li></ul><h2 id="「3-3交集选择器」"><a href="#「3-3交集选择器」" class="headerlink" title="「3.3交集选择器」"></a>「3.3交集选择器」</h2><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/CSS5.png"></p><p>其中第一个为标签选择器，第二个为class选择器，两个选择器之间<code>不能有空格</code>，如h3.special。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">交集选择器是并且的意思,即...又...的意思</span><br><span class="line">比如：   </span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.one</span>    </span><br><span class="line"><span class="comment">/* 选择的是： 类名为 .one 的段落标签。</span></span><br><span class="line"><span class="comment">用的相对来说比较少，不建议使用。*/</span></span><br></pre></td></tr></table></figure><h2 id="「3-4并集选择器」"><a href="#「3-4并集选择器」" class="headerlink" title="「3.4并集选择器」"></a>「3.4并集选择器」</h2><p>并集选择器可以选择多组标签，同时为他们定义相同的样式，通常用于整体声明。</p><p>并集选择器是个选择器通过英文逗号“,”连接而成，任何形式的选择器都可以作为并集选择器的一部分。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">元素<span class="number">1</span>,元素<span class="number">2</span> &#123;样式声明&#125;</span><br></pre></td></tr></table></figure><p>上述语法表示选择元素1和元素2</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span>,<span class="selector-tag">div</span></span><br><span class="line">&#123;</span><br><span class="line">    样式声明</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/*选择ul和div标签元素*/</span></span><br><span class="line"><span class="selector-class">.one</span>,<span class="selector-tag">p</span>,<span class="selector-id">#test</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#F00</span>;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">/*表示 .one 和 p  和 #test 这三个选择器都会执行颜色为红色。 */</span></span><br><span class="line"><span class="comment">/*通常用于集体声明。 */</span></span><br></pre></td></tr></table></figure><ul><li>元素1和元素2中间用逗号隔开</li><li>逗号可以理解为和的意思</li><li>并集选择器通常用于集体声明</li></ul><h2 id="「3-5链接伪类选择器」"><a href="#「3-5链接伪类选择器」" class="headerlink" title="「3.5链接伪类选择器」"></a>「3.5链接伪类选择器」</h2><p>伪类选择器用于向某些选择器添加特殊的效果，比如给链接添加特殊效果，或选择第一个，第n个元素。</p><p>伪类选择器书写最大的特点是用冒号:表示，比如：hover,first-child.</p><p>因为伪类选择器很多，比如有链接伪类，结构伪类等，所以这里先给大家讲解常用的链接伪类选择器。</p><p>链接伪类，是利用交集选择器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span>            <span class="comment">/*选择所有未被访问的链接*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>         <span class="comment">/*选择所有已被访问的链接*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>           <span class="comment">/*选择鼠标指针位于其上的链接*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span>          <span class="comment">/*选择活动链接（鼠标按下未弹起的链接）*/</span></span><br></pre></td></tr></table></figure><p>写的时候，他们的顺序尽量不要颠倒，按照lvha的顺序。否则可能引起错误。</p><p><strong>注意事项</strong></p><ol><li>为确保生效，请按照LVHA的顺序声明：link visited hover active</li><li>记忆法：love hate或者Lv包包hao</li><li>因为a链接在浏览器中具有默认样式，所以我们实际工作中都需要给链接单独指定样式</li></ol><p>实际工作中，很少写全四个状态，一般写法如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* a是标签选择器  所有的链接 */</span></span><br><span class="line"><span class="selector-tag">a</span> &#123;   </span><br><span class="line">   <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">   <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">   <span class="attribute">color</span>: gray;</span><br><span class="line">   <span class="attribute">text-decoration</span>: none; <span class="comment">/* 清除链接默认的下划线*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* :hover 是链接伪类选择器 鼠标经过 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;   </span><br><span class="line">   <span class="attribute">color</span>: red; <span class="comment">/*  鼠标经过的时候，由原来的 灰色 变成了红色 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="「3-6foucs伪类选择器」"><a href="#「3-6foucs伪类选择器」" class="headerlink" title="「3.6foucs伪类选择器」"></a>「3.6foucs伪类选择器」</h2><p>foucs伪类选择器用于选取获得焦点的表单元素。</p><p>焦点就是光标，一般情况下类表单元素才能获取，因此这个选择器也主要针对表单元素来说。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span>:foucs &#123;</span><br><span class="line">    background-color:yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="「3-7复合选择器总结」"><a href="#「3-7复合选择器总结」" class="headerlink" title="「3.7复合选择器总结」"></a>「3.7复合选择器总结」</h2><table><thead><tr><th>选择器</th><th>作用</th><th>特征</th><th>使用情况</th><th>隔开符号及用法</th></tr></thead><tbody><tr><td>后代选择器</td><td>用来选择后代元素</td><td>可以是子孙后代</td><td>较多</td><td>符号是空格.nav a</td></tr><tr><td>子选择器</td><td>选择最近一级元素</td><td>只选亲儿子</td><td>较少</td><td>符号是大于.nav&gt;a</td></tr><tr><td>交集选择器</td><td>选择两个标签交集部分</td><td>既是 又是</td><td>较少</td><td>没有符号 p.one</td></tr><tr><td>并集选择器</td><td>选择某些相同样式的元素</td><td>可以用于集体声明</td><td>较多</td><td>符号是逗号.nav,a</td></tr><tr><td>链接伪类选择器</td><td>选择不同状态的链接</td><td>跟链接相关</td><td>较多</td><td>重点记住a{}和a:hover实际开发的写法</td></tr><tr><td>foucs伪类选择器</td><td>选择获得光标的表单</td><td>跟表单相关</td><td>较少</td><td>input:focus记住这个写法</td></tr></tbody></table><h1 id="团队约定"><a href="#团队约定" class="headerlink" title="团队约定"></a>团队约定</h1><ol><li>尽量少用通配符选择器 <code>*</code></li><li>尽量少用ID选择器</li><li>不使用无具体语义定义的标签选择器</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 推荐 */</span></span><br><span class="line"><span class="selector-class">.jdc</span> &#123;&#125;</span><br><span class="line"><span class="selector-tag">li</span> &#123;&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;&#125;</span><br><span class="line"><span class="comment">/* 不推荐 */</span></span><br><span class="line">*&#123;&#125;</span><br><span class="line"><span class="selector-id">#jdc</span> &#123;&#125;</span><br><span class="line"><span class="selector-tag">div</span>&#123;&#125;   <span class="comment">/*因为div 没有语义，我们尽量少用*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小白的前端之路 </tag>
            
            <tag> CSS基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS基础</title>
      <link href="/%E5%89%8D%E7%AB%AF/CSS%E5%9F%BA%E7%A1%80/"/>
      <url>/%E5%89%8D%E7%AB%AF/CSS%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS简介"><a href="#CSS简介" class="headerlink" title="CSS简介"></a>CSS简介</h1><h2 id="「1-1HTML的局限性」"><a href="#「1-1HTML的局限性」" class="headerlink" title="「1.1HTML的局限性」"></a>「1.1HTML的局限性」</h2><ul><li>HTML满足不了设计者的需求，可以将网页结构与样式相分离，这样就可以在不更改网页结构的前提下，更换网站的样式。</li><li>操作html属性不方便</li><li>HTML里面添加样式带来的是无尽的臃肿和繁琐</li></ul><h2 id="「1-2CSS网页美容师」"><a href="#「1-2CSS网页美容师」" class="headerlink" title="「1.2CSS网页美容师」"></a>「1.2CSS网页美容师」</h2><p>CSS是<font color="red">层叠样式表</font>(Cascading Style Sheets)的简称,有时我们也会称之为CSS样式表或级联样式表，CSS是也是一种<font color="red">标记语言</font>。主要用于设置HTML页面中的<font color="red">文本内容</font>(字体、大小、对齐方式等)、<font color="red">图片外形</font>(宽高、边框样式、边距等）以及<font color="red">版面布局</font>和<font color="red">外观显示样式</font>。CSS让我们的网页更加丰富多彩，布局更加灵活自如。简单理解：<strong>CSS可以美化HTML，让HTML更漂亮，让页面布局更简洁。</strong></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a><strong>总结</strong>：</h3><ul><li><p> HTML主要做结构，显示元素内容. </p></li><li><p> CSS美化HTML，布局网页.</p></li><li><p> CSS最大价值：由HTML专注去做结构呈现，样式交给   CSS，即结构(HTML)与样式(CSS)相分离</p></li></ul><h2 id="「1-3CSS语法规范」"><a href="#「1-3CSS语法规范」" class="headerlink" title="「1.3CSS语法规范」"></a>「1.3CSS语法规范」</h2><p>使用HTML时，需要遵从一定的规范，CSS也是如此。要想熟练地使用CSS对网页进行修饰，首先需要了解CSS样式规则。 CSS规则由两个主要的部分构成：<strong>选择器以及一条或多条声明</strong>。 </p><ol><li><p>选择器是用于指定CSS样式的<font color="red">HTML标签</font>，花括号内是对该对象设置的具体样式 </p></li><li><p>属性和属性值以“<font color="red">键值对</font>”的形式出现 </p></li><li><p>属性是对指定的对象设置的样式属性，例如字体大小、文本颜色等 </p></li><li><p>属性和属性值之间用英文“<font color="red"><strong>:</strong></font>”分开 </p></li><li><p>多个“键值对”之间用英文“<font color="red"><strong>;</strong></font>”进行区分</p></li></ol><h2 id="「1-4CSS注释」"><a href="#「1-4CSS注释」" class="headerlink" title="「1.4CSS注释」"></a>「1.4CSS注释」</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*这是注释*/</span></span><br></pre></td></tr></table></figure><h1 id="CSS引入方式"><a href="#CSS引入方式" class="headerlink" title="CSS引入方式"></a>CSS引入方式</h1><p>CSS的三种样式表</p><p>按照CSS样式书写的位置（或者引入的方式），css样式表可以分为三大类：</p><ol><li>内部样式表（嵌入式）</li><li>行内样式表（行内式）</li><li>外部样式表（外链式）</li></ol><h2 id="「2-1内部样式表」"><a href="#「2-1内部样式表」" class="headerlink" title="「2.1内部样式表」"></a>「2.1内部样式表」</h2><p>内部样式表（内嵌样式表）是写到html页面内部，是将所有CSS代码抽取出来，单独放到一个style标签中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/CSS&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    选择器（选择的标签） &#123; </span></span><br><span class="line"><span class="css">      属性<span class="number">1</span>: 属性值<span class="number">1</span>;</span></span><br><span class="line"><span class="css">      属性<span class="number">2</span>: 属性值<span class="number">2</span>; </span></span><br><span class="line"><span class="css">      属性<span class="number">3</span>: 属性值<span class="number">3</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="css">     <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">     <span class="attribute">font-size</span>: <span class="number">12px</span>; </span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>style标签理论上可以放在html文档的任何地方，但一般会放在文档的head标签中</li><li>通过此种方法，可以方便控制当前整个页面中元素样式设置</li><li>代码结构清晰，但并没有实现结构与样式完全分离</li><li>使用内部样式表设定CSS，通常被称为嵌入式引入，这种是练习常用的方法</li></ul><h2 id="「2-2行内样式表」"><a href="#「2-2行内样式表」" class="headerlink" title="「2.2行内样式表」"></a>「2.2行内样式表」</h2><p>行内样式表（内联样式表）是在元素标签内部的style属性中设定CSS样式，适合于修改简单样式。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;标签名 style=&quot;属性1:属性值1; 属性2:属性值2; 属性3:属性值3;&quot;&gt; </span><br><span class="line">    内容 </span><br><span class="line">&lt;/标签名&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color: red; font-size: 12px;&quot;</span>&gt;</span></span><br><span class="line">    示例</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>style其实就是标签的属性</li><li>在双引号中间，写法要符合CSS规范</li><li>可以控制当前的标签设置样式</li><li>书写繁琐，没有体现结构与样式相分离的思想，不推荐大量使用</li><li>使用行内样式表设定CSS，通常被称为行内式引入</li></ul><h2 id="「2-3外部样式表」"><a href="#「2-3外部样式表」" class="headerlink" title="「2.3外部样式表」"></a>「2.3外部样式表」</h2><p>实际开发中使用的都是外部样式表，适合样式较多的情况，核心是样式单独写到CSS文件中，之后把CSS文件引入到HTML页面中使用</p><p>引入外部样式表分为两步：</p><ol><li>新建一个后缀名为**.css**的样式文件，把所有CSS代码都放在此文件中</li><li>在HTML页面中，使用link标签引入这个文件</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;index.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>rel</td><td>定义当前文档与被链接文档之间的关系，在这里需要指定为“stylesheet”，表示被链接的文档是一个样式表文件</td></tr><tr><td>href</td><td>定义所链接外部样式表文件的URL，可以是相对路径，也可以是绝对路径</td></tr></tbody></table><p>在使用外部样式表设定CSS，通常也被称为外链式和链接式引入，这种方法是开发中常用的方法。</p><h2 id="「2-4CSS引入方法总结」"><a href="#「2-4CSS引入方法总结」" class="headerlink" title="「2.4CSS引入方法总结」"></a>「2.4CSS引入方法总结」</h2><table><thead><tr><th>样式表</th><th>优点</th><th>缺点</th><th>使用情况</th><th>控制范围</th></tr></thead><tbody><tr><td>内部样式表</td><td>部分结构与样式相分离</td><td>没有彻底分离</td><td>较多</td><td>控制一个页面</td></tr><tr><td>行内样式表</td><td>书写方便，权重高</td><td>结构样式混合</td><td>较少</td><td>控制一个标签</td></tr><tr><td>外部样式表</td><td>完全结构与样式相分离</td><td>需要引入</td><td>最多</td><td>控制多个页面</td></tr></tbody></table><h1 id="CSS三大特性"><a href="#CSS三大特性" class="headerlink" title="CSS三大特性"></a>CSS三大特性</h1><p>CSS有三个非常重要的特性：<font color="red">层叠性</font>、<font color="red"><br>继承性</font>、<font color="red">优先级</font>。</p><h2 id="「3-1层叠性」"><a href="#「3-1层叠性」" class="headerlink" title="「3.1层叠性」"></a>「3.1层叠性」</h2><p>相同选择器给设置相同的样式，此时一个样式就会<font color="red">覆盖（层叠）</font>另一个冲突的样式。层叠性主要解决样式冲突的问题。</p><h3 id="层叠性原则："><a href="#层叠性原则：" class="headerlink" title="层叠性原则："></a><strong>层叠性原则：</strong></h3><ul><li>样式冲突，遵循的是<font color="red">就近原则</font>，哪个样式离结构近，就执行哪个样式</li><li>样式不冲突，不会层叠</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/css1.png" alt="层叠性"></p><h2 id="「3-2继承性」"><a href="#「3-2继承性」" class="headerlink" title="「3.2继承性」"></a>「3.2继承性」</h2><p>现实中的继承：我们继承了父亲的姓氏</p><p>CSS中的继承：子标签会继承父标签的某些样式，如文本颜色和字号</p><p>简单理解就是<font color="red">子承父业</font>。</p><ul><li>恰当的使用继承性可以简化代码，降低CSS样式的复杂性</li><li>子元素可以继承父元素的样式（text- font- line-这些元素开头的可以继承，以及color属性）</li><li>继承性口诀：<strong>龙生龙，凤生凤，老鼠的孩子会打洞</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/css2.png" alt="继承性"></p><h2 id="「3-3优先级」"><a href="#「3-3优先级」" class="headerlink" title="「3.3优先级」"></a>「3.3优先级」</h2><p>css特殊性</p><p><strong>概念：</strong>定义CSS样式时，经常出现两个或更多规则应用在同一元素上，此时如果：</p><ol><li>选择器相同，则执行层叠性</li><li>选择器不同，就会出现优先级的问题</li></ol><p>关于CSS权重，我们需要一套计算公式来去计算，这个就是 CSS Specificity（特殊性）。</p><h3 id="选择器权重"><a href="#选择器权重" class="headerlink" title="选择器权重"></a><strong>选择器权重</strong></h3><table><thead><tr><th>选择器</th><th>选择器权重</th></tr></thead><tbody><tr><td>继承或者*</td><td>0，0，0，0</td></tr><tr><td>元素选择器（每个元素）</td><td>0，0，0，1</td></tr><tr><td>类，伪类选择器（每个类，伪类）</td><td>0，0，1，0</td></tr><tr><td>id选择器（每个id）</td><td>0，1，0，0</td></tr><tr><td>行内样式style=””（每个行内样式）</td><td>1，0，0，0</td></tr><tr><td>每个!important 最重要的</td><td>无穷大</td></tr></tbody></table><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123; <span class="attribute">color</span>: pink <span class="meta">!important</span>; &#125;</span><br></pre></td></tr></table></figure><h3 id="优先级注意点："><a href="#优先级注意点：" class="headerlink" title="优先级注意点："></a><strong>优先级注意点：</strong></h3><ol><li>权重是由4组数字组成的，但是不会有进位</li><li>可以理解为<strong>类选择器永远大于元素选择器</strong>，<strong>id选择器永远大于类选择器</strong>，以此类推</li><li>等级判断从左到右，左面的最大，一级大于一级，如果某一位数值相同，则判断下一位数值</li><li>可以简单记忆：<strong>通配符和继承权重为0，标签选择器为1，类（伪类）选择器为10，id选择器100，行内样式表为1000，！important无穷大</strong></li><li>继承权重是0，如果该元素没有直接选中，不管父元素权重多高，子元素得到的权重都是0</li></ol><h3 id="权重叠加："><a href="#权重叠加：" class="headerlink" title="权重叠加："></a><strong>权重叠加：</strong></h3><p>如果是复合选择器，则会有权重叠加，需要计算权重。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">ul</span>  <span class="selector-tag">li</span>   ------&gt;      <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span></span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span>   ------&gt;      <span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>      -----—&gt;      <span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span></span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-tag">a</span>       ------&gt;      <span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>我们修改样式，一定要看该标签有没有被选中</li><li>如果选中了，那么以上面的公式来计权重。谁大听谁的。</li><li>如果没有选中，那么权重是0，因为继承的权重为0.</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/css3.png" alt="优先级"></p><h1 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h1><p><strong>团队约定：</strong></p><ul><li>展开格式</li><li>样式选择器，属性名，属性值关键字全部使用小写字母书写，属性字符串允许使用大小写</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*1.紧凑格式 (Compact)不推荐*/</span></span><br><span class="line"><span class="selector-tag">h3</span> &#123; <span class="attribute">color</span>: deeppink;<span class="attribute">font-size</span>: <span class="number">20px</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*展开格式（推荐）*/</span></span><br><span class="line"><span class="selector-tag">h3</span> &#123;</span><br><span class="line"> <span class="attribute">color</span>: deeppink;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 推荐 */</span></span><br><span class="line"><span class="selector-tag">h3</span>&#123;</span><br><span class="line"> <span class="attribute">color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 不推荐 */</span></span><br><span class="line"><span class="selector-tag">H3</span>&#123;</span><br><span class="line"> <span class="attribute">COLOR</span>: PINK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小白的前端之路 </tag>
            
            <tag> CSS基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PC网页特效</title>
      <link href="/%E5%89%8D%E7%AB%AF/PC%E7%BD%91%E9%A1%B5%E7%89%B9%E6%95%88/"/>
      <url>/%E5%89%8D%E7%AB%AF/PC%E7%BD%91%E9%A1%B5%E7%89%B9%E6%95%88/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小白的前端之路 </tag>
            
            <tag> CSS基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML基础</title>
      <link href="/%E5%89%8D%E7%AB%AF/HTML%E5%9F%BA%E7%A1%80/"/>
      <url>/%E5%89%8D%E7%AB%AF/HTML%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML基础"><a href="#HTML基础" class="headerlink" title="HTML基础"></a>HTML基础</h1><h2 id="HTML初识"><a href="#HTML初识" class="headerlink" title="HTML初识"></a>HTML初识</h2><p><strong>「HTML」</strong>(Hyper Text Markup Language):超文本标记语言</p><p><strong>「所谓超文本，有2层含义：」</strong></p><ul><li>因为它可以加入图片、声音、动画、多媒体等内容（超越文本限制 ）</li><li>不仅如此，它还可以从一个文件跳转到另一个文件，与世界各地主机的文件连接（超级链接文本）。</li></ul><p><strong>「HTML骨架格式」</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 页面中最大的标签 根标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 头部标签 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span>     </span><br><span class="line">        <span class="comment">&lt;!-- 标题标签 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 文档的主体 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>「团队约定大小写」</strong></p><ul><li>HTML标签名、类名、标签属性和大部分属性值统一用小写</li></ul><p><strong>「HTML元素标签分类」</strong></p><ul><li>常规元素(双标签)</li><li>空元素(单标签)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">常规元素(双标签)</span><br><span class="line">&lt;标签名&gt; 内容 &lt;/标签名&gt;   比如<span class="tag">&lt;<span class="name">body</span>&gt;</span>我是文字<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">空元素(单标签)</span><br><span class="line">&lt;标签名 /&gt;  比如 <span class="tag">&lt;<span class="name">br</span> /&gt;</span>或<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>「HTML标签关系」</strong></p><ul><li><p>嵌套关系父子级包含关系</p></li><li><p>并列关系兄弟级并列关系</p></li><li><ul><li>如果两个标签之间的关系是嵌套关系，子元素最好缩进一个tab键的身位（一个tab是4个空格）。如果是并列关系，最好上下对齐。</li></ul></li></ul><h2 id="文档类型"><a href="#文档类型" class="headerlink" title="文档类型"></a>文档类型</h2><p><strong>「文档类型」</strong>用来说明你用的XHTML或者HTML是什么版本。<!DOCTYPE html>告诉浏览器按照HTML5标准解析页面。</p><h2 id="页面语言"><a href="#页面语言" class="headerlink" title="页面语言"></a><strong>页面语言</strong></h2><p>页面语言lang指定该html标签内容所用的语言</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span>  </span><br><span class="line">en 定义语言为英语 zh-CN定义语言为中文</span><br></pre></td></tr></table></figure><p><strong>「lang的作用」</strong></p><ul><li>根据根据lang属性来设定不同语言的css样式，或者字体</li><li>告诉搜索引擎做精确的识别</li><li>让语法检查程序做语言识别</li><li>帮助翻译工具做识别</li><li>帮助网页阅读程序做识别</li></ul><h2 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h2><p><strong>「字符集」</strong>(Character set)是多个字符的集合,计算机要准确的处理各种字符集文字，需要进行字符编码，以便计算机能够识别和存储各种文字。</p><ul><li>UTF-8是目前最常用的字符集编码方式，称为万国码</li><li>让 html 文件是以 UTF-8 编码保存的， 浏览器根据编码去解码对应的html内容。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><strong>「meta viewport的用法」</strong><br>  通常viewport是指视窗、视口。浏览器上(也可能是一个app中的webview)用来显示网页的那部分区域。在移动端和pc端视口是不同的，pc端的视口是浏览器窗口区域，而在移动端有三个不同的视口概念：布局视口、视觉视口、理想视口</p><p>  meta有两个属性name 和 http-equiv</p><p><strong>name属性的取值</strong></p><ul><li>keywords(关键字) 告诉搜索引擎，该网页的关键字</li><li>description(网站内容描述) 用于告诉搜索引擎，你网站的主要内容。</li><li>viewport(移动端的窗口)</li><li>robots(定义搜索引擎爬虫的索引方式) robots用来告诉爬虫哪些页面需要索引，哪些页面不需要索引</li><li>author(作者)</li><li>generator(网页制作软件）</li><li>copyright(版权)</li></ul><p><strong>http-equiv有以下参数</strong></p><p>http-equiv相当于http的文件头作用，它可以向浏览器传回一些有用的信息，以帮助正确和精确地显示网页内容</p><ul><li>content-Type 设定网页字符集(Html4用法，不推荐)</li><li>Expires(期限) ,可以用于设定网页的到期时间。一旦网页过期，必须到服务器上重新传输。</li><li>Pragma(cache模式),是用于设定禁止浏览器从本地机的缓存中调阅页面内容，设定后一旦离开网页就无法从Cache中再调出</li><li>Refresh(刷新),自动刷新并指向新页面。</li><li>cache-control（请求和响应遵循的缓存机制）</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="HTML标签的语义化"><a href="#HTML标签的语义化" class="headerlink" title="HTML标签的语义化"></a>HTML标签的语义化</h2><ul><li>方便代码的阅读和维护，样式丢失的时候能让页面呈现清晰的结构。</li><li>有利于SEO，搜索引擎根据标签来确定上下文和各个关键字的权重。</li><li>方便其他设备解析，如盲人阅读器根据语义渲染网页</li></ul><p><strong>「拓展」</strong> 标签：规定页面上所有链接的默认 URL 和设置整体链接的打开状态</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">base</span> <span class="attr">target</span>=<span class="string">&quot;_self&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">a</span>&gt;</span> 跳转到 百度</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="HTML常用标签"><a href="#HTML常用标签" class="headerlink" title="HTML常用标签"></a>HTML常用标签</h1><h2 id="「1-排版标签」"><a href="#「1-排版标签」" class="headerlink" title="「1. 排版标签」"></a><strong>「1. 排版标签」</strong></h2><p>主要和css搭配使用，显示网页结构的标签，是网页布局最常用的标签。</p><ul><li>标题标签h(h1~h6)</li><li>段落标签p,可以把 HTML 文档分割为若干段落</li><li>水平线标签hr</li><li>换行标签br</li><li>div和span标签:是没有语义的,是我们网页布局最主要的2个盒子。</li></ul><h2 id="「2-文本格式化标签」"><a href="#「2-文本格式化标签」" class="headerlink" title="「2. 文本格式化标签」"></a><strong>「2. 文本格式化标签」</strong></h2><ul><li>b和strong 文字以粗体显示</li><li>i和em 文字以斜体显示</li><li>s和del 文字以加删除线显示</li><li>u和ins 文字以加下划线显示</li></ul><h2 id="「3-标签属性-行内式-」"><a href="#「3-标签属性-行内式-」" class="headerlink" title="「3. 标签属性(行内式)」"></a><strong>「3. 标签属性(行内式)」</strong></h2><p>使用HTML制作网页时，如果想让HTML标签提供更多的信息，可以使用HTML标签的属性加以设置。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;标签名 属性1=&quot;属性值1&quot; 属性2=&quot;属性值2&quot; …&gt; 内容 &lt;/标签名&gt;</span><br><span class="line">&lt;手机 颜色=&quot;红色&quot; 大小=&quot;5寸&quot;&gt;  &lt;/手机&gt;</span><br></pre></td></tr></table></figure><h2 id="「4-图像标签img」"><a href="#「4-图像标签img」" class="headerlink" title="「4. 图像标签img」"></a><strong>「4. 图像标签img」</strong></h2><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207080035188.png"></p><p><strong>注意：</strong></p><ul><li>标签可以拥有多个属性，必须写在开始标签中，位于标签名后面。</li><li>属性之间不分先后顺序，标签名与属性、属性与属性之间均以空格分开。</li><li>采取<strong>键值对</strong>的格式  key=”value”  的格式</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;cz.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span> <span class="attr">border</span>=<span class="string">&quot;3&quot;</span> <span class="attr">title</span>=<span class="string">&quot;这是个小蒲公英&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="「5-链接标签-重点-」"><a href="#「5-链接标签-重点-」" class="headerlink" title="「5. 链接标签(重点)」"></a><strong>「5. 链接标签(重点)」</strong></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;跳转目标&quot;</span> <span class="attr">target</span>=<span class="string">&quot;目标窗口的弹出方式&quot;</span>&gt;</span>文本或图像<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">target=&quot;_self&quot;  默认窗口弹出方式</span><br><span class="line">target=&quot;_blank&quot; 新窗口弹出</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>属性</strong></th><th>作用</th></tr></thead><tbody><tr><td>href</td><td>用于指定链接目标的url地址，（必须属性）当为标签应用href属性时，它就具有了超链接的功能</td></tr><tr><td>target</td><td>用于指定链接页面的打开方式，其取值有_self和_blank两种，其中_self为默认值，_blank为在新窗口中打开方式。</td></tr></tbody></table><h3 id="src-和-href-的区别"><a href="#src-和-href-的区别" class="headerlink" title="src 和 href 的区别"></a><strong>src 和 href 的区别</strong></h3><p>一句话概括:<strong>src 是引入资源的 href 是跳转url的</strong></p><ol><li>src用于替换当前元素，href用于在当前文档和引用资源之间确立联系。</li><li>src是source的缩写，指向外部资源的位置，指向的内容将会嵌入到文档中当前标签所在位置；在请求src资源时会将其指向的资源下载并应用到文档内，例如js脚本，img图片和frame等元素。当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执行完毕，图片和框架等元素也如此，类似于将所指向资源嵌入当前标签内。这也是为什么将js脚本放在底部而不是头部。</li><li>href是Hypertext Reference的缩写，指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的链接。如果我们在文档中添加那么浏览器会识别该文档为css文件，就会并行下载资源并且不会停止对当前文档的处理。这也是为什么建议使用link方式来加载css，而不是使用@import方式。</li></ol><p><strong>注意：</strong></p><ol><li>外部链接 需要添加 http:// <a href="http://www.baidu.com/">www.baidu.com</a></li><li>内部链接 直接链接内部页面名称即可 比如 &lt; a href=”index.html”&gt; 首页</li><li>如果当时没有确定链接目标时，通常将链接标签的href属性值定义为“#”(即href=”#”)，表示该链接暂时为一个空链接。</li><li>不仅可以创建文本超链接，在网页中各种网页元素，如图像、表格、音频、视频等都可以添加超链接。</li></ol><h3 id="锚点定位"><a href="#锚点定位" class="headerlink" title="锚点定位"></a><strong>锚点定位</strong></h3><p><strong>锚点定位：通过创建锚点链接，用户能够快速定位到目标内容。</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 使用相应的id名标注跳转目标的位置。 (找目标)</span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">&quot;two&quot;</span>&gt;</span>第2集<span class="tag">&lt;/<span class="name">h3</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">2. 使用<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#id名&quot;</span>&gt;</span>链接文本<span class="tag">&lt;/<span class="name">a</span>&gt;</span>创建链接文本（被点击的） </span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#two&quot;</span>&gt;</span>   </span><br></pre></td></tr></table></figure><h2 id="「6-注释标签」"><a href="#「6-注释标签」" class="headerlink" title="「6. 注释标签」"></a><strong>「6. 注释标签」</strong></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注释语句 --&gt;</span>     </span><br><span class="line"> 快捷键是：    ctrl + /       </span><br><span class="line"> 或者 ctrl +shift + / </span><br></pre></td></tr></table></figure><p><strong>团队约定：</strong>注释内容前后各一个空格字符，注释位于要注释代码的上面，单独占一行</p><h2 id="「7-路径」"><a href="#「7-路径」" class="headerlink" title="「7. 路径」"></a><strong>「7. 路径」</strong></h2><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207080042861.png"></p><h2 id="「8-其他知识」"><a href="#「8-其他知识」" class="headerlink" title="「8. 其他知识」"></a><strong>「8. 其他知识」</strong></h2><h3 id="预格式化文本pre标签"><a href="#预格式化文本pre标签" class="headerlink" title="预格式化文本pre标签"></a><strong>预格式化文本pre标签</strong></h3><p>元素中的文本通常会保留空格和换行符。而文本也会呈现为等宽字体。格式化文本就是 ，按照我们预先写好的文字格式来显示页面， 保留空格和换行等。</p><h3 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a><strong>特殊字符</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207080043782.png"></p><h3 id="什么是XHTML"><a href="#什么是XHTML" class="headerlink" title="什么是XHTML"></a><strong>什么是XHTML</strong></h3><ul><li>XHTML 指<strong>「可扩展超文本标签语言」</strong>（EXtensible HyperText Markup Language）。</li><li>XHTML 的目标是取代 HTML。</li><li>XHTML 与 HTML 4.01 几乎是相同的。</li><li>XHTML 是更严格更纯净的 HTML 版本。</li><li>XHTML 是作为一种 XML 应用被重新定义的 HTML,是严格版本的HTML。例如它要求标签必须小写，标签必须被正确关闭，标签顺序必须正确排列，对于属性都必须使用双引号等。</li><li>XHTML 是一个 W3C 标准。</li></ul><h3 id="写HTML代码时应注意什么？"><a href="#写HTML代码时应注意什么？" class="headerlink" title="写HTML代码时应注意什么？"></a><strong>写HTML代码时应注意什么？</strong></h3><ul><li>尽可能少的使用无语义的标签div和span；</li><li>在语义不明显时，既可以使用div或者p时，尽量用p, 因为p在默认情况下有上下间距，对兼容特殊终端有利；</li><li>不要使用纯样式标签，如：b、font、u等，改用css设置。</li><li>需要强调的文本，可以包含在strong或者em标签中（浏览器预设样式，能用CSS指定就不用他们），strong默认样式是加粗（不要用b），em是斜体（不用i）；</li><li>使用表格时，标题要用caption，表头用thead，主体部分用tbody包围，尾部用tfoot包围。表头和一般单元格要区分开，表头用th，单元格用td；</li><li>表单域要用fieldset标签包起来，并用legend标签说明表单的用途；</li><li>每个input标签对应的说明文本都需要使用label标签，并且通过为input设置id属性，在lable标签中设置for来让说明文本和相对应的input关联起来。</li></ul><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><h2 id="「1-表格」"><a href="#「1-表格」" class="headerlink" title="「1. 表格」"></a><strong>「1. 表格」</strong></h2><p>现在还是较为常用的一种标签，但不是用来布局，<strong>常见显示、展示表格式数据</strong>。因为它可以让数据显示的非常的规整，可读性非常好。<strong>特别是后台展示数据的时候表格运用是否熟练就显得很重要</strong>，一个清爽简约的表格能够把繁杂的数据表现得很有条理。</p><h2 id="「2-创建表格」"><a href="#「2-创建表格」" class="headerlink" title="「2. 创建表格」"></a><strong>「2. 创建表格」</strong></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格内的文字<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>table、tr、td，他们是创建表格的基本标签，缺一不可</p><ul><li>table用于定义一个表格标签。</li><li>tr标签 用于定义表格中的行，必须嵌套在 table标签中。</li><li>td 用于定义表格中的单元格，必须嵌套在<tr></tr>标签中。</li><li>字母 td 指表格数据（table data），即数据单元格的内容，现在我们明白，表格最合适的地方就是用来存储数据的。td像一个容器，可以容纳所有的元素。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207080052352.jpg"></p><h3 id="表头单元格标签th"><a href="#表头单元格标签th" class="headerlink" title="表头单元格标签th"></a><strong>表头单元格标签th</strong></h3><p>一般表头单元格位于表格的第一行或第一列，并且文本加粗居中,只需用表头标签<th></th>替代相应的单元格标签<td></td>即可。</p><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207080053567.png"></p><h3 id="表格标题caption"><a href="#表格标题caption" class="headerlink" title="表格标题caption"></a><strong>表格标题caption</strong></h3><p>通常这个标题会被居中且显示于表格之上。caption 标签必须紧随 table 标签之后。这个标签只存在 表格里面才有意义。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">caption</span>&gt;</span>我是表格标题<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="「3-表格属性」"><a href="#「3-表格属性」" class="headerlink" title="「3. 表格属性」"></a><strong>「3. 表格属性」</strong></h2><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207080055050.png"></p><p>三参为0，平时开发的我们这三个参数   border  cellpadding  cellspacing 为  0</p><h2 id="「4-合并单元格」"><a href="#「4-合并单元格」" class="headerlink" title="「4. 合并单元格」"></a><strong>「4. 合并单元格」</strong></h2><p>合并的顺序我们按照  先上 后下   先左  后右 的顺序 ,合并完之后需要删除多余的单元格。</p><ul><li>跨行合并：rowspan=”合并单元格的个数”</li><li>跨列合并：colspan=”合并单元格的个数”</li></ul><h2 id="「5-总结表格」"><a href="#「5-总结表格」" class="headerlink" title="「5. 总结表格」"></a><strong>「5. 总结表格」</strong></h2><table><thead><tr><th>标签名</th><th>定义</th><th>说明</th></tr></thead><tbody><tr><td>table</td><td>表格标签</td><td>就是一个四方的盒子</td></tr><tr><td>tr</td><td>表格行标签</td><td>行标签要再table标签内部才有意义</td></tr><tr><td>td</td><td>单元格标签</td><td>单元格标签是个容器级元素，可以放任何东西</td></tr><tr><td>th</td><td>表头单元格标签</td><td>它还是一个单元格，但是里面的文字会居中且加粗</td></tr><tr><td>caption</td><td>表格标题标签</td><td>表格的标题，跟着表格一起走，和表格居中对齐</td></tr><tr><td>clospan 和 rowspan</td><td>合并属性</td><td>用来合并单元格的</td></tr></tbody></table><h2 id="「6-表格划分结构」"><a href="#「6-表格划分结构」" class="headerlink" title="「6. 表格划分结构」"></a><strong>「6. 表格划分结构」</strong></h2><p>  对于比较复杂的表格，表格的结构也就相对的复杂了，所以又将表格分割成三个部分：题头、正文和脚注。而这三部分分别用:thead,tbody,tfoot来标注， 这样更好的分清表格结构。</p><p><strong>注意：</strong></p><ol><li>thead：用于定义表格的头部。用来放标题之类的东西。<thead> 内部必须拥有<tr> 标签！</li><li>tbody：用于定义表格的主体。放数据本体 。</li><li>tfoot：放表格的脚注之类。</li><li> 以上标签都是放到table标签中。</li></ol><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h2 id="「列表」"><a href="#「列表」" class="headerlink" title="「列表」"></a><strong>「列表」</strong></h2><p>容器里面装载着结构，样式一致的文字或图表的一种形式，叫列表。</p><p>列表最大的特点就是整齐 、整洁、 有序，跟表格类似，但是它可组合自由度会更高。</p><h3 id="「1-无序列表-ul」"><a href="#「1-无序列表-ul」" class="headerlink" title="「1. 无序列表 ul」"></a><strong>「1. 无序列表 ul」</strong></h3><ul><li>ul中只能嵌套li，直接在ul标签中输入其他标签或者文字的做法是不被允许的。</li><li>li之间相当于一个容器，可以容纳所有元素。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  ......</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="「2-有序列表-ol」"><a href="#「2-有序列表-ol」" class="headerlink" title="「2. 有序列表 ol」"></a><strong>「2. 有序列表 ol」</strong></h3><ul><li><p>ol标签中的type属性值为排序的序列号，不添加type属性时，有序列表默认从数字1开始排序。</p></li><li><p>常用的type属性值分别为是1，a，A，i，I</p></li><li><p>ol reversed=”reversed”中的reversed属性能够让有序列表中的序列倒序排列。</p></li><li><p>ol start=”3”中的start属性值为3，有序列表中的第一个序列号将从3开始排列。</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">&quot;A&quot;</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表二<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表三<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="「自定义列表-」"><a href="#「自定义列表-」" class="headerlink" title="「自定义列表 」"></a><strong>「自定义列表 」</strong></h2><p>定义列表常用于对术语或名词进行解释和描述，定义列表的列表项前没有任何项目符号。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>名词1<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词1解释1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词1解释2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>名词2<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词2解释1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词2解释2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h1><p>在HTML中，一个完整的表单通常由表单控件（也称为表单元素）、提示信息和表单域3个部分构成。表单目的是为了收集用户信息。</p><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207080853313.png"></p><p><strong>表单控件：</strong><br> 包含了具体的表单功能项，如单行文本输入框、密码输入框、复选框、提交按钮、重置按钮等。<br><strong>提示信息：</strong><br> 一个表单中通常还需要包含一些说明性的文字，提示用户进行填写和操作。<br><strong>表单域：</strong><br> 它相当于一个容器，用来容纳所有的表单控件和提示信息，可以通过他定义处理表单数据所用程序的url地址，以及数据提交到服务器的方法。如果不定义表单域，表单中的数据就无法传送到后台服务器。</p><h2 id="「1-input-控件」"><a href="#「1-input-控件」" class="headerlink" title="「1. input 控件」"></a><strong>「1. input 控件」</strong></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;属性值&quot;</span> <span class="attr">value</span>=<span class="string">&quot;你好&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>input 输入的意思</li><li>input 标签为单标签</li><li>type属性设置不同的属性值用来指定不同的控件类型</li><li>除了type属性还有别的属性</li></ul><h3 id="常用属性："><a href="#常用属性：" class="headerlink" title="常用属性："></a><strong>常用属性：</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207080854979.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">用户名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span> </span><br><span class="line">密  码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="value属性"><a href="#value属性" class="headerlink" title="value属性"></a><strong>value属性</strong></h3><ul><li>value 默认的文本值。有些表单想刚打开页面就默认显示几个文字，就可以通过这个value 来设置。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;请输入用户名&quot;</span>&gt;</span> </span><br></pre></td></tr></table></figure><h3 id="name属性"><a href="#name属性" class="headerlink" title="name属性"></a><strong>name属性</strong></h3><ul><li><p>name表单的名字， 这样，后台可以通过这个name属性找到这个表单。 页面中的表单很多，name主要作用就是用于区别不同的表单。</p></li><li><p>name属性后面的值，是我们自己定义的。</p></li><li><p>radio  如果是一组，我们必须给他们命名相同的名字 name  这样就可以多个选其中的一个啦</p></li><li><p>name属性，我们现在用的较少，但是，当我们学ajax 和后台的时候，是必须的。</p></li><li></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>  /&gt;</span>男</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> /&gt;</span>女</span><br></pre></td></tr></table></figure><h3 id="checked属性"><a href="#checked属性" class="headerlink" title="checked属性"></a><strong>checked属性</strong></h3><p>表示默认选中状态。 较常见于 单选按钮和复选按钮。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">性    别:</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span> /&gt;</span>男</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span> /&gt;</span>女 </span><br></pre></td></tr></table></figure><h3 id="input-属性小结"><a href="#input-属性小结" class="headerlink" title="input 属性小结"></a><strong>input 属性小结</strong></h3><table><thead><tr><th>属性</th><th>说明</th><th>作用</th></tr></thead><tbody><tr><td>type</td><td>表单类型</td><td>用来指定不同的控件类型</td></tr><tr><td>value</td><td>表单值</td><td>表单里面默认显示的文本</td></tr><tr><td>name</td><td>表单名字</td><td>页面中的表单很多，name主要作用就是用于区别不同的表单。</td></tr><tr><td>checked</td><td>默认选中</td><td>表示那个单选或者复选按钮一开始就被选中了</td></tr></tbody></table><h2 id="「2-label标签」"><a href="#「2-label标签」" class="headerlink" title="「2.  label标签」"></a><strong>「2.  label标签」</strong></h2><ul><li>label 标签为 input 元素定义标注（标签）。</li><li>label标签主要目的是为了提高用户体验。为用户提高最优秀的服务。</li></ul><p><strong>作用：</strong>用于绑定一个表单元素, 当点击label标签的时候, 被绑定的表单元素就会获得输入焦点。</p><h3 id="如何绑定元素呢"><a href="#如何绑定元素呢" class="headerlink" title="如何绑定元素呢"></a><strong>如何绑定元素呢</strong></h3><ul><li>第一种用法就是用label标签直接包含input表单， 适合单个表单选择</li><li>第二种用法 for 属性规定 label 与哪个表单元素绑定(通过id)。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">第一种</span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span> 用户名： </span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;usename&quot;</span> <span class="attr">value</span>=<span class="string">&quot;请输入用户名&quot;</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line">第二种</span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>  <span class="attr">id</span>=<span class="string">&quot;sex&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="「3-textarea控件-文本域-」"><a href="#「3-textarea控件-文本域-」" class="headerlink" title="「3.  textarea控件(文本域)」"></a><strong>「3.  textarea控件(文本域)」</strong></h2><ul><li>通过textarea控件可以轻松地创建多行文本输入框.</li><li>cols=”每行中的字符数” rows=”显示的行数”  我们实际开发不用</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207080901727.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> &gt;</span></span><br><span class="line">  文本内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="文本框和文本域区别"><a href="#文本框和文本域区别" class="headerlink" title="文本框和文本域区别"></a><strong>文本框和文本域区别</strong></h3><table><thead><tr><th>表单</th><th>名称</th><th>区别</th><th>默认显示</th><th>用于场景</th></tr></thead><tbody><tr><td>input type=”text”</td><td>文本框</td><td>只能显示一行文本</td><td>单标签，通过value显示默认值</td><td>用户名、昵称、密码等</td></tr><tr><td>textarea</td><td>文本域</td><td>可以显示多行文本</td><td>双标签，默认值写到标签中间</td><td>留言板</td></tr></tbody></table><h2 id="「4-select下拉列表」"><a href="#「4-select下拉列表」" class="headerlink" title="「4.  select下拉列表」"></a><strong>「4.  select下拉列表」</strong></h2><ul><li>如果有多个选项让用户选择，为了节约空间，我们可以使用select控件定义下拉列表。</li><li>在option 中定义selected =” selected “时，当前项即为默认选中项。</li><li>我们实际开发会用的比较少</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202207080904309.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="「5-form表单域」"><a href="#「5-form表单域」" class="headerlink" title="「5.form表单域」"></a><strong>「5.form表单域」</strong></h2><ol><li><p>收集的用户信息怎么传递给服务器？</p></li><li><ul><li>通过form表单域</li></ul></li><li><p>目的：</p></li><li><ul><li>在HTML中，form标签被用于定义表单域，以实现用户信息的收集和传递，form中的所有内容都会被提交给服务器。</li></ul></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;url地址&quot;</span> <span class="attr">method</span>=<span class="string">&quot;提交方式&quot;</span> <span class="attr">name</span>=<span class="string">&quot;表单名称&quot;</span>&gt;</span></span><br><span class="line">  各种表单控件</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="常用属性：-1"><a href="#常用属性：-1" class="headerlink" title="常用属性："></a><strong>常用属性：</strong></h3><p>每个表单都应该有自己表单域。后面学 ajax 后台交互的时候，必须需要form表单域。</p><table><thead><tr><th>属性</th><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>action</td><td>url地址</td><td>用于指定接收并处理表单数据的服务器程序的url地址。</td></tr><tr><td>method</td><td>get/post</td><td>用于设置表单数据的提交方式，其取值为get或post。</td></tr><tr><td>name</td><td>名称</td><td>用于指定表单的名称，以区分同一个页面中的多个表单。</td></tr></tbody></table><h3 id="GET-和-POST-的区别"><a href="#GET-和-POST-的区别" class="headerlink" title="GET 和 POST 的区别"></a><strong>GET 和 POST 的区别</strong></h3><ul><li>GET在浏览器回退时是无害的，而POST会再次提交请求。</li><li>GET请求会被浏览器主动cache，而POST不会，除非手动设置。</li><li>GET请求只能进行url编码，而POST支持多种编码方式。</li><li>GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。</li><li>GET请求大小一般是(1024字节)，http协议并没有限制，而与服务器，操作系统有关，POST理论上来说没有大小限制，http协议规范也没有进行大小限制，但实际上post所能传递的数据量根据取决于服务器的设置和内存大小。</li><li>对参数的数据类型，GET只接受ASCII字符，而POST没有限制。</li><li>GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。</li></ul><h3 id="团队约定"><a href="#团队约定" class="headerlink" title="团队约定"></a><strong>团队约定</strong></h3><ul><li>元素属性值使用双引号语法</li><li>元素属性值可以写上的都写上</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">推荐</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小白的前端之路 </tag>
            
            <tag> HTML基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="/%E6%B5%8B%E8%AF%95/"/>
      <url>/%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>##二级标题<br>web前端开发web前端开发web前端开发<br>web前端开发web前端开发web前端开发<br>web前端开发web前端开发web前端开发<br>web前端开发web前端开发web前端开发</p><p>###三级标题<br>web前端开发web前端开发web前端开发<br>web前端开发web前端开发web前端开发<br>web前端开发web前端开发web前端开发</p><p>##实例演示<br>wivbiurgeuiwvevbuiewveiuwiwvnioewub<br>wivbiurgeuiwvevbuiewveiuwiwvnioewub<br>wivbiurgeuiwvevbuiewveiuwiwvnioewub<br>wivbiurgeuiwvevbuiewveiuwiwvnioewub</p><p>###三级标题1<br>wivbiurgeuiwvevbuiewveiuwiwvnioewub<br>wivbiurgeuiwvevbuiewveiuwiwvnioewub</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;hello world!\n&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>随记</title>
      <link href="/%E9%9A%8F%E8%AE%B0/"/>
      <url>/%E9%9A%8F%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>一个满眼是你的人才配得上你全部的爱一个满眼是你的人才配得上你全部的爱<br>罢了</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 感想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/hello-world/"/>
      <url>/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
