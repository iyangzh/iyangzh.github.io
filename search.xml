<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaScript内置对象</title>
      <link href="/%E5%89%8D%E7%AB%AF/Javascript%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/"/>
      <url>/%E5%89%8D%E7%AB%AF/Javascript%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h1><p><strong>「内置对象」</strong>JavaScript 中的对象分为3种：自定义对象 、内置对象、 浏览器对象<br>前面两种对象是JS基础内容，属于ECMAScript;第三个浏览器对象属于JS独有的，JS API讲解内置对象就是指 js语言自带的一些对象，这些对象供开发者使用，并提供了一些常用的或是最基本而非必要的功能(属性和方法),内置对象最大的优点就是帮助我们快速开发。JavaScript提供了多个内置对象：Math，Data，Array，String等</p><p><strong>「查文档」</strong>学习一个内置对象的使用，只要学会其常用成员的使用即可，我们可以通过查文档学习。<br><code>MDN:</code><a href="https://developer.mozilla.org/zh-CN/">https://developer.mozilla.org/zh-CN/</a></p><h2 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h2><p><strong>「Math对象」</strong>不是构造函数，它具有数学常数和函数的属性和方法，跟数学相关。</p><table><thead><tr><th>属性. 方法名</th><th>功能</th></tr></thead><tbody><tr><td>Math.PI</td><td>圆周率</td></tr><tr><td>Math.floor()</td><td>向下取整</td></tr><tr><td>Math.ceil()</td><td>向上取整</td></tr><tr><td>Math.round()</td><td>四舍五入，就近取整，注意-3.5 结果是 -3</td></tr><tr><td>Math.abs()</td><td>绝对值</td></tr><tr><td>Math.max()/Math.min()</td><td>求最大值和最小值</td></tr><tr><td>Math.random()</td><td>获取范围在【0，1） 内的随机数</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Math数学对象不是一个构造函数，所以我们不需要new 来调用，而是直接使用里面的属性和方法即可</span></span><br><span class="line"><span class="comment">//Math对象最大值</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.PI); <span class="comment">// 一个属性 圆周率</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.max(<span class="number">1</span>,<span class="number">99</span>,<span class="number">3</span>)); <span class="comment">// 99</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.max(-<span class="number">1</span>,-<span class="number">10</span>)); <span class="comment">// -1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.max(<span class="number">1</span>,<span class="number">99</span>,<span class="string">&#x27;pink老师&#x27;</span>)); <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.max()); <span class="comment">// -Infinity</span></span><br></pre></td></tr></table></figure><p>案例：封装自己的数学对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用对象封装自己的数学对象 里面有PI最大值和最小值</span></span><br><span class="line"><span class="keyword">var</span> myMath = &#123;</span><br><span class="line">    <span class="attr">PI</span>: <span class="number">3.1415926535</span>,</span><br><span class="line">    <span class="attr">max</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        max = <span class="built_in">arguments</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="built_in">arguments</span>.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">arguments</span>[i] &gt; max) &#123;</span><br><span class="line">                max = <span class="built_in">arguments</span>[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">min</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        min = <span class="built_in">arguments</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">arguments</span> - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">arguments</span>[i] &lt; min) &#123;</span><br><span class="line">                min = <span class="built_in">arguments</span>[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(myMath.PI);</span><br><span class="line"><span class="built_in">console</span>.log(myMath.max(<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>));</span><br><span class="line"><span class="built_in">console</span>.log(myMath.min(<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">5</span>));</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Math绝对值和三个取整方法</span></span><br><span class="line"><span class="comment">//1.绝对值方法</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.abs(<span class="number">1</span>)); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.abs(-<span class="number">1</span>)); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.abs(<span class="string">&#x27;-1&#x27;</span>)); <span class="comment">// 1 隐式转换，会把字符型转换为数字型</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.abs(<span class="string">&#x27;pink&#x27;</span>)); <span class="comment">// NaN</span></span><br><span class="line"><span class="comment">//2.三个取整方法</span></span><br><span class="line"><span class="comment">//(1)Math.floor() &#x27;地板&#x27; 向下取整，往最小了取值</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.floor(<span class="number">1.2</span>)); <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.floor(<span class="number">1.8</span>)); <span class="comment">//1</span></span><br><span class="line"><span class="comment">//(2)Math.ceil() &#x27;天花板&#x27; 向上取整，往最大了取值</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.ceil(<span class="number">1.2</span>)); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.ceil(<span class="number">1.8</span>)); <span class="comment">// 2</span></span><br><span class="line"><span class="comment">//(3)Math.round() 四舍五入 其他数字都是四舍五入，但是.5特殊，它往大了取</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(<span class="number">1.1</span>)); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(<span class="number">1.5</span>)); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(<span class="number">1.9</span>)); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(-<span class="number">1.1</span>)); <span class="comment">// -1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(-<span class="number">1.5</span>)); <span class="comment">// 这个结果是 -1</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.Math对象随机数方法， random() 返回一个随机小数 0 &lt;= i &lt;1</span></span><br><span class="line"><span class="comment">// 2.这个方法里面不跟参数</span></span><br><span class="line"><span class="comment">// 3.代码验证</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.random());</span><br><span class="line"><span class="comment">// 4.两数之间随机数，包含两数</span></span><br><span class="line"><span class="comment">// Math.floor(Math.random() * (max - min + 1)) + min;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandom</span>(<span class="params">min,max</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min + <span class="number">1</span>)) + min;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getRandom(<span class="number">1</span>,<span class="number">10</span>));</span><br><span class="line"><span class="comment">// 5.随机点名</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;甲&#x27;</span>,<span class="string">&#x27;乙&#x27;</span>,<span class="string">&#x27;丙&#x27;</span>,<span class="string">&#x27;丁&#x27;</span>,<span class="string">&#x27;戊&#x27;</span>,<span class="string">&#x27;己&#x27;</span>,<span class="string">&#x27;庚&#x27;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr[getRandom(<span class="number">0</span>,arr.length - <span class="number">1</span>)]);</span><br></pre></td></tr></table></figure><p>案例：猜数字游戏</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//猜数字游戏</span></span><br><span class="line"><span class="comment">//1.随机生成一个1-10的整数，我们需要用到Math.random()方法</span></span><br><span class="line"><span class="comment">//2.需要一直菜刀正确为止，所以要一直循环</span></span><br><span class="line"><span class="comment">//3.while循环更简单</span></span><br><span class="line"><span class="comment">//4.核心算法：使用if else if 多分支语句来判断大于雄安与等于</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandom</span>(<span class="params">min,max</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min + <span class="number">1</span>)) + min;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> random = getRandom(<span class="number">1</span>,<span class="number">10</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123; <span class="comment">//死循环</span></span><br><span class="line">    <span class="keyword">var</span> num = prompt(<span class="string">&#x27;你来猜？请输入1-10之间的一个数字&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(num &gt; random) &#123;</span><br><span class="line">        alert(<span class="string">&#x27;你猜大了&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(num &lt; random) &#123;</span><br><span class="line">        alert(<span class="string">&#x27;你猜小了&#x27;</span>)；</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        alert(<span class="string">&#x27;猜对了&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>; <span class="comment">// 退出整个循环结束程序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Data对象"><a href="#Data对象" class="headerlink" title="Data对象"></a>Data对象</h2><p>  Date 对象和 Math 对象不一样，Date是一个构造函数，所以使用时需要实例化后才能使用其中具体方法和属性。Date 实例用来处理日期和时间</p><p><strong>使用Date实例化日期对象</strong></p><ul><li><ul><li>获取当前时间必须实例化</li><li>获取指定时间的日期对象</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Data() 日期对象，是一个构造函数，必须使用new来调用创建我们的日期对象</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(); <span class="comment">// 创建一个数组对象</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>(); <span class="comment">// 创建一个对象实例</span></span><br><span class="line"><span class="comment">// 1.使用Data 如果没有参数，返回系统当前时间</span></span><br><span class="line"><span class="keyword">var</span> data = <span class="keyword">new</span> Data();</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br><span class="line"><span class="comment">// 2.参数常用的写法，数字型 2022,06,11 或者是字符串型 &#x27;2022-06-11 00:00:00&#x27;</span></span><br><span class="line"><span class="keyword">var</span> data1 = <span class="keyword">new</span> Data(<span class="number">2022</span>,<span class="number">06</span>,<span class="number">11</span>);</span><br><span class="line"><span class="built_in">console</span>.log(data1); <span class="comment">//返回的是7月，不是6月</span></span><br><span class="line"><span class="keyword">var</span> data2 = <span class="keyword">new</span> Data(<span class="string">&#x27;2022-06-11 00:00:00&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(data2);</span><br></pre></td></tr></table></figure><p><strong>日期格式化</strong></p><p>获取日期的指定部分，通过日期对象里面的属性和方法手动得到这种格式</p><ul><li>使用Date实例的方法和属性</li><li>getMonth()方法获取到的月份 + 1 = 当月</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206111942811.png"></p><p>格式化日期</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//日期格式化</span></span><br><span class="line">        <span class="comment">// 格式化日期 年 月 日</span></span><br><span class="line">      <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">      <span class="built_in">console</span>.log(date.getFullYear()); <span class="comment">//返回当前日期的年 2022</span></span><br><span class="line">      <span class="built_in">console</span>.log(date.getMonth() + <span class="number">1</span>); <span class="comment">//月份 返回的月份小1个月，记得月份加1呦</span></span><br><span class="line">      <span class="built_in">console</span>.log(date.getDate()); <span class="comment">//返回的是 几号</span></span><br><span class="line">      <span class="built_in">console</span>.log(date.getDay); <span class="comment">//周一返回的是1 周六返回的是6 周日返回的是0</span></span><br><span class="line">      <span class="comment">//我们写一个 2022年 6月 11日 星期六（当前日期）</span></span><br><span class="line">      <span class="keyword">var</span> year = date.getFullYear();</span><br><span class="line">      <span class="keyword">var</span> month = date.getMonth() + <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">var</span> dates = date.getDate();</span><br><span class="line">      <span class="keyword">var</span> arr = [<span class="string">&#x27;星期日&#x27;</span>,<span class="string">&#x27;星期一&#x27;</span>,<span class="string">&#x27;星期二&#x27;</span>,<span class="string">&#x27;星期三&#x27;</span>,<span class="string">&#x27;星期四&#x27;</span>,<span class="string">&#x27;星期五&#x27;</span>,<span class="string">&#x27;星期六&#x27;</span>]；</span><br><span class="line">      <span class="keyword">var</span> day = date.getDay();</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;今天是&quot;</span> + year + <span class="string">&quot;年&quot;</span> + month + <span class="string">&quot;月&quot;</span> + dates + <span class="string">&quot;日&quot;</span> + arr[day]);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//格式化日期 时分秒</span></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(date.getHours()); <span class="comment">//时</span></span><br><span class="line"><span class="built_in">console</span>.log(date.getMinutes()); <span class="comment">//分</span></span><br><span class="line"><span class="built_in">console</span>.log(date.getSeconds()); <span class="comment">// 秒</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//封装一个函数返回当前的 时 分 秒 格式 08:08:08</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTimer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  <span class="keyword">var</span> h = time.getHours();</span><br><span class="line">  <span class="keyword">var</span> h = h &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + h : h;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> m = time.getMinutes();</span><br><span class="line">  <span class="keyword">var</span> m = m &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + m : m;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> s = time.getSeconds();</span><br><span class="line">  <span class="keyword">var</span> s = s &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + s : s;</span><br><span class="line">  <span class="keyword">return</span> h + <span class="string">&quot;:&quot;</span> + h + <span class="string">&quot;:&quot;</span> + s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getTimer());</span><br></pre></td></tr></table></figure><p><strong>获取Date日期总的毫秒数(时间戳)</strong><br>基于1970年1月1日(世界标准世界)起的毫秒数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实例化Date对象</span></span><br><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="comment">// 1. 通过 value() getTime()</span></span><br><span class="line"><span class="built_in">console</span>.log(now.valueOf());</span><br><span class="line"><span class="built_in">console</span>.log(now.getTime());</span><br><span class="line"><span class="comment">// 2. 简单写可以这么做 (最常用的)</span></span><br><span class="line"><span class="keyword">var</span> now = + <span class="keyword">new</span> <span class="built_in">Date</span>();   </span><br><span class="line"><span class="comment">// 3. HTML5中提供的方法，有兼容性问题</span></span><br><span class="line"><span class="keyword">var</span> now = <span class="built_in">Date</span>.now();</span><br></pre></td></tr></table></figure><p>案例：倒计时效果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  倒计时案例</span></span><br><span class="line"><span class="comment">//  1. 核心算法：输入的时间减去现在的时间就是剩余的时间，即倒计时，但不能拿时分秒相减。</span></span><br><span class="line"><span class="comment">//  2.用时间戳来做，用户输入时间总的毫秒数减去现在时间的总的毫秒数，</span></span><br><span class="line"><span class="comment">//   得到的就是剩余时间的毫秒数</span></span><br><span class="line"><span class="comment">//  3.把剩余时间总的毫秒数转换为天、时、分、秒  (时间戳转换时分秒)</span></span><br><span class="line"><span class="comment">//    转换公式如下：</span></span><br><span class="line"><span class="comment">//    d = parseInt(总秒数/60/60/24) // 计算天数</span></span><br><span class="line"><span class="comment">//    h = parseInt(总秒数/60/60%24) // 计算小时</span></span><br><span class="line"><span class="comment">//    m = parseInt(总秒数/60%60);   // 计算分钟  </span></span><br><span class="line"><span class="comment">//    s = parseInt(总秒数%60);      // 计算当前秒数 </span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 倒计时案例 封装函数实现</span></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">countDown</span>(<span class="params">time</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> nowTime = +<span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="comment">// 返回的是当前时间总的毫秒数</span></span><br><span class="line">        <span class="keyword">var</span> inputTime = +<span class="keyword">new</span> <span class="built_in">Date</span>(time); <span class="comment">// 返回的是用户输入时间总的毫秒数</span></span><br><span class="line">        <span class="keyword">var</span> times = (inputTime - nowTime) / <span class="number">1000</span>; <span class="comment">// times是剩余时间总的秒数</span></span><br><span class="line">        <span class="keyword">var</span> d = <span class="built_in">parseInt</span>(times / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>); <span class="comment">// 天</span></span><br><span class="line">        d = d &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + d : d;</span><br><span class="line">        <span class="keyword">var</span> h = <span class="built_in">parseInt</span>((times / <span class="number">60</span> / <span class="number">60</span>) % <span class="number">24</span>); <span class="comment">//时</span></span><br><span class="line">        h = h &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + h : h;</span><br><span class="line">        <span class="keyword">var</span> m = <span class="built_in">parseInt</span>((times / <span class="number">60</span>) % <span class="number">60</span>); <span class="comment">// 分</span></span><br><span class="line">        m = m &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + m : m;</span><br><span class="line">        <span class="keyword">var</span> s = <span class="built_in">parseInt</span>(times % <span class="number">60</span>); <span class="comment">// 当前的秒</span></span><br><span class="line">        s = s &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + s : s;</span><br><span class="line">        <span class="keyword">return</span> d + <span class="string">&quot;天&quot;</span> + h + <span class="string">&quot;时&quot;</span> + m + <span class="string">&quot;分&quot;</span> + s + <span class="string">&quot;秒&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(countDown(<span class="string">&quot;2022-10-1 18:00:00&quot;</span>));</span><br><span class="line">      <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">      <span class="built_in">console</span>.log(date);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="数组对象"><a href="#数组对象" class="headerlink" title="数组对象"></a>数组对象</h2><p>创建数组的两种方式</p><p><strong>「创建数组的两种方式」</strong></p><ul><li><p><strong>1. 字面量方式</strong><code>var arr = [1,&quot;test&quot;,true];</code></p></li><li><p><strong>2. 实例化数组对象 new Array()</strong><code>var arr = new Array();</code></p></li><li><ul><li>注意：上面代码中 arr 创建出的是一个空数组，如果需要使用构造函数Array创建非空数组，可以在创建数组时传入参数</li><li>如果只传入一个参数(数字)，则参数规定了数组的长度。</li><li>如果传入了多个参数，则参数称为数组的元素。</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.利用数组字面量</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">// 2.利用new Array()</span></span><br><span class="line"><span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="built_in">Array</span>(); <span class="comment">// 创建了一个空数组</span></span><br><span class="line"><span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">2</span>); <span class="comment">// 这个2表示数组长度为2 里面有两个空的数组元素</span></span><br><span class="line"><span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">2</span>,<span class="number">3</span>); <span class="comment">// 等价于[2,3] 这样写表示 里面有两个数组元素 是2和1 </span></span><br><span class="line"><span class="built_in">console</span>.log(arr1);</span><br></pre></td></tr></table></figure><p><strong>「检测是否为数组」</strong></p><ul><li><p><strong>1. instanceof 运算符</strong></p></li><li><ul><li>instanceof 可以判断一个对象是否是某个构造函数的实例</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">23</span>];</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(obj <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>2. Array.isArray()</strong></p></li><li><ul><li>Array.isArray()用于判断一个对象是否为数组，isArray() 是 HTML5 中提供的方法</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">23</span>];</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(arr));   <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(obj));   <span class="comment">// false</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>3. 注意 typeof用法</strong></p></li><li><ul><li>typeof 用于判断变量的类型</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">23</span>];</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="keyword">typeof</span> arr) <span class="comment">// object 对象arr是构造函数的实例因此是对象数据类型</span></span><br></pre></td></tr></table></figure><p><strong>「添加删除数组元素的方法」</strong></p><ul><li>数组中有进行增加、删除元素的方法，部分方法如下表</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206121009271.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加删除素组元素的方法</span></span><br><span class="line"><span class="comment">// 1.push() 在数组的末尾添加一个或者多个数组元素，</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr.push(<span class="number">4</span>,<span class="string">&#x27;pink&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr.push(<span class="number">4</span>,<span class="string">&#x27;pink&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="comment">// (1)push可以给数组追加新的元素</span></span><br><span class="line"><span class="comment">// (2)push() 参数直接写数组元素就可以</span></span><br><span class="line"><span class="comment">// (3)push完毕后，返回的结果是 新数组的长度</span></span><br><span class="line"><span class="comment">// (4)原数组也会发生变化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.unshiift是可以给数组前面追加新元素</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.unshift(<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="comment">// 和push同理</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.pop() 可以删除数组里最后一个元素</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.pop());</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="comment">// (1)pop是可以删除数组最后一个元素，但一次只能删除一个元素</span></span><br><span class="line"><span class="comment">// (2)pop() 没有参数</span></span><br><span class="line"><span class="comment">// (3)pop完毕之后，返回的结果是删除的那个元素</span></span><br><span class="line"><span class="comment">// (4)原数组也会发生变化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.shift() 可以删除数组的第一个元素</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.shift());</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="comment">// 和pop同理</span></span><br></pre></td></tr></table></figure><p>案例：删选数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 有一个包含工资的数组[1500,1200,2000,2100,1800]，要求把超过2000的删除，剩余的放到新数组里</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1500</span>,<span class="number">1200</span>,<span class="number">2000</span>,<span class="number">2100</span>,<span class="number">1800</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &lt; <span class="number">2000</span>) &#123;</span><br><span class="line">        <span class="comment">// newArr[newArr.length] = arr[i];</span></span><br><span class="line">        newArr.push(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(newArr);</span><br></pre></td></tr></table></figure><p><strong>「数组排序」</strong></p><p>数组中有对数组本身排序的方法，部分方法如下表</p><table><thead><tr><th>方法名</th><th>说明</th><th>是否修改原数组</th></tr></thead><tbody><tr><td>reverse()</td><td>颠倒数组中元素顺序，无参数</td><td>会改变原来数组，返回新数组</td></tr><tr><td>sort()</td><td>对数组元素进行排序</td><td>会改变原来数组， 返回新数组</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组排序</span></span><br><span class="line"><span class="comment">// 1.翻转数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;pink&#x27;</span>,<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>];</span><br><span class="line">arr.reverse();</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.数组排序(冒泡排序)</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">13</span>,<span class="number">4</span>,<span class="number">77</span>,<span class="number">1</span>,<span class="number">77</span>];</span><br><span class="line">arr1.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// return a - b; // 升序的顺序排列</span></span><br><span class="line">    <span class="keyword">return</span> b - a; <span class="comment">// 降序的顺序排列</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arr1);</span><br></pre></td></tr></table></figure><ul><li><p>注意：<strong>sort方法需要传入参数(函数)来设置升序、降序排序</strong></p></li><li><ul><li>如果传入“function(a,b){ return a-b;}”，则为升序</li><li>如果传入“function(a,b){ return b-a;}”，则为降序</li></ul></li></ul><p><strong>「数组索引方法」</strong></p><ul><li>数组中有获取数组指定元素索引值的方法，部分方法如下表</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206121049869.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回数组元素索引号的方法 indexOf(数组元素)  作用就是返回该数组元素的索引号 从前面开始查找</span></span><br><span class="line"><span class="comment">// 它只返回第一个满足条件的索引号</span></span><br><span class="line"><span class="comment">// 如果在数组里面找不到元素，则返回的结果是-1</span></span><br><span class="line"><span class="comment">//var arr = [&#x27;red&#x27;,&#x27;green&#x27;,&#x27;blue&#x27;,&#x27;pink&#x27;,&#x27;blue&#x27;];</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;pink&#x27;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="string">&#x27;blue&#x27;</span>)); <span class="comment">//-1</span></span><br><span class="line"><span class="comment">// 返回数组元素索引号的方法 lastindexOf(数组元素)  作用就是返回该数组元素的索引号 从后面开始查找</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>,<span class="string">&#x27;pink&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.lastindexOf(<span class="string">&#x27;blue&#x27;</span>)); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><p>案例：数组去重</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组去重 [&#x27;c&#x27;,&#x27;a&#x27;,&#x27;z&#x27;,&#x27;a&#x27;,&#x27;x&#x27;,&#x27;a&#x27;,&#x27;x&#x27;,&#x27;c&#x27;,&#x27;b&#x27;] 要求去除重复元素</span></span><br><span class="line"><span class="comment">// 1.目标：把旧数组里面不重复的元素取出来放进新数组，重复的元素只保留一个，放到新数组里去重</span></span><br><span class="line"><span class="comment">// 2.核心算法：遍历旧数组，然后拿旧数组元素查询新数组，如果该元素在新数组里没有出现过，我们就添加，否则不添加</span></span><br><span class="line"><span class="comment">// 3.如何知道该元素有没有存在？利用 新数组.indexOf(数组元素) 如果返回-1 ，说明数组里没有该元素</span></span><br><span class="line"><span class="comment">// 封装一个去重函数 unique &#x27;独一无二的&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newArr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (newArr.indexOf(arr[i]) === -<span class="number">1</span>) &#123;</span><br><span class="line">            newArr.push(arr[i]);     </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> demo = unique([<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;z&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;b&#x27;</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(demo);</span><br></pre></td></tr></table></figure><p><strong>「数组转换为字符串」</strong></p><ul><li>数组中有把数组转化为字符串的方法，部分方法如下表</li><li>注意：join方法如果不传入参数，则按照 “ , ”拼接元素</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206121108168.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.toString(</span></span><br><span class="line">)    </span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> str = arr.toString(); <span class="comment">// 将数组转换为字符串   </span></span><br><span class="line"><span class="built_in">console</span>.log(str); <span class="comment">// 1,2,3,4</span></span><br><span class="line"><span class="comment">// 2.join(分隔符)</span></span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> str2 = arr2.join(<span class="string">&quot;|&quot;</span>);<span class="comment">//按照键入字符将数组转换为字符串    </span></span><br><span class="line"><span class="built_in">console</span>.log(str2); <span class="comment">// 1|2|3|4</span></span><br></pre></td></tr></table></figure><p><strong>「其他方法」</strong></p><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206121111243.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>];</span><br><span class="line"><span class="keyword">var</span> arr3 = arr.concat(arr2);</span><br><span class="line"><span class="built_in">console</span>.log(arr3); <span class="comment">// [1,2,3,4,5,6,7,8]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// slice(begin,end) 是一种左闭右开区间 [1,3)</span></span><br><span class="line"><span class="comment">// 从索引1出开始截取，到索引3之前</span></span><br><span class="line"><span class="keyword">var</span> arr4 = arr.slice(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr4); <span class="comment">// [2,3]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr5 = arr2.splice(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr5); <span class="comment">// [5,6,7]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">// [8]   splice()会影响原数组</span></span><br></pre></td></tr></table></figure><h2 id="字符串对象"><a href="#字符串对象" class="headerlink" title="字符串对象"></a>字符串对象</h2><p><strong>「基本包装类型」</strong>为了方便操作基本数据类型，JavaScript 还提供了三个特殊的引用类型：String、Number和 Boolean。<br>  <code>基本包装类型就是把简单数据类型包装成为复杂数据类型</code>，这样基本数据类型就有了属性和方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面代码有什么问题？</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;andy&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.length); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><p>  按道理基本数据类型是没有属性和方法的，而对象才有属性和方法，但上面代码却可以执行，这是因为 js 会把基本数据类型包装为复杂数据类型，其执行过程如下 ：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 生成临时变量，把简单类型包装为复杂数据类型</span></span><br><span class="line"><span class="keyword">var</span> temp = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&#x27;andy&#x27;</span>);</span><br><span class="line"><span class="comment">// 2. 赋值给我们声明的字符变量</span></span><br><span class="line">str = temp;</span><br><span class="line"><span class="comment">// 3. 销毁临时变量</span></span><br><span class="line">temp = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p><strong>「字符串的不可变」</strong></p><ul><li>指的是里面的值不可变，虽然看上去可以改变内容，但其实是地址变了，内存中新开辟了一个内存空间。</li><li>当重新给字符串变量赋值的时候，变量之前保存的字符串不会被修改，依然在内存中重新给字符串赋值，会重新在内存中开辟空间，这个特点就是字符串的不可变。</li><li>由于字符串的不可变，在<strong>「大量拼接字符串」</strong>的时候会有效率问题</li></ul><p><strong>「根据字符返回位置」</strong></p><p>字符串通过基本包装类型可以调用部分方法来操作字符串，以下是返回指定字符的位置的方法：</p><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206121130186.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;anndy&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">&quot;d&quot;</span>)); <span class="comment">// 3</span></span><br><span class="line"><span class="comment">//指定从索引号为4的地方开始查找字符&quot;d&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">&quot;d&quot;</span>, <span class="number">4</span>)); <span class="comment">// -1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.lastIndexOf(<span class="string">&quot;n&quot;</span>)); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>案例：查找字符串”abcoefoxyozzopp”中所有o出现的位置以及次数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//核心算法：先查找第一个o出现的位置</span></span><br><span class="line"><span class="comment">//然后 只要indexOf 返回的结果不是 -1 就继续往后查找</span></span><br><span class="line"><span class="comment">//因为indexOf 只能查找到第一个，所以后面的查找，利用第二个参数，当前索引加1，从而继续查找</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;oabcoefoxyozzopp&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> index = str.indexOf(<span class="string">&quot;o&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (index !== -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(index);</span><br><span class="line">    num++;</span><br><span class="line">    index = str.indexOf(<span class="string">&quot;o&quot;</span>, index + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;o出现的次数是&#x27;</span> + num);</span><br></pre></td></tr></table></figure><p><strong>「根据位置返回字符」</strong></p><p>字符串通过基本包装类型可以调用部分方法来操作字符串，以下是根据位置返回指定位置上的字符：</p><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206121136083.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据位置返回字符</span></span><br><span class="line"><span class="comment">// 1. charAt(index) 根据位置返回字符</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;andy&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.charAt(<span class="number">3</span>)); <span class="comment">// y</span></span><br><span class="line"><span class="comment">// 遍历所有的字符</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(str.charAt(i));</span><br><span class="line">&#125; <span class="comment">// a n d y</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. charCodeAt(index)  </span></span><br><span class="line"><span class="comment">//返回相应索引号的字符ASCII值 目的： 判断用户按下了那个键 </span></span><br><span class="line"><span class="built_in">console</span>.log(str.charCodeAt(<span class="number">0</span>)); <span class="comment">// 97</span></span><br><span class="line"><span class="comment">// 3. str[index] H5 新增的</span></span><br><span class="line"><span class="built_in">console</span>.log(str[<span class="number">0</span>]); <span class="comment">// a</span></span><br></pre></td></tr></table></figure><p>案例：判断一个字符串 ‘abcoefoxyozzopp’ 中出现次数最多的字符，并统计其次数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//核心算法：利用 charAt(） 遍历这个字符串</span></span><br><span class="line"><span class="comment">//把每个字符都存储给对象， 如果对象没有该属性，就为1，如果存在了就 +1</span></span><br><span class="line"><span class="comment">//遍历对象，得到最大值和该字符 注意：在遍历的过程中，把字符串中的每个字符作为对象的属性存储在对象中，对应的属性值是该字符出现的次数     </span></span><br><span class="line"> <span class="keyword">var</span> str = <span class="string">&quot;abcoefoxyozzopp&quot;</span>;</span><br><span class="line">      <span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> chars = str.charAt(i); <span class="comment">// chars 是 字符串的每一个字符</span></span><br><span class="line">        <span class="keyword">if</span> (o[chars]) &#123;</span><br><span class="line">          <span class="comment">// o[chars] 得到的是属性值</span></span><br><span class="line">          o[chars]++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          o[chars] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(o);</span><br><span class="line">      <span class="comment">// 2. 遍历对象</span></span><br><span class="line">      <span class="keyword">var</span> max = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">var</span> ch = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> o) &#123;</span><br><span class="line">        <span class="comment">// k 得到是 属性名</span></span><br><span class="line">        <span class="comment">// o[k] 得到的是属性值</span></span><br><span class="line">        <span class="keyword">if</span> (o[k] &gt; max) &#123;</span><br><span class="line">          max = o[k];</span><br><span class="line">          ch = k;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(max);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;最多的字符是&quot;</span> + ch);</span><br></pre></td></tr></table></figure><p><strong>「字符串操作方法」</strong></p><p>字符串通过基本包装类型可以调用部分方法来操作字符串，以下是部分操作方法：</p><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206122119052.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串操作方法</span></span><br><span class="line"><span class="comment">// 1. concat(&#x27;字符串1&#x27;,&#x27;字符串2&#x27;....)</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;andy&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.concat(<span class="string">&#x27;red&#x27;</span>)); <span class="comment">// andyred</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. substr(&#x27;截取的起始位置&#x27;, &#x27;截取几个字符&#x27;);</span></span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">&#x27;改革春风吹满地&#x27;</span>;</span><br><span class="line"><span class="comment">// 第一个2 是索引号的2 从第几个开始  第二个2 是取几个字符</span></span><br><span class="line"><span class="built_in">console</span>.log(str1.substr(<span class="number">2</span>, <span class="number">2</span>)); <span class="comment">// 春风</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 替换字符 replace(&#x27;被替换的字符&#x27;, &#x27;替换为的字符&#x27;)  它只会替换第一个字符</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;andyandy&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.replace(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>)); <span class="comment">// bndyandy</span></span><br><span class="line"><span class="comment">// 有一个字符串 &#x27;abcoefoxyozzopp&#x27;  要求把里面所有的 o 替换为 *</span></span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">&quot;abcoefoxyozzopp&quot;</span>;</span><br><span class="line"><span class="keyword">while</span> (str1.indexOf(<span class="string">&quot;o&quot;</span>) !== -<span class="number">1</span>) &#123;</span><br><span class="line">  str1 = str1.replace(<span class="string">&quot;o&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(str1); <span class="comment">// abc*ef*xy*zz*pp</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 字符转换为数组 split(&#x27;分隔符&#x27;)    </span></span><br><span class="line"><span class="comment">// 前面我们学过 join 把数组转换为字符串</span></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">&quot;red, pink, blue&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str2.split(<span class="string">&quot;,&quot;</span>)); <span class="comment">//[red,pink,blue]</span></span><br><span class="line"><span class="keyword">var</span> str3 = <span class="string">&quot;red&amp;pink&amp;blue&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str3.split(<span class="string">&quot;&amp;&quot;</span>)); <span class="comment">// [red,pink,blue]</span></span><br></pre></td></tr></table></figure><h1 id="简单数据类型和复杂数据类型"><a href="#简单数据类型和复杂数据类型" class="headerlink" title="简单数据类型和复杂数据类型"></a>简单数据类型和复杂数据类型</h1><p><strong>「简单类型（基本数据类型、值类型）」</strong>：在存储时变量中存储的是值本身，包括string ，number，boolean，undefined，null</p><p><strong>「复杂数据类型（引用类型）」</strong>：在存储时变量中存储的仅仅是地址（引用），通过 new 关键字创建的对象（系统对象、自定义对象），如 Object、Array、Date等；</p><p><strong>「堆栈」</strong></p><ul><li><p>堆栈空间分配区别：</p></li><li><ul><li>1、栈（操作系统）：由操作系统自动分配释放存放函数的参数值、局部变量的值等。其操作方式类似于数据结构中的栈；</li><li>简单数据类型存放到栈里面</li><li>2、堆（操作系统）：存储复杂类型(对象)，一般由程序员分配释放，若程序员不释放，由垃圾回收机制回收。</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206122149383.png"></p><ul><li><p>简单数据类型的存储方式</p></li><li><ul><li>值类型变量的数据直接存放在变量（栈空间）中</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206122150177.png"></p><ul><li><p>复杂数据类型的存储方式</p></li><li><ul><li>引用类型变量（栈空间）里存放的是地址，真正的对象实例存放在堆空间中</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206122150572.png"></p><p><strong>「简单类型传参」</strong><br>  函数的形参也可以看做是一个变量，当我们把一个值类型变量作为参数传给函数的形参时，其实是把变量在栈空间里的值复制了一份给形参，那么在方法内部对形参做任何修改，都不会影响到的外部变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    a++;</span><br><span class="line">    <span class="built_in">console</span>.log(a); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line">fn(x);</span><br><span class="line"><span class="built_in">console</span>.log(x)；</span><br><span class="line"><span class="comment">// 11</span></span><br><span class="line"><span class="comment">// 10</span></span><br></pre></td></tr></table></figure><p><strong>「复杂数据类型传参」</strong><br>  函数的形参也可以看做是一个变量，当我们把引用类型变量传给形参时，其实是把变量在栈空间里保存的堆地址复制给了形参，形参和实参其实保存的是同一个堆地址，所以操作的是同一个对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">x</span>) </span>&#123; <span class="comment">// x = p</span></span><br><span class="line">      <span class="built_in">console</span>.log(x.name); <span class="comment">// 2. 这个输出什么 ?    </span></span><br><span class="line">      x.name = <span class="string">&quot;张学友&quot;</span>;</span><br><span class="line">      <span class="built_in">console</span>.log(x.name); <span class="comment">// 3. 这个输出什么 ?    </span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">&quot;刘德华&quot;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(p.name);    <span class="comment">// 1. 这个输出什么 ?   </span></span><br><span class="line">  f1(p);</span><br><span class="line">  <span class="built_in">console</span>.log(p.name);    <span class="comment">// 4. 这个输出什么 ?  </span></span><br><span class="line"><span class="comment">//刘德华</span></span><br><span class="line"><span class="comment">//刘德华</span></span><br><span class="line"><span class="comment">//张学友</span></span><br><span class="line"><span class="comment">//张学友</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小白的前端之路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript对象</title>
      <link href="/%E5%89%8D%E7%AB%AF/Javascript%E5%AF%B9%E8%B1%A1/"/>
      <url>/%E5%89%8D%E7%AB%AF/Javascript%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><h2 id="对象的概念"><a href="#对象的概念" class="headerlink" title="对象的概念"></a>对象的概念</h2><p><strong>「对象」</strong>在JavaScript中，对象是一组无序的相关属性和方法的集合，所有的事物都是对象，例如字符串、数值、数组、函数等。</p><ul><li><p>对象是由属性和方法组成的</p></li><li><ul><li>属性：事物的特征，在对象中用属性来表示（常用名词）</li><li>方法：事物的行为，在对象中常用方法来表示（常用动词）</li></ul></li></ul><p><strong>「为什么需要对象」</strong></p><ul><li>保存一个值时，可以使用变量，保存多个值（一组值）时，可以使用数组，如果保存一个的完整信息呢？</li><li>为了更好地存储一组数据，对象应用而生；对象中为每项数据设置了属性名称，可以访问数据更语义化，数据结构清晰，表意明显，方便开发者使用。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>:<span class="string">&quot;fan&quot;</span>,</span><br><span class="line">  <span class="string">&quot;sex&quot;</span>:<span class="string">&quot;male&quot;</span>,</span><br><span class="line">  <span class="string">&quot;age&quot;</span>:<span class="number">18</span>,</span><br><span class="line">  <span class="string">&quot;height&quot;</span>:<span class="number">155</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建对象的三种方式"><a href="#创建对象的三种方式" class="headerlink" title="创建对象的三种方式"></a>创建对象的三种方式</h2><ul><li>利用字面量创建对象</li><li>利用 new object 创建对象</li><li>利用构造函数创建对象</li></ul><h3 id="「1-利用字面量创建对象」"><a href="#「1-利用字面量创建对象」" class="headerlink" title="「1. 利用字面量创建对象」"></a><strong>「1. 利用字面量创建对象」</strong></h3><p>使用对象字面量创建对象：</p><ul><li>就是花括号 { } 里面包含了表达这个具体事物（对象）的属性和方法；{ } 里面采取键值对的形式表示<br>-<code>键</code>：相当于属性名<br>-<code>值</code>：相当于属性值，可以是任意类型的值（数字类型、字符串类型、布尔类型，函数类型等）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// star 就是创建的对象</span></span><br><span class="line">  <span class="keyword">var</span> star = &#123;</span><br><span class="line">    <span class="attr">name</span> : <span class="string">&#x27;pink&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span> : <span class="number">18</span>,</span><br><span class="line">    <span class="attr">sex</span> : <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">    <span class="attr">sayHi</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      alert(<span class="string">&#x27;大家好啊&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="comment">// 方法冒号后面跟的是一个匿名函数</span></span><br></pre></td></tr></table></figure><p>对象的的两个概念（这里方法是名词）</p><ul><li><ul><li>对象的属性：对象中<code>存储具体数据</code>的“键值对”中的‘键’称为对象的属性，即对象中存储具体数据的项。</li><li>对象的方法：对象中<code>存储函数</code>的“键值对”中的“键”称为对象的方法，即对象中存储函数的项。</li></ul></li></ul><p>对象的使用</p><ul><li>访问对象的属性：对象里面的属性调用：<code>对象.属性名</code>；对象里面属性的另一种调用方式：<code>对象[&#39;属性名&#39;]</code>,注意方括号里面的属性必须加上引号。</li><li>调用对象的方法:<code>对象.方法名();</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(star.name)     <span class="comment">// 调用名字属性</span></span><br><span class="line"><span class="built_in">console</span>.log(star[<span class="string">&#x27;name&#x27;</span>])  <span class="comment">// 调用名字属性</span></span><br><span class="line"></span><br><span class="line">star.sayHi(); <span class="comment">// 调用对象方法</span></span><br></pre></td></tr></table></figure><p>变量、属性、函数、方法总结：<br><code>①变量</code>：单独声明赋值，单独存在<br><code>②属性</code>:  对象里面的变量称为属性，不需要声明，用来描述该对象的特征。<br><code>③方法</code>：方法是对象的一部分，函数不是对象的一部分，函数是单独封装操作的容器。对象里面的函数称为方法，方法不需要声明，使用” 对象.方法名() “的方式就可以调用，方法用来描述该对象的行为和功能。<br><code>④函数</code>:  单独存在的，通过” 函数名() “的方式就可以调用。</p><h3 id="「2-利用new-Object创建对象」"><a href="#「2-利用new-Object创建对象」" class="headerlink" title="「2. 利用new Object创建对象」"></a><strong>「2. 利用new Object创建对象」</strong></h3><ul><li>创建空对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过内置构造函数Object创建对象，此时andy变量已经保存了创建出来的空对象</span></span><br><span class="line"><span class="keyword">var</span> andy = <span class="keyword">new</span> <span class="built_in">Object</span>();  </span><br></pre></td></tr></table></figure><ul><li>给空对象添加属性和方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过对象操作属性和方法的方式，来为对象增加属性和方法</span></span><br><span class="line"><span class="comment">// (1)我们利用等号 = 赋值的方法，添加对象的属性和方法</span></span><br><span class="line"><span class="comment">// (2)每个属性和方法之间用分号结束</span></span><br><span class="line">andy.name = <span class="string">&#x27;pink&#x27;</span>;</span><br><span class="line">andy.age = <span class="number">18</span>; <span class="comment">// andy.age = 19修改对象属性</span></span><br><span class="line">andy.sex = <span class="string">&#x27;男&#x27;</span>; <span class="comment">// andy.phoneNum = 110 添加属性</span></span><br><span class="line">andy.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">&#x27;大家好&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">obj.sayHi();<span class="comment">// 调用对象的方法 </span></span><br><span class="line"><span class="comment">//第二种写法 obj[&#x27;sayHi&#x27;]();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Object()第一个字母大写；</span></span><br><span class="line"><span class="comment">//new Object() 需要new关键字，使用的格式:对象.属性 = 值</span></span><br></pre></td></tr></table></figure><p>案例：工厂函数创建对象 这个把创建好的对象返回给函数调用处</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 工厂函数创建对象 这个把创建好的对象返回给函数调用处</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//new Object创建对象</span></span><br><span class="line">  <span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">  person.name = name;</span><br><span class="line">  person.age = age;</span><br><span class="line">  person.job = job;</span><br><span class="line">  person.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Hello,everyBody&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="comment">//此函数返回的是一个对象</span></span><br><span class="line">  <span class="keyword">return</span> person;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">var</span> p1 = createPerson(<span class="string">&#x27;张三&#x27;</span>, <span class="number">22</span>, <span class="string">&#x27;actor&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="「3-利用构造函数创建对象」"><a href="#「3-利用构造函数创建对象」" class="headerlink" title="「3. 利用构造函数创建对象」"></a><strong>「3. 利用构造函数创建对象」</strong></h3><p><code>构造函数</code>是一种特殊的函数，主要用来初始化对象，即为对象成员变量赋初始值,它总与new运算符一起使用，我们可以把对象中一些公共的属性和方法抽出来，然后封装到这个函数里面。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用构造函数创建对象</span></span><br><span class="line"><span class="comment">// 构造函数的语法格式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> 构造函数名(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.属性 = 值;</span><br><span class="line">    <span class="built_in">this</span>.属性 = 值;</span><br><span class="line">    <span class="built_in">this</span>.方法 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> 构造函数名();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数的封装格式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> 构造函数名(<span class="params">形参<span class="number">1</span>，形参<span class="number">2</span>，形参<span class="number">3.</span>..</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.属性名<span class="number">1</span> = 参数<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">this</span>.属性名<span class="number">2</span> = 参数<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">this</span>.属性名<span class="number">3</span> = 参数<span class="number">3</span>;</span><br><span class="line">    <span class="built_in">this</span>.方法名 = 函数体;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">// 构造函数的调用格式</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> 构造函数名(实参<span class="number">1</span>，实参<span class="number">2</span>，实参<span class="number">3</span>); <span class="comment">// 以上代码中，obj即接收到构造函数创建出来的对象。</span></span><br><span class="line">注意事项：</span><br><span class="line">    <span class="number">1.</span>构造函数约定首字母大写</span><br><span class="line">    <span class="number">2.</span>函数内的属性和方法前面需要添加<span class="built_in">this</span>，表示当前对象的属性和方法</span><br><span class="line">    <span class="number">3.</span>构造函数中不需要retrun返回结果</span><br><span class="line">    <span class="number">4.</span>但我们创建对象的时候，必须用<span class="keyword">new</span> 来调用构造函数</span><br><span class="line">    </span><br><span class="line">    <span class="number">1.</span>其他：构造函数如Stars(),抽取了对象的公共部分，封装到了函数里面，它</span><br><span class="line">     泛指某一大类(<span class="class"><span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    2.创建对象，如<span class="title">new</span> <span class="title">Stars</span>()</span>;特指某一个，利用<span class="keyword">new</span>关键字创建对象的过程</span><br><span class="line">     我们也称为对象实例化</span><br><span class="line">   </span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我们需要创建四大天王的对象 相同的属性：名字，年龄，性别，相同的方法：唱歌</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params">uname, age, sex</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = uname;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">    <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    <span class="built_in">this</span>.sing = <span class="function"><span class="keyword">function</span>(<span class="params">sang</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(sang);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> Star(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;男&#x27;</span>); <span class="comment">// 调用函数返回的是一个对象</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> ldh);</span><br><span class="line"><span class="built_in">console</span>.log(ldh.name);</span><br><span class="line"><span class="built_in">console</span>.log(ldh[<span class="string">&#x27;sex&#x27;</span>]);</span><br><span class="line">ldh.sang(<span class="string">&#x27;冰雨&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> zcy = <span class="keyword">new</span> Star(<span class="string">&#x27;张学友&#x27;</span>, <span class="number">19</span>, <span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(zxy.name);</span><br><span class="line"><span class="built_in">console</span>.log(zxy.age);</span><br><span class="line">zxy.sing(<span class="string">&#x27;春兰&#x27;</span>)；</span><br></pre></td></tr></table></figure><p>构造函数和对象</p><ul><li>构造函数：如Stars()，抽象了对象的公共部分，封装到了一个函数里面，它泛指某一大类(class)</li><li>创建对象：如new Stars() ，特指某一个，通过new关键字创建对象的过程我们也称为对象实例化</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206111550328.jpg"></p><p><strong>new关键字的作用(面试题)</strong></p><ul><li><ul><li>1.在构造函数代码开始执行之前，创建一个空对象；</li><li>2.修改this的指向，把this指向创建出来的空对象；</li><li>3.执行构造函数内的代码，给这个新对象添加属性和方法</li><li>4.在函数完成之后，返回这个创建出来的新对象(所以构造函数里面不需要return)</li></ul></li></ul><h2 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// for...in 语句用于对数组或者对象的属性进行循环操作。</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 其语法如下：</span></span><br><span class="line">  <span class="keyword">for</span> (变量 <span class="keyword">in</span> 对象名字) &#123;</span><br><span class="line">      <span class="comment">// 在此执行代码</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//语法中的变量是自定义的，它需要符合命名规范，通常我们会将这个变量写为 k 或者 key。</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(k);      <span class="comment">// 这里的 k 是属性名</span></span><br><span class="line">    <span class="built_in">console</span>.log(obj[k]); <span class="comment">// 这里的 obj[k] 是属性值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小白的前端之路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数</title>
      <link href="/%E5%89%8D%E7%AB%AF/Javascript%E5%87%BD%E6%95%B0/"/>
      <url>/%E5%89%8D%E7%AB%AF/Javascript%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="「1-函数的概念」"><a href="#「1-函数的概念」" class="headerlink" title="「1.函数的概念」"></a><strong>「1.函数的概念」</strong></h2><p>封装了一段可被重复调用执行的代码块，通过函数可以实现大量代码的重复使用。函数是一种数据类型。</p><h2 id="「2-函数的使用」"><a href="#「2-函数的使用」" class="headerlink" title="「2.函数的使用」"></a><strong>「2.函数的使用」</strong></h2><p>函数的使用分为两步：声明函数和调用函数</p><ul><li>声明函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="number">1.</span> 通过<span class="function"><span class="keyword">function</span>关键字定义函数 -- 命名函数</span></span><br><span class="line"><span class="function">  <span class="function"><span class="keyword">function</span> 函数名(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="function">    //函数体代码</span></span><br><span class="line"><span class="function">  &#125;</span></span><br><span class="line"><span class="function">  // 1.1 <span class="function"><span class="keyword">function</span> 是声明函数的关键字，必须小写</span></span></span><br><span class="line"><span class="function"><span class="function">  // 1.2 函数名 命名为动词形式 例: <span class="title">getSum</span></span></span></span><br><span class="line"><span class="function"><span class="function">  </span></span></span><br><span class="line"><span class="function"><span class="function">   2. 通过函数表达式定义函数 ---匿名函数</span></span></span><br><span class="line"><span class="function"><span class="function">  <span class="title">var</span> <span class="title">fn</span> = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span>;</span></span><br><span class="line"><span class="function">  // 2.1 <span class="title">fn</span>是变量名，不是函数名</span></span><br><span class="line"><span class="function">  // 2.2 <span class="title">fn</span>是变量，只不过变量存储的是函数</span></span><br><span class="line"><span class="function">  // 2.3 函数表达式创建的函数可以通过 变量名(<span class="params"></span>)</span>; 来调用</span><br><span class="line">  <span class="comment">// 2.4 函数表达式也可以定义形参和调用传入实参。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匿名函数使用的有第二种方式- -匿名函数自调用</span></span><br><span class="line">( <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="number">123</span>);</span><br><span class="line">&#125;)</span><br><span class="line">();</span><br></pre></td></tr></table></figure><ul><li>调用函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2.调用函数</span></span><br><span class="line">函数名(); </span><br><span class="line"><span class="comment">// 通过调用函数名来执行函数体代码</span></span><br><span class="line"><span class="comment">// 调用时不要忘记添加小括号</span></span><br><span class="line"><span class="comment">// 函数不调用，自己不执行</span></span><br></pre></td></tr></table></figure><p>案例：函数封装求1-100和</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数计算1-100的和</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">        sum += i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(sum);</span><br><span class="line">&#125; <span class="comment">//声明</span></span><br><span class="line">getSum(); <span class="comment">//调用</span></span><br></pre></td></tr></table></figure><h2 id="「3-函数的参数」"><a href="#「3-函数的参数」" class="headerlink" title="「3.函数的参数」"></a><strong>「3.函数的参数」</strong></h2><ul><li><h2 id="形式参数：函数定义时，传递的参数（实参值传递给形参，不用声明的变量）"><a href="#形式参数：函数定义时，传递的参数（实参值传递给形参，不用声明的变量）" class="headerlink" title="形式参数：函数定义时，传递的参数（实参值传递给形参，不用声明的变量）"></a>形式参数：函数定义时，传递的参数（实参值传递给形参，不用声明的变量）</h2></li><li><p>实际参数：函数调用时，传递的参数</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 带参数的函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params">形参<span class="number">1</span>,形参<span class="number">2</span>,形参<span class="number">3.</span>..</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 函数体;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 带参数的函数调用</span></span><br><span class="line">函数名(实参<span class="number">1</span>,实参<span class="number">2</span>,实参<span class="number">3.</span>..);</span><br></pre></td></tr></table></figure><p>函数形参和实参数量不匹配时</p><table><thead><tr><th>参数个数</th><th>说明</th></tr></thead><tbody><tr><td>实参 = 形参</td><td>输出正确结果</td></tr><tr><td>实参 &gt; 形参</td><td>只取到形参的个数</td></tr><tr><td>实参 &lt; 形参</td><td>多的形参定义为 undefined，结果为 NaN</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// js中形参的默认值是undefined。</span></span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line"><span class="keyword">var</span> n = getSum(<span class="number">1</span>, <span class="number">2</span>);<span class="comment">// n = NaN</span></span><br><span class="line"><span class="keyword">var</span> n = getSum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>); <span class="comment">//1 + 2 +3 = 6</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="「4-函数的返回值」"><a href="#「4-函数的返回值」" class="headerlink" title="「4.函数的返回值」"></a><strong>「4.函数的返回值」</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.函数是做某件事或者实现某种功能</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cook</span>(<span class="params">aru</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(aru);</span><br><span class="line">&#125;</span><br><span class="line">cook(<span class="string">&#x27;大肘子&#x27;</span>);</span><br><span class="line"><span class="comment">// 2.函数的返回值格式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> 需要返回的结果;</span><br><span class="line">&#125;</span><br><span class="line">函数名();</span><br><span class="line"><span class="comment">// (1)我们函数只是实现某种功能，最终的结果需要返回给函数的调用者 函数名() 通过return实现</span></span><br><span class="line"><span class="comment">// (2)只要函数遇到return 就把后面的结果返回给函数的调用者 函数名() = return返回的结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.代码演示</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getResult</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">666</span>;</span><br><span class="line">&#125;</span><br><span class="line">getResult(); <span class="comment">// getResult() = 666</span></span><br><span class="line"><span class="built_in">console</span>.log(getResult());</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cook</span>(<span class="params">aru</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> aru;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(cook(<span class="string">&#x27;大肘子&#x27;</span>))；</span><br></pre></td></tr></table></figure><p>案例：求两个数最大值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用函数，求两个数最大值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMax</span>(<span class="params">num1,num2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(num1 &gt; num2) &#123;</span><br><span class="line">        <span class="keyword">return</span> num1;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// return num1 &gt; num2 ? num1 : num2;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getMax(<span class="number">1</span>,<span class="number">3</span>));</span><br></pre></td></tr></table></figure><p>案例：求数组中最大值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用函数求数组[&#x27;5&#x27;,&#x27;2&#x27;,&#x27;99&#x27;,&#x27;101&#x27;,&#x27;67&#x27;,&#x27;77&#x27;] 中的最大值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getArrMax</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> max = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i] &gt; max) &#123;</span><br><span class="line">            max = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line">getArrMax([<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;99&#x27;</span>,<span class="string">&#x27;101&#x27;</span>,<span class="string">&#x27;67&#x27;</span>,<span class="string">&#x27;77&#x27;</span>]); <span class="comment">//实参是一个数组送过去</span></span><br><span class="line"><span class="comment">// 在实际开发中，我们经常用一个变量来接收函数的返回结果</span></span><br><span class="line"><span class="keyword">var</span> re = getArrMax([<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;99&#x27;</span>,<span class="string">&#x27;101&#x27;</span>,<span class="string">&#x27;67&#x27;</span>,<span class="string">&#x27;77&#x27;</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(re);</span><br></pre></td></tr></table></figure><p>函数返回值注意事项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数返回值注意事项</span></span><br><span class="line"><span class="comment">// 1.return终止函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params">num1,num2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2; <span class="comment">// return后面的代码不会被执行</span></span><br><span class="line">    alert(<span class="string">&#x27;我是不会被执行的&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getSum(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line"><span class="comment">// 2.return只能返回一个值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">num1,num2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num1,num2; <span class="comment">// 返回的结果是最后一个</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fn(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line"><span class="comment">// 3.求任意两数加减乘除的结果</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gerResult</span>(<span class="params">num1,num2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [num1+num2, num1-num2,num1*num2, num1/num2];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> re = getResult(<span class="number">1</span>,<span class="number">2</span>); <span class="comment">// 返回的是一个数组</span></span><br><span class="line"><span class="built_in">console</span>.log(re);</span><br><span class="line"><span class="comment">// 4.函数没有return，返回undefined</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fun()); <span class="comment">// 函数返回的结果是undefined</span></span><br></pre></td></tr></table></figure><p>break,continue,return的区别</p><ul><li>break: 结束当前的循环体 (如for、while)</li><li>continue: 跳出本次循环，继续执行下次循环</li><li>return: 不仅可以退出(函数体内)循环，还能够返回return语句中的值，同时还可以结束当前的函数体内的代码</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//避免踩坑 return只能结束函数体内的代码</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">breakDown</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i == <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  breakDown();</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//避免踩坑2 函数如果有return 则返回的是 return 后面的值；</span></span><br><span class="line">  <span class="comment">// return d,a,b; 返回的是b的值</span></span><br><span class="line">  <span class="comment">//如果函数没有 return语句，则返回undefined</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="「5-arguments的使用」"><a href="#「5-arguments的使用」" class="headerlink" title="「5.arguments的使用」"></a><strong>「5.arguments的使用」</strong></h2><p>  当不确定有多少个参数传递的时候，可以用 arguments 来获取。JS中，arguments实际上它是当前函数的一个内置对象。所有函数都内置了一个 arguments 对象，arguments 对象中存储了传递的所有实参。arguments展示形式是一个伪数组，因此可以进行遍历。</p><ul><li><p>伪数组具有以下特点：</p></li><li><ul><li>具有length属性</li><li>按索引方式存储数据</li><li>不具有数组的push，pop等方法</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// arguments的使用 只有函数才有arguments对象，而且每个函数都内置arguments</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//arguments 里面存储了所有传递过来的实参</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);<span class="comment">// [1,2,3...]</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">1</span>]); <span class="comment">// 2</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.length); <span class="comment">// 3</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//我们可以按照数组的方式 遍历argument  </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="built_in">arguments</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  fn(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">// 伪数组并不是真正意义上的数组</span></span><br></pre></td></tr></table></figure><p>案例：利用函数求最大值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用伪数组 实现求最大值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMax</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> max = <span class="built_in">arguments</span>[<span class="number">0</span>];</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">     <span class="keyword">if</span> (<span class="built_in">arguments</span>[i] &gt; <span class="built_in">arguments</span>[<span class="number">0</span>]) &#123;</span><br><span class="line">       max = <span class="built_in">arguments</span>[i];</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> max;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">var</span> result = getMax(<span class="number">1</span>,<span class="number">3</span>,<span class="number">77</span>,<span class="number">5</span>,<span class="number">85</span>)</span><br><span class="line"> colsole.log(result);</span><br></pre></td></tr></table></figure><p>案例：利用函数翻转数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//利用函数翻转任意数组  reverse 翻转</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newArr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = arr.length - <span class="number">1</span>; i &lt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        newArr[newArr.length] = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr1 = reverse([<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">9</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(arr1);</span><br><span class="line"><span class="keyword">var</span> arr2 = reverse([<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;pink&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(arr2);</span><br></pre></td></tr></table></figure><p>案例：利用函数冒泡排序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用函数冒泡排序</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>;j &lt;= arr.length - i- <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">var</span> temp = arr[j];</span><br><span class="line">                arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr1 = sort([<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(arr1);</span><br><span class="line"><span class="keyword">var</span> arr2 = sort([<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">88</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(arr2);</span><br></pre></td></tr></table></figure><p>案例：利用函数判断闰年</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用函数判断闰年</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isRunYear</span>(<span class="params">year</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//如果是闰年返回true，否则返回false</span></span><br><span class="line">    <span class="keyword">var</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span> || year % <span class="number">400</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(isRunYear(<span class="number">2000</span>));</span><br><span class="line"><span class="built_in">console</span>.log(isRunYear(<span class="number">1999</span>));</span><br></pre></td></tr></table></figure><p>函数是可以相互调用的</p><p>案例：输出年份的二月份天数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用户输入年份，输出该年份二月份的天数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">backDay</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> year = prompt(<span class="string">&#x27;请您输入年份&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (isRunYear(year)) &#123;  <span class="comment">// 调用函数需要加小括号</span></span><br><span class="line">        alert(<span class="string">&#x27;当前年份是闰年2月份有29天&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        alert(<span class="string">&#x27;当前年份是平年2月份有28天&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isRunYear</span>(<span class="params">year</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//如果是闰年返回true，否则返回false</span></span><br><span class="line">    <span class="keyword">var</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span> || year % <span class="number">400</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line">backDay();</span><br></pre></td></tr></table></figure><h1 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h1><h2 id="作用域-1"><a href="#作用域-1" class="headerlink" title="作用域"></a>作用域</h2><p><strong>「作用域」</strong>一段程序代码中所用到的名字并不总是有效和可靠的，而限定这个名字的可用性代码范围就是这个名字的作用域。</p><ul><li>作用域的使用提高了程序逻辑的局部性，增强了程序的可靠性，减少了名字冲突。</li><li>ES6之前作用域有两种 <code>全局作用域</code>和<code>局部作用域</code>(函数作用域)</li></ul><p><strong>「全局作用域」</strong>作用于所有代码执行的环境(整个 script 标签内部)或者一个独立的 js 文件。</p><p><strong>「局部作用域」</strong>作用于函数内部的代码环境，就是局部作用域。因为跟函数有关系，所以也被称为<code>函数作用域</code>。</p><p><strong>「JS没有块级作用域」</strong></p><ul><li>块作用域由 {} 包括</li><li>在其他编程语言，if语句中，循环语句创建的变量，仅仅只能在本if语句，本循环语句中使用，如下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">  <span class="keyword">int</span> num = <span class="number">123</span>;</span><br><span class="line">  System.out.print(num); <span class="comment">//123</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.print(num);<span class="comment">//报错</span></span><br></pre></td></tr></table></figure><p>以上java代码会报错，因为代码中 {}是一块作用域，其中声明的变量num，在{}之外不能使用，而JavaScript代码则不会报错</p><p>Js中没有块级作用域 (在ES6之前)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">   <span class="keyword">var</span> num = <span class="number">123</span>;</span><br><span class="line">   <span class="built_in">console</span>.log(num); <span class="comment">// 123</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">console</span>.log(num);<span class="comment">// 123</span></span><br></pre></td></tr></table></figure><h2 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h2><p>在JavaScript中，根据作用域的不同，变量可以分为两种:</p><ul><li><code>全局变量</code></li><li><code>局部变量</code></li></ul><p><strong>「全局变量」</strong>在全局作用域下声明的变量(在函数外部定义的变量)</p><ul><li>全局变量在代码的任何位置都可以使用</li><li>在全局作用域下 var 声明的变量 是全局变量</li><li>特殊情况下，在函数内不使用var声明的变量也是全局变量(不建议使用)。</li></ul><p><strong>「局部变量」</strong>在局部作用域下声明的变量(在函数内部定义的变量)</p><ul><li>局部变量只能在函数内部使用</li><li>在函数内部 var声明的变量是局部变量</li><li>函数的形参实际上就是局部变量</li></ul><p><strong>「全局变量和局部变量的区别」</strong></p><ul><li><code>全局变量:</code>在任何一个地方都可以使用，只有在浏览器关闭时才会销毁，因此比较占内存</li><li><code>局部变量:</code>旨在函数内部使用，当其所在的代码块被执行时，才会被初始化；当代码块运行结束后，就会被销毁，因此更节省内存空间。</li></ul><h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><p><strong>「作用域链」</strong>只要是代码都在一个作用域中，写在函数内部的局部作用域，未卸载仍和行数内部即在全局作用域中；如果函数中还有函数，那么在这个作用域中就又可以诞生一个作用域；根据<code>[内部函数可以访问外部函数变量]</code> 的这种机制，用链式查找决定哪些数据能被内部函数访问，就称作作用域链。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">123</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( num );</span><br><span class="line">    &#125;</span><br><span class="line">    f2();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">456</span>;</span><br><span class="line">f1();<span class="comment">//123</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206102305503.png"></p><p><code>作用域链</code>采取就近原则的方式来查找变量最终的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="string">&#x27;22&#x27;</span>;</span><br><span class="line">    fn2();</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">        fn3();</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">fn3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> a = <span class="number">4</span>;</span><br><span class="line">            <span class="built_in">console</span>.log(a); <span class="comment">//a的值 4</span></span><br><span class="line">            <span class="built_in">console</span>.log(b); <span class="comment">//b的值 &#x27;22&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">fn1();</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206102306310.png"></p><h1 id="预解析"><a href="#预解析" class="headerlink" title="预解析"></a>预解析</h1><p><strong>「预解析相关概念」</strong>JavaScript代码是由浏览器中的JavaScript解析器来执行的。JavaScript解析器在运行JavaScript代码的时候分为两步:预解析和代码执行。</p><ul><li><strong>「预解析」</strong>在当前作用域下，JS代码执行之前，浏览器会默认把带有 var 和 function声明的变量在内存中进行提前声明或定义。</li><li><strong>「代码执行」</strong>从上往下执行JS语句</li></ul><p>预解析会把变量和函数的声明在代码执行之前完成，预解析也叫做变量、函数提升。</p><p><strong>「变量预解析(变量提升)」</strong> 变量的声明会被提升到当前作用域的最上面，变量的赋值不提升。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(num);  <span class="comment">// 结果是多少？</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;      <span class="comment">// ？</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//相当于</span></span><br><span class="line"><span class="keyword">var</span> num;</span><br><span class="line"><span class="built_in">console</span>.log(num);<span class="comment">// 结果是 undefined</span></span><br><span class="line">num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果: undefined</span></span><br><span class="line"><span class="comment">// 注意: 变量提升只提升声明，不提升赋值。</span></span><br></pre></td></tr></table></figure><p><strong>「函数预解析(函数提升)」</strong> 函数的声明会被提升到当前作用域的最上面，但是不会调用函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">fn();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;打印&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 结果: 控制台打印字符串 --- &quot;打印&quot;</span></span><br><span class="line"><span class="comment">// 注意: 函数声明代表函数整体，所以函数提升后，函数名代表整个函数，但是函数并没有被调用！</span></span><br></pre></td></tr></table></figure><p><strong>「函数表达式声明函数问题」</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 函数表达式创建函数，会执行变量提升，此时接收函数的变量名无法正确的调用</span></span><br><span class="line">fn();</span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;想不到吧&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">// 结果:报错提示 &quot;fn is not a function&quot;</span></span><br><span class="line"><span class="comment">// 解释: 该段代码执行之前，会做变量声明提升，fn在提升之后的值</span></span><br><span class="line"><span class="comment">//      是undefined;而fn调用是在fn被赋值为函数体之前，</span></span><br><span class="line"><span class="comment">//      此时fn的值是undefined，所以无法被调用。</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 预解析案例1</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">fun();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(num);</span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相当于执行了以下操作 结果打印 undefined</span></span><br><span class="line"><span class="keyword">var</span> num;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> num;</span><br><span class="line">  <span class="built_in">console</span>.log(num);</span><br><span class="line">  num = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line">num = <span class="number">10</span>;</span><br><span class="line">fun(); </span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 预解析案例2</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">18</span>;</span><br><span class="line">f1();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">9</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">  <span class="built_in">console</span>.log(b);</span><br><span class="line">  <span class="keyword">var</span> a = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相当于执行了以下操作 结果为 undefined 9</span></span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> b;</span><br><span class="line">  <span class="keyword">var</span> a;</span><br><span class="line">  b = <span class="number">9</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">  <span class="built_in">console</span>.log(b);</span><br><span class="line">  a = <span class="string">&#x27;123&#x27;</span>;  </span><br><span class="line">&#125;</span><br><span class="line">a = <span class="number">18</span>;</span><br><span class="line">f1();  </span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 预解析案例3</span></span><br><span class="line">f1();</span><br><span class="line"><span class="built_in">console</span>.log(c);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = b = c = <span class="number">9</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">  <span class="built_in">console</span>.log(b);</span><br><span class="line">  <span class="built_in">console</span>.log(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相当于执行了以下操作 结果为 9 9 9 9 9 &quot;报错--a is not defined&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a;</span><br><span class="line">  a = b = c = <span class="number">9</span>;</span><br><span class="line">  <span class="comment">//相当于 var a = 9; b=9; c=9; b和c 直接赋值，没有var声明，当全局变量看。</span></span><br><span class="line">  <span class="comment">// 差异：集体声明 var a = 9,b = 9, c = 9;</span></span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">  <span class="built_in">console</span>.log(b);</span><br><span class="line">  <span class="built_in">console</span>.log(c);</span><br><span class="line">&#125;</span><br><span class="line">f1();</span><br><span class="line"><span class="built_in">console</span>.log(c);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小白的前端之路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript数组</title>
      <link href="/%E5%89%8D%E7%AB%AF/Javascript%E6%95%B0%E7%BB%84/"/>
      <url>/%E5%89%8D%E7%AB%AF/Javascript%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript数组"><a href="#JavaScript数组" class="headerlink" title="JavaScript数组"></a>JavaScript数组</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="「1-数组的概念」"><a href="#「1-数组的概念」" class="headerlink" title="「1. 数组的概念」"></a><strong>「1. 数组的概念」</strong></h3><p>一组数据的集合，其中的每个数据被称作<code>元素</code>，在数组中可以存放任意类型的元素。数组是一种将一组数据存储在单个变量名下的优雅方式。数组中可以存放任意类型的数据</p><h3 id="「2-创建数组」"><a href="#「2-创建数组」" class="headerlink" title="「2. 创建数组」"></a><strong>「2. 创建数组」</strong></h3><ul><li>利用new关键字创建数组</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 数组名 = <span class="keyword">new</span> <span class="built_in">Array</span>([n]);<span class="comment">//[]代表可选 若写n，则代表数组的长度</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();<span class="comment">//创建了一个名为 arr 的空数组</span></span><br></pre></td></tr></table></figure><ul><li>利用数组字面量创建数组</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 使用数组字面量方式创建空的数组</span></span><br><span class="line"><span class="keyword">var</span> 数组名 = [];<span class="comment">//若写n，则代表数组的长度</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//2. 使用数组字面量方式创建带初始值的数组</span></span><br><span class="line"><span class="comment">//3. 声明数组并赋值称为数组的初始化</span></span><br><span class="line"><span class="keyword">var</span> arr =[<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="string">&#x27;fan&#x27;</span>,<span class="literal">true</span>,<span class="number">17.5</span>];<span class="comment">//数组中可以存放任意类型的数据</span></span><br></pre></td></tr></table></figure><h3 id="「3-访问数组元素」"><a href="#「3-访问数组元素」" class="headerlink" title="「3. 访问数组元素」"></a><strong>「3. 访问数组元素」</strong></h3><p>索引(下标):用来访问数组元素的序号。索引从 <code>0</code> 开始</p><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206070836311.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义数组</span></span><br><span class="line"><span class="keyword">var</span> arrStus = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="comment">// 获取数组中的第2个元素 </span></span><br><span class="line">alert(arrStus[<span class="number">1</span>]); </span><br><span class="line"><span class="comment">// 如果访问数组时没有和索引值对应的元素(数组越界)，</span></span><br><span class="line"><span class="comment">// 返回值为undefined</span></span><br></pre></td></tr></table></figure><h3 id="「4-遍历数组」"><a href="#「4-遍历数组」" class="headerlink" title="「4. 遍历数组」"></a><strong>「4. 遍历数组」</strong></h3><p>把数组中的元素从头到尾都访问一次。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1.数组索引号从零开始，所以i必须从零开始</span></span><br><span class="line"><span class="comment">//2.输出结果的时候 arr[i]， i 计数器当索引号使用</span></span><br></pre></td></tr></table></figure><h3 id="「5-数组长度」"><a href="#「5-数组长度」" class="headerlink" title="「5.数组长度」"></a><strong>「5.数组长度」</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组名.length</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;甲&#x27;</span>,<span class="string">&#x27;乙&#x27;</span>,<span class="string">&#x27;丙&#x27;</span>,<span class="string">&#x27;戍&#x27;</span>,<span class="string">&#x27;己&#x27;</span>,<span class="string">&#x27;庚&#x27;</span>,<span class="string">&#x27;辛&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr.length);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1. 数组的长度是元素个数，不要跟索引号混淆</span></span><br><span class="line"><span class="comment">//2. arr.length 动态监测数组元素个数</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>案例：求数组中最大值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求数组中最大值</span></span><br><span class="line"><span class="comment">//声明一个保存最大元素的变量max</span></span><br><span class="line"><span class="comment">//默认最大值可取数组中第一个元素</span></span><br><span class="line"><span class="comment">//遍历这个数组，把里面的每个元素与max比较</span></span><br><span class="line"><span class="comment">//如果该数组元素大于max，把这个元素保存到max里面</span></span><br><span class="line"><span class="comment">//最后输出max</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;77&#x27;</span>,<span class="string">&#x27;52&#x27;</span>,<span class="string">&#x27;25&#x27;</span>,<span class="string">&#x27;7&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> max = arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &gt; arr[<span class="number">0</span>]) &#123;</span><br><span class="line">        max = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;该数组中最大的是&#x27;</span> + max);</span><br></pre></td></tr></table></figure><p>案例：数组转换为字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将数组转换为字符串，并用*分割</span></span><br><span class="line"><span class="comment">//1.需要一个新变量存放转换完成的字符串</span></span><br><span class="line"><span class="comment">//2.遍历原来的数组，分别把里面的数组元素取出来，加到字符串里面</span></span><br><span class="line"><span class="comment">//3.同时在后面多加一个*</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>,<span class="string">&#x27;pink&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> sep = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    str += arr[i] + sep;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure><h3 id="「6-数组新增元素」"><a href="#「6-数组新增元素」" class="headerlink" title="「6.数组新增元素」"></a><strong>「6.数组新增元素」</strong></h3><p>可以通过修改length长度以及索引号增加数组元素</p><ul><li><strong>「修改length属性」</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.新增数组元素，修改length长度</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.length);</span><br><span class="line">arr.length = <span class="number">5</span>; <span class="comment">// 把数组元素长度修改为5，里面应该有5个元素</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">3</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">3</span>]); <span class="comment">// 新增空间没有给值，所以是undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">4</span>]); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><ul><li></li><li><p><strong>「修改数组索引」</strong></p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2.新增数组元素，修改索引号，追加数组元素</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>];</span><br><span class="line">arr1[<span class="number">3</span>] = <span class="string">&#x27;pink&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr1);</span><br><span class="line">arr1[<span class="number">4</span>] = <span class="string">&#x27;hotpink&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr1);</span><br><span class="line">arr1[<span class="number">0</span>] = <span class="string">&#x27;yellow&#x27;</span>; <span class="comment">// 这里是替换原来的数组元素</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1);</span><br><span class="line">arr1 = <span class="string">&#x27;有点意思&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// 不要直接给数组名赋值，会覆盖掉以前的数据，数组里面的数组元素都没有了</span></span><br></pre></td></tr></table></figure><p>案例：数组中存放1-100个值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//新建一数组，存放1-100个值</span></span><br><span class="line"><span class="comment">//核心原理：使用循环追加数组</span></span><br><span class="line"><span class="comment">//1.声明一个空数组 arr</span></span><br><span class="line"><span class="comment">//2.循环中计数器 i 可作为数组元素存入</span></span><br><span class="line"><span class="comment">//3.由于数组索引号是从0开始，因此计数器从0开始合适，存入的数组元素需要 + 1</span></span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    arr[i] = i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure><p>案例：筛选数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将数组[&#x27;2&#x27;,&#x27;0&#x27;,&#x27;6&#x27;,&#x27;1&#x27;,&#x27;77&#x27;,&#x27;0&#x27;,&#x27;52&#x27;,&#x27;0&#x27;,&#x27;25&#x27;,&#x27;7&#x27;,&#x27;6&#x27;]中大于等于10 的元素选出来放入新数组</span></span><br><span class="line"><span class="comment">// 1.声明一个新的数组用于存放新数据 newArr</span></span><br><span class="line"><span class="comment">// 2.遍历原来旧的数组，找出大于等于 10 的元素</span></span><br><span class="line"><span class="comment">// 3.依次追加给新数组 newArr</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;77&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;52&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;25&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;6&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = [];</span><br><span class="line"><span class="keyword">var</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="comment">// 新数组索引号从0开始，依次递增</span></span><br><span class="line">        newArr[j] = arr[i];</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(newArr);</span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;77&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;52&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;25&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;6&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = [];</span><br><span class="line"><span class="comment">// 刚开始 newArr.length 就是0</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="comment">// 新数组索引号应该从0开始，依次递增</span></span><br><span class="line">        newArr[newArr.length] = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(newArr);</span><br></pre></td></tr></table></figure><p>案例：翻转数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将数组</span></span><br><span class="line"><span class="comment">// 1.声明一个新数组 newArr</span></span><br><span class="line"><span class="comment">// 2.把旧数组索引号4个取过来（arr.length - 1），给新数组索引号第0个元素（newArr.length）</span></span><br><span class="line"><span class="comment">// 3.采用递减的方式 i++</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>,<span class="string">&#x27;pink&#x27;</span>,<span class="string">&#x27;purple&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> newArr[];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = arr.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    newArr[newArr.length] = arr[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(newArr);</span><br></pre></td></tr></table></figure><p>案例：冒泡排序 把数组从大到小或从小到大重新排序 </p><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202206070959111.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 冒泡排序 从小到大排序</span></span><br><span class="line"><span class="comment">// var arr = [5, 4, 3, 2, 1];</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>,];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= arr.length - <span class="number">1</span>; i++) &#123; <span class="comment">// 外层循环负责趟数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt;= arr.length - i - <span class="number">1</span>; j++) &#123; <span class="comment">// 内层循环负责每一趟的交换次数</span></span><br><span class="line">        <span class="comment">// 内部交换两个变量的值，第一个和后面一个数组元素相比较</span></span><br><span class="line">        <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">var</span> temp = arr[j];</span><br><span class="line">            arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">            arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小白的前端之路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>H5C3新增属性</title>
      <link href="/%E5%89%8D%E7%AB%AF/H5C3%E6%96%B0%E5%A2%9E%E5%B1%9E%E6%80%A7/"/>
      <url>/%E5%89%8D%E7%AB%AF/H5C3%E6%96%B0%E5%A2%9E%E5%B1%9E%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="H5C3新增"><a href="#H5C3新增" class="headerlink" title="H5C3新增"></a>H5C3新增</h1><p>本文主要介绍H5新增内容以及CSS3中的新特性</p><h2 id="H5简介"><a href="#H5简介" class="headerlink" title="H5简介"></a>H5简介</h2><p><strong>「1. 什么是HTML5」</strong></p><ul><li><p>定义：<strong>HTML5</strong>定义了<strong>HTML</strong>标准的最新版本，是对<strong>HTML</strong>的第五次重大修改，号称下一代的HTML。</p></li><li><p>两个概念：</p></li><li><ul><li>是一个新版本的<strong>HTML</strong>语言，定义了新的标签、特性和属性</li><li>拥有一个强大的技术集，这些技术集是指：<strong>HTML5、CSS3、JavaScript</strong>,这也是广义上的HTML5。</li></ul></li></ul><p><strong>「2. HTML5拓展了哪些内容」</strong></p><ul><li>语义化标签</li><li>本地存储</li><li>兼容特性</li><li>2D、3D</li><li>动画、过渡</li><li>CSS3特性</li><li>性能与集成</li></ul><h2 id="HTML5新增"><a href="#HTML5新增" class="headerlink" title="HTML5新增"></a>HTML5新增</h2><p><strong>「1. 什么是语义化」</strong></p><p>语义化是指用HTML写出符合<strong>内容的结构化</strong>（内容语义化），选择<strong>合适的标签</strong>（代码语义化），能够便于开发者阅读和写出更优雅的代码的同时让浏览器的爬虫和机器很好地解析。</p><p><strong>「2. 新增了哪些语义化标签」</strong></p><ul><li><code>header</code>  —  头部标签</li><li><code>nav</code>     —  导航标签</li><li><code>article</code> —  内容标签</li><li><code>section</code> —  块级标签</li><li><code>aside</code>   —  侧边栏标签</li><li><code>footer</code>  —  尾部标签</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202205291552900.png"></p><p><strong>「3. 新增多媒体音频标签」</strong></p><ul><li><p>多媒体标签有两个，分别是音频 <strong>audio</strong>和视频<strong>video</strong>。</p></li><li><p><code>audio 标签说明</code></p></li><li><ul><li>可以在不使用标签的情况下，也能够原生的支持音频格式文件的播放，</li><li>但是：播放的格式是<strong>有限</strong>的。</li></ul></li><li><p><code>audio 参数</code></p></li></ul><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>autoplay</td><td>autoplay</td><td>音频就绪后立刻播放</td></tr><tr><td>controls</td><td>controls</td><td>向用户展示音频控件</td></tr><tr><td>loop</td><td>loop</td><td>音频结束后重新循环播放</td></tr><tr><td>src</td><td>src</td><td>播放音频的url地址</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注意：在 chrome 浏览器中已经禁用了 autoplay 属性 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;audio src=&quot;./media/snow.mp3&quot; controls autoplay&gt;&lt;/audio&gt; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    因为不同浏览器支持不同的格式，所以我们采取的方案是这个音频准备多个文件 --&gt;</span>                             </span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;myAudio.mp3&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/mpeg&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;myAudio.ogg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/ogg&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Your browser doesn&#x27;t support HTML5 audio. Here is</span><br><span class="line">     a <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;myAudio.mp4&quot;</span>&gt;</span>link to the audio<span class="tag">&lt;/<span class="name">a</span>&gt;</span> instead.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>video 参数</code></li></ul><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>autoplay</td><td>autoplay</td><td>自动播放</td></tr><tr><td>aontrols</td><td>controls</td><td>播放控件</td></tr><tr><td>width</td><td>px像素</td><td>宽度</td></tr><tr><td>height</td><td>px像素</td><td>高度</td></tr><tr><td>loop</td><td>loop</td><td>循环播放</td></tr><tr><td>preload</td><td>auto || none</td><td>是否预加载视频（如又autoplay忽略该属性）</td></tr><tr><td>src</td><td>url</td><td>视频url地址</td></tr><tr><td>poster</td><td>imgurl</td><td>加载等待图片地址</td></tr><tr><td>muted</td><td>muted</td><td>静音播放</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;video src=&quot;./media/video.mp4&quot; controls=&quot;controls&quot;&gt;&lt;/video&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 谷歌浏览器禁用了自动播放功能，如果想自动播放，需要添加 muted 属性 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span>=<span class="string">&quot;controls&quot;</span> <span class="attr">autoplay</span> <span class="attr">muted</span> <span class="attr">loop</span> <span class="attr">poster</span>=<span class="string">&quot;./media/pig.jpg&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;./media/video.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;./media/video.ogg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/ogg&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>多媒体标签总结</p></li><li><ul><li>音频标签和视频标签使用基本一致</li><li>多媒体标签在不同浏览器下情况不同，存在兼容性问题</li><li>谷歌浏览器把音频和视频标签的自动播放都<strong>禁止</strong>了</li><li>谷歌浏览器中视频添加<strong>muted</strong>属性就可以自己播放了</li><li>注意：重点记住使用方法及自动播放即可，其他属性在使用时查找对应的手册</li></ul></li></ul><p><strong>「4. 新增input标签」</strong></p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>type=“email”</td><td>限制用户输入必须为Email类型</td></tr><tr><td>type=“url”</td><td>限制用户输入必须为url类型</td></tr><tr><td>type=“date”</td><td>限制用户输入必须为日期类型</td></tr><tr><td>type=“time”</td><td>限制用户输入必须为时间类型</td></tr><tr><td>type=“month”</td><td>限制用户输入必须为月类型</td></tr><tr><td>type=“week”</td><td>限制用户输入必须为周类型</td></tr><tr><td>type=“number”</td><td>限制用户输入必须为数字类型</td></tr><tr><td>type=“tel”</td><td>手机号码</td></tr><tr><td>type=“search”</td><td>搜索框</td></tr><tr><td>type=“color”</td><td>生成一个颜色选择表单</td></tr></tbody></table><p><strong>「5. 新增表单属性」</strong></p><table><thead><tr><th>属性</th><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>required</td><td>required</td><td>表单为必填项</td></tr><tr><td>placeholder</td><td>提示文本</td><td>表单的提示信息</td></tr><tr><td>autofoucs</td><td>autofoucs</td><td>自动聚焦属性，页面加载完成时自动聚焦表单</td></tr><tr><td>autocomplete</td><td>off / on</td><td>显示之前提交过的值，须name属性和成功提交同时满足</td></tr><tr><td>multiple</td><td>multiple</td><td>可以多选文件提交</td></tr></tbody></table><h2 id="CSS3新增"><a href="#CSS3新增" class="headerlink" title="CSS3新增"></a>CSS3新增</h2><h3 id="「1-CSS3属性选择器」"><a href="#「1-CSS3属性选择器」" class="headerlink" title="「1. CSS3属性选择器」"></a><strong>「1. CSS3属性选择器」</strong></h3><table><thead><tr><th>选择符</th><th>简介</th></tr></thead><tbody><tr><td>E {att}</td><td>选择具有att属性的E元素</td></tr><tr><td>E {att=“val”}</td><td>选择具有att属性且属性值等于val的E元素</td></tr><tr><td>E {att^=“val”}</td><td>匹配具有att属性，且值以val开头的E元素</td></tr><tr><td>E {att$=“val”}</td><td>匹配具有att属性，且值以val结尾的E元素</td></tr><tr><td>E {att*=“val”}</td><td>匹配具有att属性，且值中含有val的E元素</td></tr></tbody></table><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">   <span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">button</span><span class="selector-attr">[disabled]</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: default;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=search]</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: skyblue;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">span</span><span class="selector-attr">[class^=black]</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: lightgreen;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">span</span><span class="selector-attr">[class$=black]</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: lightsalmon;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">span</span><span class="selector-attr">[class*=black]</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: lightseagreen;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="「2-结构伪类选择器」"><a href="#「2-结构伪类选择器」" class="headerlink" title="「2. 结构伪类选择器」"></a><strong>「2. 结构伪类选择器」</strong></h3><table><thead><tr><th>选择符</th><th>简介</th></tr></thead><tbody><tr><td>E:first-child</td><td>匹配父元素中第一个子元素E</td></tr><tr><td>E:last-child</td><td>匹配父元素中最后一个子元素E</td></tr><tr><td>E:nth-child(n)</td><td>匹配父元素中第n个子元素E</td></tr><tr><td>E:first-of-type</td><td>指定类型E的第一个</td></tr><tr><td>E:last-of-type</td><td>指定类型E的最后一个</td></tr><tr><td>E:nth-of-type(n)</td><td>指定类型E的第n个</td></tr></tbody></table><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:first</span>-child &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: lightseagreen;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: lightcoral;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: aqua;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>**nth-child(n)**参数n详解</p></li><li><ul><li>注意：本质上就是选中第几个子元素</li><li>n 可以是数字、关键字、公式</li><li>n 如果是数字，就是选中第几个</li><li>常见的关键字有 <code>even</code> 偶数、<code>odd</code> 奇数</li><li>常见的公式如下(如果 n 是公式，则从 0 开始计算)</li><li>但是第 0 个元素或者超出了元素的个数会被忽略</li></ul></li></ul><table><thead><tr><th>公式</th><th>取值</th></tr></thead><tbody><tr><td>2n</td><td>偶数</td></tr><tr><td>2n+1</td><td>奇数</td></tr><tr><td>5n</td><td>5 10 15…</td></tr><tr><td>n+5</td><td>从第五个开始到最后（包含第五个）</td></tr><tr><td>-n+5</td><td>前五个（包含第五）</td></tr></tbody></table><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  <span class="comment">/* 偶数 */</span></span><br><span class="line">  <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(even) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: aquamarine;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 奇数 */</span></span><br><span class="line">  <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(odd) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: blueviolet;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*n 是公式，从 0 开始计算 */</span></span><br><span class="line">  <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(n) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: lightcoral;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 偶数 */</span></span><br><span class="line">  <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>n) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: lightskyblue;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 奇数 */</span></span><br><span class="line">  <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>n + <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: lightsalmon;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 选择第 0 5 10 15, 应该怎么选 */</span></span><br><span class="line">  <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">5</span>n) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: orangered;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* n + 5 就是从第5个开始往后选择 */</span></span><br><span class="line">  <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(n + <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: peru;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* -n + 5 前五个 */</span></span><br><span class="line">  <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(-n + <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: tan;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li><p><code>类选择器，属性选择器，伪类选择器，权重为10</code></p></li><li><p><code>nth-child与nth-of-type区别</code></p></li><li><ul><li><p><code>nth-child</code> 对父元素里面的所有孩子排列选择（序号是固定的）先找到第n个孩子，然后看看是否和E匹配</p></li><li><p><code>nth-of-type</code> 对父元素里面指定的子元素进行排列选择。先匹配E，然后在根据E找第n个孩子</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  <span class="selector-tag">div</span> <span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: lightblue;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">div</span> <span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: lightpink;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">div</span> <span class="selector-tag">span</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">2</span>) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: lightseagreen;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">div</span> <span class="selector-tag">span</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">3</span>) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="「3-伪元素选择器」"><a href="#「3-伪元素选择器」" class="headerlink" title="「3. 伪元素选择器」"></a><strong>「3. 伪元素选择器」</strong></h3><ul><li><table><thead><tr><th>选择符</th><th>简介</th></tr></thead><tbody><tr><td>::before</td><td>在元素内部的前面插入内容</td></tr><tr><td>::after</td><td>在元素内部的后面插入内容</td></tr></tbody></table></li><li><ul><li><p>伪元素选择器注意事项</p></li><li><ul><li><code>before</code> 和 <code>after</code> 必须有 <code>content</code> 属性</li><li><code>before</code> 在内容前面，after 在内容后面</li><li><code>before</code> 和 <code>after</code> 创建的是一个元素，但是属于行内元素</li><li>创建出来的元素在 <code>Dom</code> 中查找不到，所以称为伪元素</li><li>伪元素和标签选择器一样，权重为 1</li></ul></li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="selector-tag">div</span> &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">      <span class="attribute">border</span>: <span class="number">1px</span> solid lightcoral;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-pseudo">::after</span>,</span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">      <span class="attribute">text-align</span>: center;</span><br><span class="line">      <span class="attribute">display</span>: inline-block;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">&#x27;德&#x27;</span>;</span><br><span class="line">      <span class="attribute">background-color</span>: lightskyblue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">&#x27;道&#x27;</span>;</span><br><span class="line">      <span class="attribute">background-color</span>: mediumaquamarine;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="伪元素字体图标"><a href="#伪元素字体图标" class="headerlink" title="伪元素字体图标"></a>伪元素字体图标</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line"><span class="attribute">font-family</span>: ‘icomoon’;</span><br><span class="line"><span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">‘fonts/icomoon.eot?7kkyc2’</span>);</span><br><span class="line"><span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">‘fonts/icomoon.eot?7kkyc2#iefix’</span>) <span class="built_in">format</span>(‘embedded-opentype’),</span><br><span class="line"><span class="built_in">url</span>(<span class="string">‘fonts/icomoon.ttf?7kkyc2’</span>) <span class="built_in">format</span>(‘truetype’),</span><br><span class="line"><span class="built_in">url</span>(<span class="string">‘fonts/icomoon.woff?7kkyc2’</span>) <span class="built_in">format</span>(‘woff’),</span><br><span class="line"><span class="built_in">url</span>(<span class="string">‘fonts/icomoon.svg?7kkyc2#icomoon’</span>) <span class="built_in">format</span>(‘svg’);</span><br><span class="line"><span class="attribute">font-weight</span>: normal;</span><br><span class="line"><span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">   <span class="attribute">position</span>: relative;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">220px</span>;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">22px</span>;</span><br><span class="line">   <span class="attribute">border</span>: <span class="number">1px</span> solid lightseagreen;</span><br><span class="line">   <span class="attribute">margin</span>: <span class="number">60px</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;\ea50&#x27;</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;icomoon&#x27;</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="伪元素清除浮动"><a href="#伪元素清除浮动" class="headerlink" title="伪元素清除浮动"></a>伪元素清除浮动</h4><ol><li>额外标签法也称隔墙法，是W3C推荐的做法</li><li>父元素添加overflow属性</li><li>父元素添加afte伪元素</li><li>父元素添加双伪元素</li></ol><p>额外标签法是基本做法，在浮动元素后面新增一个空标签，必须为块级盒子，属性为clear:both。</p><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202205301012442.png"></p><p>后面两种伪元素清除浮动的方法是第一种额外标签法的升级和优化</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line"><span class="attribute">content</span>:<span class="string">&quot;&quot;</span>;伪元素必填属性</span><br><span class="line">    <span class="attribute">display</span>: block;插入元素必须是块级</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;不要看见这个元素</span><br><span class="line">    <span class="attribute">clear</span>: both;核心代码清除浮动</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;不要看见这个元素</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::before</span> <span class="selector-class">.clear</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>:table;    转换为块级元素并且一行显示</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="「4-CSS3盒子模型」"><a href="#「4-CSS3盒子模型」" class="headerlink" title="「4. CSS3盒子模型」"></a><strong>「4. CSS3盒子模型」</strong></h3><p>box-sizing属性可用来指定盒子模型，有两个属性值值，可指定为content-box，border-box。</p><p>区别：</p><ol><li>box-sizing: content-box;盒子大小为width+padding+border（以前默认的）</li><li>box-sizing: border-box; 盒子大小为width</li></ol><p>如果盒子模型改为第二种，则padding和border就不会撑大盒子（前提是padding和border不会超过width宽度）</p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小白的前端之路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS高级技巧</title>
      <link href="/%E5%89%8D%E7%AB%AF/CSS%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7/"/>
      <url>/%E5%89%8D%E7%AB%AF/CSS%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS高级技巧"><a href="#CSS高级技巧" class="headerlink" title="CSS高级技巧"></a>CSS高级技巧</h1><h2 id="元素的显示与隐藏"><a href="#元素的显示与隐藏" class="headerlink" title="元素的显示与隐藏"></a>元素的显示与隐藏</h2><p>让一个元素在页面中隐藏或显示出来</p><p>一共有三个属性</p><table><thead><tr><th>属性</th><th>属性值</th></tr></thead><tbody><tr><td>display</td><td>none | display</td></tr><tr><td>visibility</td><td>hidden | visible</td></tr><tr><td>overflow</td><td>visible | hidden | scroll | auto</td></tr></tbody></table><p>display属性隐藏后会脱标，不占有原来位置</p><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202205282000945.png"></p><p>visibility属性隐藏后不会脱标，继续占有原来位置</p><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202205282001733.png"></p><p>overflow属性针对溢出，visible | hidden | scroll | auto</p><table><thead><tr><th>overflow属性值</th><th>描述</th></tr></thead><tbody><tr><td>visible</td><td>不剪切内容不添加滚动条</td></tr><tr><td>hidden</td><td>隐藏超出对象尺寸的内容</td></tr><tr><td>scroll</td><td>总分是显示滚动条</td></tr><tr><td>auto</td><td>超出内容自动显示滚动条，不超出不显示</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202205282002302.png"></p><h2 id="精灵图技术"><a href="#精灵图技术" class="headerlink" title="精灵图技术"></a>精灵图技术</h2><ul><li>图所示为网页的请求原理图，当用户访问一个网站时，需要向服务器发送请求，网页上的每张图像都要经过一次请求才能展现给用户。</li><li>然而，一个网页中往往会应用很多小的背景图像作为修饰，当网页中的图像过多时，服务器就会频繁地接受和发送请求，这将大大降低页面的加载速度。</li></ul><p>为了有效地减少服务器接受和发送请求的次数，提高页面的加载速度。CSS 精灵其实是将网页中的一些背景图像整合到一张大图中（精灵图），然而，各个网页元素通常只需要精灵图中不同位置的某个小图，要想精确定位到精灵图中的某个小图。这样，当用户访问该页面时，只需向服务发送一次请求，网页中的背景图像即可全部展示出来。</p><p>需要使用CSS的:</p><ul><li>background-image、</li><li>background-repeat</li><li>background-position属性进行背景定位，</li><li>其中最关键的是使用<code>background-position</code> 属性精确地定位。</li></ul><h4 id="精灵技术使用的核心总结"><a href="#精灵技术使用的核心总结" class="headerlink" title="精灵技术使用的核心总结"></a>精灵技术使用的核心总结</h4><p>首先我们知道，css精灵技术主要针对于背景图片，插入的图片img 是不需要这个技术的。</p><ol><li>精确测量，每个小背景图片的大小和 位置。</li><li>给盒子指定小背景图片时， 背景定位基本都是 负值。</li></ol><h2 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h2><p>网页中的一些小图标通常用字体图标iconfont来显示，字体图标本质上是字体，现实的是图标。</p><p>字体图标下载网站</p><ul><li>icomoon字库 <a href="https://icomoon.io/">https://icomoon.io</a> </li><li>阿里iconfont字库 <a href="https://www.iconfont.cn/">https://www.iconfont.cn</a></li></ul><ol><li>在字体图标网站选中图标下载后，需要将其引入到，将下载包里的fonts文件夹放入页面根目录下</li><li>在CSS样式中全局声明字体，把这些字体文件通过CSS引入到我们页面中，一定要注意字体文件路径问题</li></ol><p>声明代码如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line"><span class="attribute">font-family</span>: ‘icomoon’;</span><br><span class="line"><span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">‘fonts/icomoon.eot?7kkyc2’</span>);</span><br><span class="line"><span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">‘fonts/icomoon.eot?7kkyc2#iefix’</span>) <span class="built_in">format</span>(‘embedded-opentype’),</span><br><span class="line"><span class="built_in">url</span>(<span class="string">‘fonts/icomoon.ttf?7kkyc2’</span>) <span class="built_in">format</span>(‘truetype’),</span><br><span class="line"><span class="built_in">url</span>(<span class="string">‘fonts/icomoon.woff?7kkyc2’</span>) <span class="built_in">format</span>(‘woff’),</span><br><span class="line"><span class="built_in">url</span>(<span class="string">‘fonts/icomoon.svg?7kkyc2#icomoon’</span>) <span class="built_in">format</span>(‘svg’);</span><br><span class="line"><span class="attribute">font-weight</span>: normal;</span><br><span class="line"><span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;icomoon&#x27;</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">spam</span>&gt;</span> <span class="tag">&lt;/<span class="name">spam</span>&gt;</span>  /复制图标网站上的源码</span><br></pre></td></tr></table></figure><p>字体图标的追加：把压缩包中slection.json重新上传，然后选中自己想要更新的图标，重新下载压缩包，并途欢原来的文件即可。</p><h2 id="CSS三角"><a href="#CSS三角" class="headerlink" title="CSS三角"></a>CSS三角</h2><ol><li>我们用css 边框可以模拟三角效果</li><li>宽度高度为0</li><li>我们4个边框都要写， 只保留需要的边框颜色，其余的不能省略，都改为 transparent 透明就好了</li><li>为了照顾兼容性 低版本的浏览器，加上 font-size: 0;  line-height: 0;</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">line-height</span>:<span class="number">0</span>；</span><br><span class="line">    font-size: <span class="number">0</span>;</span><br><span class="line">   <span class="attribute">border-top</span>: <span class="number">10px</span> solid red;</span><br><span class="line"></span><br><span class="line">   <span class="attribute">border-right</span>: <span class="number">10px</span> solid green;</span><br><span class="line"></span><br><span class="line">   <span class="attribute">border-bottom</span>: <span class="number">10px</span> solid blue;</span><br><span class="line"></span><br><span class="line">   <span class="attribute">border-left</span>: <span class="number">10px</span> solid <span class="number">#000</span>; </span><br><span class="line"></span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202205281959548.png"></p><h2 id="CSS用户页面样式"><a href="#CSS用户页面样式" class="headerlink" title="CSS用户页面样式"></a>CSS用户页面样式</h2><h3 id="鼠标样式cursor"><a href="#鼠标样式cursor" class="headerlink" title="鼠标样式cursor"></a>鼠标样式cursor</h3><p>设置或检索在对象上移动的鼠标指针采用何种系统预定义的光标形状。</p><table><thead><tr><th>属性</th><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>curous</td><td>default</td><td>小白(默认)</td></tr><tr><td></td><td>pointer</td><td>小手</td></tr><tr><td></td><td>move</td><td>移动</td></tr><tr><td></td><td>text</td><td>文本</td></tr><tr><td></td><td>not-allowed</td><td>禁止</td></tr></tbody></table><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">ul</span>&gt;</span><br><span class="line">  &lt;<span class="selector-tag">li</span> style=&quot;<span class="attribute">cursor</span><span class="selector-pseudo">:default</span>&quot;&gt;我是小白&lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">  &lt;<span class="selector-tag">li</span> style=&quot;<span class="attribute">cursor</span>:pointer<span class="string">&quot;&gt;我是小手&lt;/li&gt;</span></span><br><span class="line"><span class="string">  &lt;li style=&quot;</span>cursor:move<span class="string">&quot;&gt;我是移动&lt;/li&gt;</span></span><br><span class="line"><span class="string">  &lt;li style=&quot;</span>cursor:text<span class="string">&quot;&gt;我是文本&lt;/li&gt;</span></span><br><span class="line"><span class="string">  &lt;li style=&quot;</span>cursor:not-allowed<span class="string">&quot;&gt;我是文本&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;</span></span><br></pre></td></tr></table></figure><h3 id="轮廓线outline"><a href="#轮廓线outline" class="headerlink" title="轮廓线outline"></a>轮廓线outline</h3><p>是绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">outline</span> : outline-color || outline-style || outline-width </span><br></pre></td></tr></table></figure><p>但是我们都不关心可以设置多少，我们平时都是去掉的。<br>最直接的写法是 ： outline: 0;  或者  outline: none;</p><h3 id="防拖拽文本域resize"><a href="#防拖拽文本域resize" class="headerlink" title="防拖拽文本域resize"></a>防拖拽文本域resize</h3><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202205282012600.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/*css行内式写法*/</span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">style</span>=<span class="string">&quot;resize: none;&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="vertical-align属性应用"><a href="#vertical-align属性应用" class="headerlink" title="vertical-align属性应用"></a>vertical-align属性应用</h3><p>vertical-align 垂直对齐，它只针对于<strong>「行内元素」</strong>或者<strong>「行内块元素」</strong></p><p>可以用来设置<strong>图片表单文字对齐</strong>和<strong>去除图片底侧空白空袭</strong></p><h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202205282016270.jpg"></h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">设置或检索对象内容的垂直对其方式。</span><br><span class="line"><span class="attribute">vertical-align</span> : baseline |top |middle |bottom </span><br></pre></td></tr></table></figure><p>注意：</p><p>vertical-align 不影响块级元素中的内容对齐，它只针对于<strong>「行内元素」</strong>或者<strong>「行内块元素」</strong>，</p><p>特别是行内块元素， 通常用来控制图片/表单与文字的对齐。</p><ul><li>有宽度的块级元素居中对齐，是margin: 0 auto;</li><li>让文字居中对齐，是 text-align: center;</li></ul><h3 id="溢出文字省略号显示"><a href="#溢出文字省略号显示" class="headerlink" title="溢出文字省略号显示"></a>溢出文字省略号显示</h3><p>三个步骤,</p><ol><li>先强制一行内显示文本</li><li>超出的部分隐藏</li><li>文字用省略号替代超出的部分</li></ol><p>white-space属性设置或检索对象内文本显示方式。通常我们使用于强制一行显示内容</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">white-space</span>:normal ；默认处理方式</span><br><span class="line"></span><br><span class="line">white-space:nowrap ； 强制在同一行内显示所有文本，直到文本结束或者遭遇br标签对象才换行。</span><br></pre></td></tr></table></figure><p>text-overflow属性设置或检索是否使用一个省略标记（…）标示对象内文本的溢出</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">text-overflow</span> : clip ；不显示省略标记（...），而是简单的裁切 </span><br><span class="line"></span><br><span class="line">text-overflow：ellipsis ； 当对象内文本溢出时显示省略标记（...）</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*1. 先强制一行内显示文本*/</span></span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line"><span class="comment">/*2. 超出的部分隐藏*/</span></span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="comment">/*3. 文字用省略号替代超出的部分*/</span></span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br></pre></td></tr></table></figure><h2 id="常见布局技巧"><a href="#常见布局技巧" class="headerlink" title="常见布局技巧"></a>常见布局技巧</h2><ol><li>margin负值的运用</li><li>文字环绕浮动元素</li><li>行内块元素巧妙运用</li><li>CSS三角强化</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小白的前端之路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript流程控制</title>
      <link href="/%E5%89%8D%E7%AB%AF/Javascript%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
      <url>/%E5%89%8D%E7%AB%AF/Javascript%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="javascript流程控制"><a href="#javascript流程控制" class="headerlink" title="javascript流程控制"></a>javascript流程控制</h1><p><strong>「流程控制」</strong>在一个程序执行的过程中，各条代码的执行顺序对程序的结果是有直接影响的。很多时候我们要通过控制代码的执行顺序来实现我们要完成的功能。流程控制主要有三种结构，分别是<strong>顺序结构</strong>、<strong>分支结构</strong>和<strong>循环结构</strong>，代表三种代码执行的顺序。</p><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202205311435023.png"></p><h2 id="「1，分支结构」"><a href="#「1，分支结构」" class="headerlink" title="「1，分支结构」"></a><strong>「1，分支结构」</strong></h2><p>js语言提供了两种分支结构语句</p><ul><li>if语句</li><li>switch语句</li></ul><h3 id="1，if-语句"><a href="#1，if-语句" class="headerlink" title="1，if 语句"></a>1，if 语句</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//条件成立执行代码，否则什么也不做</span></span><br><span class="line"><span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">    <span class="comment">//条件成立执行代码语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>语句可以理解为一个行为，循环语句和分支语句就是典型的语句。一个程序由多个语句组成，一般情况下，会被分割成一个一个的语句。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//执行思路，如果if里面的条件表达式结果为真，true，则执行大括号里面的执行语句</span></span><br><span class="line"><span class="comment">//如果if条件表达式结果为假，则不执行大括号里的语句，执行if语句后面的代码</span></span><br><span class="line"><span class="comment">//演示</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">3</span>&gt;<span class="number">2</span>)&#123;</span><br><span class="line">    alert(<span class="string">&#x27;前端路漫漫&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2，if-else语句（双分支语句）"><a href="#2，if-else语句（双分支语句）" class="headerlink" title="2，if else语句（双分支语句）"></a>2，if else语句（双分支语句）</h3><p>语法结构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//条件成立，执行if里代码，否则执行else里代码</span></span><br><span class="line"><span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">    <span class="comment">//if条件成立时执行的代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//else执行的代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//if里面的语句1和else里面的语句2，最终只能有一个语句被执行 2选1</span></span><br><span class="line"><span class="comment">//else后面直接跟大括号</span></span><br></pre></td></tr></table></figure><p>案例：进入网吧</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//弹出prompt警示框，用户输入年龄，存入变量age</span></span><br><span class="line"><span class="comment">//使用if语句判断年龄，如年龄大于等于18，执行括号里内容</span></span><br><span class="line"><span class="keyword">var</span> age = prompt(<span class="string">&#x27;请输入您的年龄&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span>(age &gt;= <span class="number">18</span>)&#123;</span><br><span class="line">    alert(<span class="string">&#x27;我想带你去网吧&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;滚&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>案例：判断闰年</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//算法：能被四整除且不能被100整除的为闰年 或着 能被400整除的是闰年</span></span><br><span class="line"><span class="comment">//弹出prompt输入框，输入年份存入白能量</span></span><br><span class="line"><span class="comment">//使用if语句判断</span></span><br><span class="line"><span class="comment">//注意&amp;&amp; 还有|| ，同时注意判断整除的方法是取余为0</span></span><br><span class="line"><span class="keyword">var</span> year = prompt(<span class="string">&#x27;请输入年份&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span> || year % <span class="number">400</span> == <span class="number">0</span>)&#123;</span><br><span class="line">    alert(<span class="string">&#x27;您输入的年份是闰年&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;您输入的年份是平年&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3，if-else-if-语句（多分支语句）"><a href="#3，if-else-if-语句（多分支语句）" class="headerlink" title="3，if else if 语句（多分支语句）"></a>3，if else if 语句（多分支语句）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.多分支语句，就是利用多个条件来选择不同的语句执行，得到不同的结果，多选一的过程</span></span><br><span class="line"><span class="comment">//2.if else if语句是多分支语句</span></span><br><span class="line"><span class="comment">//3.语法规范</span></span><br><span class="line"><span class="keyword">if</span>(条件表达式<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="comment">//语句1;</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(条件表达式<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="comment">//语句2;</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(条件表达式<span class="number">3</span>)&#123;</span><br><span class="line">    <span class="comment">//语句3;</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//最后的语句;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4.执行思路</span></span><br><span class="line"><span class="comment">/*如果条件表达式1满足就执行语句1，执行完毕后，退出整个if分支语句</span></span><br><span class="line"><span class="comment">如果条件表达式1不满足，则判断条件表达式2，满足的话执行语句2，以此类推</span></span><br><span class="line"><span class="comment">如果上面条件都不满足，则执行else里的语句</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//5.注意点</span></span><br><span class="line"><span class="comment">/* 多分支语句是多选一，最后只能有一个语句被执行</span></span><br><span class="line"><span class="comment">else if 理论上可以是任意多个</span></span><br><span class="line"><span class="comment"></span></span><br></pre></td></tr></table></figure><p>案例：判断成绩</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//(伪代码) 按从大到小的顺序</span></span><br><span class="line"><span class="comment">//弹出prompt输入框，让用户输入分数保存在变量中</span></span><br><span class="line"><span class="comment">//使用if else if多分支判断</span></span><br><span class="line"><span class="keyword">var</span> score = prompt(<span class="string">&#x27;请输入成绩&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(score &gt;= <span class="number">90</span>)&#123;</span><br><span class="line">    alert(<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(score &gt;= <span class="number">80</span>)&#123;</span><br><span class="line">    alert(<span class="string">&#x27;B&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(score &gt;= <span class="number">70</span>)&#123;</span><br><span class="line">    alert(<span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(score &gt;= <span class="number">60</span>)&#123;</span><br><span class="line">    alert(<span class="string">&#x27;D&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;E&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-三元表达式"><a href="#4-三元表达式" class="headerlink" title="4.三元表达式"></a>4.三元表达式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.有三个运算符组成的式子我们成为三元表达式</span></span><br><span class="line"><span class="comment">//2.++num  3+5  ? :</span></span><br><span class="line"><span class="comment">//3.语法结构</span></span><br><span class="line">条件表达式?表达式<span class="number">1</span>:表达式<span class="number">2</span>;</span><br><span class="line"><span class="comment">//4.执行思路</span></span><br><span class="line"><span class="comment">//如果条件表达式结果为真，则返回表达式1的值，如果条件表达式结果为假，则返回表达式2的值</span></span><br><span class="line"><span class="comment">//5.代码体验</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> result = num &gt; <span class="number">5</span> ? <span class="string">&#x27;是的&#x27;</span> : <span class="string">&#x27;不是的&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure><p>案例：数字补0</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用户输入0-59之间的一个数字</span></span><br><span class="line"><span class="comment">//如果数字小于10，则在这个数字面前补0，（加0拼接），否则不做操作</span></span><br><span class="line"><span class="comment">//用一个变量接收这个返回值，输出</span></span><br><span class="line"><span class="keyword">var</span> time = prompt(<span class="string">&#x27;请输入一个数字&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> result = time &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + time : time;<span class="comment">//把返回值赋值给第一个变量</span></span><br><span class="line">alert(result);</span><br></pre></td></tr></table></figure><h3 id="5-switch分支"><a href="#5-switch分支" class="headerlink" title="5.switch分支"></a>5.switch分支</h3><p>switch语句也是多分支语句，它用于基于不同的条件来执行不同的代码，当要针对变量设置一系列的特定值的选项时，就可以使用switch</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.switch也是多分支，可以实现多线一</span></span><br><span class="line"><span class="comment">//2.语法结构  switch 转换，开关  case 小例子或选项的意思</span></span><br><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line">    <span class="keyword">case</span> value1:</span><br><span class="line">        执行语句<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> value2:</span><br><span class="line">        执行语句<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">    执行最后的语句;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3.执行思路，利用表达式的值和case后面的选项值相匹配，如果匹配上，就执行该case里面的语句，如果都没有匹配上，则执行default里面的语句</span></span><br><span class="line"><span class="comment">//4.代码验证</span></span><br><span class="line"><span class="keyword">switch</span>(<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;这是1&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;这是2&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;这是3&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;无匹配结果&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>switch注意事项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">switch</span>(num)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;无匹配&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1.开发里面，表达式经常写成变量</span></span><br><span class="line"><span class="comment">//2.num和case里值相匹配的时候要求全等，必须数值和数据类型一致才可以 num === 1</span></span><br><span class="line"><span class="comment">//3.break 如果当前case没有break，则不会退出switch，而是继续执行下一个case</span></span><br></pre></td></tr></table></figure><p>案例：查询水果案例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//弹出prompt输入框，输入水果名称存入变量</span></span><br><span class="line"><span class="comment">//将这个变量作为switch括号内的表达式</span></span><br><span class="line"><span class="comment">//case后面的值写几个不同水果的名称，注意一定要加引号，因为必须时全等匹配</span></span><br><span class="line"><span class="comment">//弹出不同价格即可，注意每个case后面的break语句</span></span><br><span class="line"><span class="comment">//将default设置成无此水果</span></span><br><span class="line"><span class="keyword">var</span> frult = prompt(<span class="string">&#x27;请输入查询的水果&#x27;</span>);</span><br><span class="line"><span class="keyword">switch</span>(frult)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;苹果&#x27;</span>:</span><br><span class="line">        alert(<span class="string">&#x27;苹果的价格是3.5&#x27;</span>)；</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;榴莲&#x27;</span>:</span><br><span class="line">        alert(<span class="string">&#x27;榴莲的价格是35&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        alert(<span class="string">&#x27;无此水果&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>switch和if..else..if的区别</p><ol><li><p>一般情况下，可以互相替换</p></li><li><p>switch…case通常处理case比较确定的值的情况，而if…else…if更加灵活常用于范围判断</p></li><li><p>switch语句进行条件判断后直接执行条件语句，效率更高，而if else if有多少条件就要判断多少次</p></li><li><p>当分支较少时，if…else执行效率比switch高</p></li><li><p>当分支较多时，switch语句执行效率比较高，且结构清晰</p></li></ol><h2 id="「2，循环结构」"><a href="#「2，循环结构」" class="headerlink" title="「2，循环结构」"></a><strong>「2，循环结构」</strong></h2><p>js中主要由三种类型的循环语句</p><ul><li>for循环</li><li>while循环</li><li>do..while循环</li></ul><h3 id="1，for循环"><a href="#1，for循环" class="headerlink" title="1，for循环"></a>1，for循环</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.for循环重复执行某些代码，通常跟计数有关</span></span><br><span class="line"><span class="comment">//2.for循环语法结构</span></span><br><span class="line"><span class="keyword">for</span>(初始化变量;条件表达式;操作表达式)&#123;</span><br><span class="line">    循环体;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3.初始化变量 就是用var声明的一个普通变量，通常用作计数器使用</span></span><br><span class="line"><span class="comment">//4.条件表达式 就是用来决定每一次循环是否继续执行 ，就是终止的条件</span></span><br><span class="line"><span class="comment">//5.操作表达式 是每次循环最后执行的代码 经常用于我们计数器变量的更新（递增或者递减）</span></span><br><span class="line"><span class="comment">//6.代码体验</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;你好吗&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for循环执行过程</p><ol><li>初始化变量，初始化操作在整个 for 循环只会执行一次。</li><li>执行条件表达式，如果为true，则执行循环体语句，否则退出循环，循环结束。</li><li>执行操作表达式,此时第一轮结束。</li><li>第二轮开始，直接去执行条件表达式（不再初始化变量），如果为 true ，则去执行循环体语句，否则退出循环。</li><li>继续执行操作表达式，第二轮结束。……</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//for循环执行相同代码</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;我错了&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//让用户控制输出次数</span></span><br><span class="line"><span class="keyword">var</span> num = prompt(<span class="string">&#x27;输入循环次数&#x27;</span>);</span><br><span class="line"><span class="function"><span class="title">var</span>(<span class="params"><span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= num; i++</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;我错了&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//for循环可以重复执行不同的代码 因为我们有计数器变量i的存在 i每次循环值都会变化</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;这个人今年1岁了，他出生了&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">100</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;这个人今年100岁了，他死了&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;这个人今年&#x27;</span> + i + <span class="string">&#x27;岁了&#x27;</span>);<span class="comment">//字符串与数字拼接</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>案例：for循环求1-100累加和案例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要循环100次，我们需要一个计数器i</span></span><br><span class="line"><span class="comment">//需要一个储存结果的变量sum，初始值为0</span></span><br><span class="line"><span class="comment">//核心算法：1+2+3+4+...，sum = sum + i</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">    sum = sum + i;</span><br><span class="line">    <span class="comment">//sum += i;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>案例：for循环求1-100平均值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> average = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">    sum += i;</span><br><span class="line">&#125;</span><br><span class="line">average = sum / <span class="number">100</span>;</span><br><span class="line"><span class="built_in">console</span>.log(average);</span><br></pre></td></tr></table></figure><p>案例：求1-100所有奇数和偶数的和</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> even = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> odd = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">2</span> = <span class="number">0</span>) &#123;</span><br><span class="line">        even += i;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        odd += i;</span><br><span class="line">    &#125;     </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;1-100之间所有的偶数的和是&#x27;</span> + even);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;1-100之间所有的奇数的和是&#x27;</span> + odd);</span><br></pre></td></tr></table></figure><p>案例：求1-100所有能被3整除的数字的和</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">3</span> = <span class="number">0</span>) &#123;</span><br><span class="line">        result += i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;1-100之前能够被3整除的数字的和是&#x27;</span> + result);</span><br></pre></td></tr></table></figure><p>案例：求学生成绩案例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//弹出输入框输入总的班级人数（num)</span></span><br><span class="line"><span class="comment">//依次输入学生成绩（保存起来 score），此时用到for循环</span></span><br><span class="line"><span class="comment">//for循环，弹出的次数跟输入的班级总人数有关系，条件表达式 i &lt;= num</span></span><br><span class="line"><span class="comment">//进行业务处理：计算成绩，先求总成绩（sum），之后求平均成绩（average）</span></span><br><span class="line"><span class="comment">//弹出结果</span></span><br><span class="line"><span class="keyword">var</span> num = prompt(<span class="string">&#x27;请输入班级总人数：&#x27;</span>); <span class="comment">// num 班级总人数</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>; <span class="comment">// 求和的变量sum</span></span><br><span class="line"><span class="keyword">var</span> average = <span class="number">0</span>; <span class="comment">// 平均值的变量average</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= num; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> score = prompt(<span class="string">&#x27;请输入第&#x27;</span> + i + <span class="string">&#x27;个学生成绩&#x27;</span>);</span><br><span class="line">    <span class="comment">// 因为从prompt取过来的数都是字符串型的，需要转换成数字型</span></span><br><span class="line">    sum = sum + <span class="built_in">parseFloat</span>(score);</span><br><span class="line">&#125;</span><br><span class="line">average = sum / num;</span><br><span class="line">alert(<span class="string">&#x27;班级总成绩是&#x27;</span> + sum);</span><br><span class="line">alert(<span class="string">&#x27;班级平均分是&#x27;</span> + average);</span><br></pre></td></tr></table></figure><p>案例：一行打印5个星星</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一行打印5个星星(不能全部显示)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果一行全部展示出星星，采用拼接字符串型</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    str = str + <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line"><span class="comment">//自定义输出个数</span></span><br><span class="line"><span class="keyword">var</span> num = prompt(<span class="string">&#x27;请输入星星的个数&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= num; i++)&#123;</span><br><span class="line">    str = str + <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure><h4 id="双重for循环"><a href="#双重for循环" class="headerlink" title="双重for循环"></a>双重for循环</h4><p>循环嵌套是指在一个循环语句中再定义一个循环语句的语法结构，例如在for循环语句中，可以再嵌套一个for 循环，这样的 for 循环语句我们称之为双重for循环。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.双重for循环语法结构</span></span><br><span class="line"><span class="keyword">for</span> (外层初始化变量; 外层条件表达式; 外层操作表达式) &#123;</span><br><span class="line">    <span class="keyword">for</span> (里层初始化变量; 里层条件表达式; 里层操作表达式)&#123;</span><br><span class="line">        <span class="comment">//执行语句</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.我们可以把里面的循环看作是外层循环的语句</span></span><br><span class="line"><span class="comment">//3.外层循环循环一次，里面的循环执行全部</span></span><br><span class="line"><span class="comment">//4.代码验证</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;这是外层循环第&#x27;</span> + i + <span class="string">&#x27;次&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt;= <span class="number">3</span>; j++) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;这是内层循环第&#x27;</span> + j + <span class="string">&#x27;次&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>案例：打印5行5列星星</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//内层循环负责一行打印5个星星</span></span><br><span class="line"><span class="comment">//外层循环负责打印5行</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123; <span class="comment">//外层负责打印5行</span></span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">var</span> j = <span class="number">1</span>; j &lt;= <span class="number">5</span>; j++)&#123; <span class="comment">// 内层负责一行打印5个星星</span></span><br><span class="line">        str = str + <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//一行打完5个星星需要另起一行，加 \n</span></span><br><span class="line">    str = str + <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure><p>案例：打印n行n列星星</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打印n行n列</span></span><br><span class="line"><span class="keyword">var</span> rows = prompt(<span class="string">&#x27;请您输入行数&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> cols = prompt(<span class="string">&#x27;请您输入列数&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= rows; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt;= cols; j++) &#123;</span><br><span class="line">        str = str + <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    str += <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure><p>案例：打印倒三角</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打印倒三角</span></span><br><span class="line"><span class="comment">//核心算法：j = i; j &lt;= 10; j++</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123; <span class="comment">//外层控制行数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = i; j &lt;= <span class="number">10</span>; j++) &#123; <span class="comment">//内层循环打印个数不一样 j = i</span></span><br><span class="line">        str = str + <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    str += <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure><p>案例：打印九九乘法表</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//九九乘法表</span></span><br><span class="line"><span class="comment">//一共有9行，但每行个数不一样，因此用到双重for循环</span></span><br><span class="line"><span class="comment">//外层for循环控制行数i，循环9次，可以打印9行</span></span><br><span class="line"><span class="comment">//内层for循环控制每行公式 j</span></span><br><span class="line"><span class="comment">//核心算法：每一行公式的个数正好和行数一样， j &lt;= i</span></span><br><span class="line"><span class="comment">//每行打印完毕都需要重新换行</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123; <span class="comment">//外层控制行数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123; <span class="comment">//内层控制每一行个数 j &lt;= i</span></span><br><span class="line">        <span class="comment">//1 × 2 = 2</span></span><br><span class="line">        <span class="comment">//str = str + &#x27;#&#x27;</span></span><br><span class="line">        str += j + <span class="string">&#x27;×&#x27;</span> + i + <span class="string">&#x27;=&#x27;</span> + i * j + <span class="string">&#x27;\t&#x27;</span>; <span class="comment">//字符串拼接</span></span><br><span class="line">    &#125;</span><br><span class="line">    str += <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2，while循环"><a href="#2，while循环" class="headerlink" title="2，while循环"></a>2，while循环</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.while循环语法结构  （while 当...时候）</span></span><br><span class="line"><span class="keyword">while</span> (条件表达式) &#123;</span><br><span class="line">    <span class="comment">//循环体</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.执行思路，当条件表达式结果为true时，则执行循环体，否则退出循环</span></span><br><span class="line"><span class="comment">//3.代码验证</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (num &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;循环&#x27;</span>);</span><br><span class="line">    num++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4.里面需要添加计数器，初始化变量</span></span><br><span class="line"><span class="comment">//5.里面也需要操作表达式，完成计数器的更新，防止死循环</span></span><br></pre></td></tr></table></figure><p>案例：打印人的一生</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;这个人今年&#x27;</span> + i + <span class="string">&#x27;岁了&#x27;</span>);</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>案例：计算1-100整数的和</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> j = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (j &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">    sum += j;</span><br><span class="line">    j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> message = prompt(<span class="string">&#x27;你爱我吗&#x27;</span>);</span><br><span class="line"><span class="keyword">while</span> (message !== <span class="string">&#x27;我爱你&#x27;</span>) &#123;</span><br><span class="line">    message = prompt(<span class="string">&#x27;你爱我吗&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">alert(<span class="string">&#x27;我也爱你&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="3，do-while循环"><a href="#3，do-while循环" class="headerlink" title="3，do while循环"></a>3，do while循环</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.do while语法结构</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">//循环体</span></span><br><span class="line">&#125; <span class="keyword">while</span> (条件表达式)</span><br><span class="line"><span class="comment">//2.执行思路，跟while不同的地方在于，do while先执行一次循环体，然后在判断条件，如果条件结果为真则继续执行循环体，否则退出循环</span></span><br><span class="line"><span class="comment">//3.代码验证</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;你好吗&#x27;</span>);</span><br><span class="line">    i++;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt;= <span class="number">100</span>);</span><br><span class="line"><span class="comment">//4.do while循环体至少执行一次</span></span><br></pre></td></tr></table></figure><p>案例：打印人的一生</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;这个人今年&#x27;</span> + i + <span class="string">&#x27;岁了&#x27;</span>);</span><br><span class="line">    i++;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt;= <span class="number">100</span>)</span><br></pre></td></tr></table></figure><p>案例：计算1-100所有整数的和</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> j = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    sum += j;</span><br><span class="line">    j++;</span><br><span class="line">&#125; <span class="keyword">while</span>(j &lt;= <span class="number">100</span>)</span><br><span class="line"><span class="built_in">console</span>.log(sum)</span><br></pre></td></tr></table></figure><h3 id="4，continue、break"><a href="#4，continue、break" class="headerlink" title="4，continue、break"></a>4，continue、break</h3><p>  <code>continue</code> 关键字用于立即跳出本次循环，继续下一次循环（本次循环体中 continue 之后的代码就会少执行一次）。<br>  <code>break</code> 关键字用于立即跳出整个循环（循环结束）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//continue关键字 退出本次循环（当前次循环），继续执行剩余次数循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;<span class="comment">//只要遇见continue就退出本次循环，直接跳到i++</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;我正在吃第&#x27;</span> + i + <span class="string">&#x27;个包子&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>案例：求1-100之间，除了能被7整除之外的整数和</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">7</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sum += i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//break退出整个循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>;<span class="comment">//退出整个循环</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;我正在吃第&#x27;</span> + i + <span class="string">&#x27;个包子&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="「3，代码规范」"><a href="#「3，代码规范」" class="headerlink" title="「3，代码规范」"></a><strong>「3，代码规范」</strong></h2><ol><li>标识符命名规范</li></ol><ul><li>变量、函数的命名必须要有意义</li><li>变量的名称一般用名词</li><li>函数的名称一般用动词</li></ul><ol start="2"><li><p>操作符规范</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 操作符的左右两侧各保留一个空格</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">      <span class="keyword">break</span>; <span class="comment">// 直接退出整个 for 循环，跳到整个for循环下面的语句</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;我正在吃第&#x27;</span> + i + <span class="string">&#x27;个包子呢&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>单行注释规范</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">      <span class="keyword">break</span>; <span class="comment">// 单行注释前面注意有个空格</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;我正在吃第&#x27;</span> + i + <span class="string">&#x27;个包子呢&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>其他规范</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//关键词 操作符空格</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;=<span class="number">10</span>; i++) &#123;&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小白的前端之路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS定位</title>
      <link href="/%E5%89%8D%E7%AB%AF/CSS%E5%AE%9A%E4%BD%8D/"/>
      <url>/%E5%89%8D%E7%AB%AF/CSS%E5%AE%9A%E4%BD%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h1><h2 id="定位基础"><a href="#定位基础" class="headerlink" title="定位基础"></a>定位基础</h2><p>定位就是将盒子定在某一位置，</p><p>定位=定位模式+位偏移</p><p>定位模式和位偏移都属于属性</p><p>定位模式用于指定一个元素在文档中的定位方式，边偏移就是决定该元素的最终位置。</p><p>position属性用来设置定位模式，属性值分为四个</p><table><thead><tr><th>属性</th><th>属性值</th><th>语义</th></tr></thead><tbody><tr><td>position</td><td>static</td><td>静态定位</td></tr><tr><td></td><td>relative</td><td>相对定位</td></tr><tr><td></td><td>absolute</td><td>绝对定位</td></tr><tr><td></td><td>fixed</td><td>固定定位</td></tr><tr><td></td><td>sticky</td><td>粘性定位</td></tr></tbody></table><p>边偏移有四个属性 top left right bottom</p><table><thead><tr><th>属性</th><th>属性值示例</th><th>描述</th></tr></thead><tbody><tr><td>top</td><td>top: 50px;</td><td>顶端偏移量，定义元素相对于其父元素上边线的距离</td></tr><tr><td>bottom</td><td>bottom: 50px;</td><td>下端偏移量，定义元素相对于其父元素下边线的距离</td></tr><tr><td>left</td><td>left: 50px;</td><td>左端偏移量，定义元素相对于其父元素左边线的距离</td></tr><tr><td>right</td><td>right: 50px</td><td>右端偏移量，定义元素相对于其父元素右边线的距离</td></tr></tbody></table><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">选择器 &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">top</span>；<span class="number">0px</span>；</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="static定位"><a href="#static定位" class="headerlink" title="static定位"></a>static定位</h3><p>static定位是元素的默认定位方式，无定位的意思，按照标准流的位置，平时很少用到这种</p><p>relative相对定位，</p><p>它有两个特点：</p><ol><li>元素在移动位置时，相对于它原来的位置来移动的，移动位置时以自身位置为参考点</li><li>不会脱标，继续保留原来标准流的位置，后面盒子仍以标准流对待他</li><li>子绝父相</li></ol><h3 id="absolute定位"><a href="#absolute定位" class="headerlink" title="absolute定位"></a>absolute定位</h3><p>它有三个特点：</p><ol><li>移动位置时相对它祖先元素来移动，如果没有祖先元素或者祖先元素没有添加定位，则以浏览器为准定位</li><li>如果祖先元素有定位（相对绝对固定），则以最近一级有定位的祖先元素为参考点</li><li>会脱标，不占有原来的位置</li><li>子绝父相</li></ol><h3 id="fixed定位"><a href="#fixed定位" class="headerlink" title="fixed定位"></a>fixed定位</h3><p>fixed固定定位，是固定在浏览器可视区的位置，浏览器滚动时元素位置不改变</p><p>特点：</p><ol><li>以浏览器可视窗口为参考点移动元素，与父元素无关，不随滚动条滚动</li><li>也会脱标，不占有原来的位置，可以看作时特殊的绝对定位</li></ol><h3 id="sticky定位"><a href="#sticky定位" class="headerlink" title="sticky定位"></a>sticky定位</h3><p>sticky粘性定位，被认为是相对定位和固定定位的混合</p><p>特点：</p><ol><li>以浏览器可视窗口为参照物（固定特点)</li><li>不会脱标，占有原来的位置（相对特点）</li><li>必须添加边偏移其中一个元素才有效</li><li>跟页面滚动搭配使用，兼容性差</li></ol><h3 id="子绝父相："><a href="#子绝父相：" class="headerlink" title="子绝父相："></a>子绝父相：</h3><p>子元素用绝对定位，父元素用相对定位。可以让子元素固定在父元素里面显示，父元素占有位置</p><h3 id="CSS小算法："><a href="#CSS小算法：" class="headerlink" title="CSS小算法："></a>CSS小算法：</h3><p>固定定位固定在版心右侧位置，多走版心宽度一半位置就可让固定定位盒子贴着版心右侧对齐了</p><ol><li>让固定定位的盒子left:50%，走到版心一半的位置</li><li>让固定定位的盒子margin:left;版心宽度一半的距离</li></ol><h2 id="定位的一些拓展"><a href="#定位的一些拓展" class="headerlink" title="定位的一些拓展"></a>定位的一些拓展</h2><h3 id="定位叠放次序z-index"><a href="#定位叠放次序z-index" class="headerlink" title="定位叠放次序z-index"></a>定位叠放次序z-index</h3><p>多个盒子使用定位时，可能会出现重叠，可通过z-index属性来控制盒子前后次序（z轴）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">选择器&#123;</span><br><span class="line"><span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>属性值可以是正整数，负整数，或0。默认是auto，数值越大越靠上</li><li>若属性值相同按书写顺序，后来居上</li><li>数字不加单位</li><li>只有定位的盒子才有z-index 属性</li></ol><h3 id="定位盒子垂直居中"><a href="#定位盒子垂直居中" class="headerlink" title="定位盒子垂直居中"></a>定位盒子垂直居中</h3><p>加了定位的盒子不能通过margin: 0 auto;水平居中，需要通过下面算法实现水平和垂直居中</p><ol><li>left: 50%；让盒子左侧移动到父级元素的水平中心位置</li><li>margin-left: 100px; 让盒子向左移动自身宽度的一半</li><li>垂直居中同理</li></ol><h3 id="定位特殊性"><a href="#定位特殊性" class="headerlink" title="定位特殊性"></a>定位特殊性</h3><h4 id="绝对定位和固定定位和浮动类似"><a href="#绝对定位和固定定位和浮动类似" class="headerlink" title="绝对定位和固定定位和浮动类似"></a>绝对定位和固定定位和浮动类似</h4><ol><li>行内元素添加绝对或固定后，可以直接设置宽度和高度</li><li>块级元素添加后，如不设置宽度和高度，默认为内容大小</li></ol><h4 id="脱标盒子不会引发外边距塌陷"><a href="#脱标盒子不会引发外边距塌陷" class="headerlink" title="脱标盒子不会引发外边距塌陷"></a>脱标盒子不会引发外边距塌陷</h4><p>浮动元素，绝对定位，固定定位都不会触发外边距合并问题</p><h4 id="绝对固定定位会完全压住盒子"><a href="#绝对固定定位会完全压住盒子" class="headerlink" title="绝对固定定位会完全压住盒子"></a>绝对固定定位会完全压住盒子</h4><ol><li>浮动元素会压住标准流和盒子，但不会压住标准流盒子里面的文字图片</li><li>绝对和固定会压住盒子所有内容</li><li>浮动之所以不会压住文字，是因为浮动最初目的就是做文字环绕效果</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小白的前端之路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript基础</title>
      <link href="/%E5%89%8D%E7%AB%AF/Javascript%E5%9F%BA%E7%A1%80/"/>
      <url>/%E5%89%8D%E7%AB%AF/Javascript%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="Javascript基础"><a href="#Javascript基础" class="headerlink" title="Javascript基础"></a>Javascript基础</h1><h3 id="编程基础"><a href="#编程基础" class="headerlink" title="编程基础"></a>编程基础</h3><p><strong>「计算机语言」</strong>分为机器语言，汇编语言，高级语言。计算机内部最终执行的都是机器语言，由<code>0</code>和<code>1</code>这样的二进制数构成。</p><p><strong>「数据存储单位」</strong>8bit(比特) = 1B(Byte)字节  千字节1KB = 1024B</p><p><strong>「翻译器」</strong>高级语言编写的程序不能被计算机识别，需要经过转换，将源代码程序翻译成<code>机器语言</code>才能运行。浏览器里面的js解释器就是这样的一个翻译器。</p><p><strong>「程序运行」</strong></p><ul><li>打开某个程序时，先从硬盘中把程序的代码加载到内存中</li><li>CPU执行内存中的代码</li><li>注意：之所以要内存的一个重要原因，是因为 cpu运行太快了，如果只从硬盘中读数据，会浪费cpu性能，所以，才使用存取速度更快的内存来保存运行时的数据。（内存是电，硬盘是机械）</li></ul><h3 id="初识JavaScript"><a href="#初识JavaScript" class="headerlink" title="初识JavaScript"></a>初识JavaScript</h3><p><strong>「创始人」</strong>布兰登·艾奇(Brendan Eich),起初命名为<code>LiveScript</code>后来与Sun公司合作改名为<code>JavaScript</code>。</p><p><strong>「JavaScript」</strong>运行在客户端的脚本语言，不需要编译，由js解释器(js引擎)逐行解释执行。Node.js也可以用于服务器端编程。</p><p><strong>「JavaScript组成」</strong>ECMAScript(JavaScript语法)、DOM(文档对象模型)、BOM(浏览器对象模型)</p><p><strong>「JavaScript的作用」</strong></p><ul><li>表单动态校验(密码强度检测)</li><li>网页特效</li><li>服务端开发(Node.js)</li><li>桌面程序(Electron)、App(Cordova)、控制硬件-物联网(Ruff)、游戏开发(cocos2d-js)</li></ul><p><strong>「JavaScript书写位置」</strong></p><blockquote><p>JS有3种书写位置，分别为行内、内嵌和外部。</p></blockquote><ol><li><p>行内</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;botton&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点我试试&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;Helo World!&#x27;)&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>内嵌</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">alret(<span class="string">&#x27;Hello World!&#x27;</span>);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>外部</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">引用外部js文件</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;my.js&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br></pre></td></tr></table></figure></li></ol><p><strong>「注释」</strong></p><ol><li><p>单行注释</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我是单行注释 （ctrl + /）</span></span><br></pre></td></tr></table></figure></li><li><p>多行注释</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  获取用户年龄和姓名</span></span><br><span class="line"><span class="comment">  并通过提示框显示出来</span></span><br><span class="line"><span class="comment">  点击vscode左下角管理-键盘快捷方式-切换块注释</span></span><br><span class="line"><span class="comment">  (默认快捷键 alt + shift + a) 修改为 (ctrl + shift + /)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="输入和输出语句"><a href="#输入和输出语句" class="headerlink" title="输入和输出语句"></a>输入和输出语句</h3><table><thead><tr><th>函数</th><th>说明</th><th>归属</th></tr></thead><tbody><tr><td>prompt(‘输入’);</td><td>浏览器弹出输入框</td><td>浏览器</td></tr><tr><td>alert(‘输出’);</td><td>浏览器弹出警示框</td><td>浏览器</td></tr><tr><td>console.log(‘控制台输出’)</td><td>浏览器控制台打印输出信息</td><td>浏览器</td></tr></tbody></table></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">//输入框</span></span></span><br><span class="line"><span class="javascript">    prompt(<span class="string">&#x27;请输入&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">//弹出警示框，输出的展示给用户</span></span></span><br><span class="line"><span class="javascript">    alert(<span class="string">&#x27;计算的结果是&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">//控制台输出，给程序员测试用</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;控制台显示&#x27;</span>);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p><strong>「变量」</strong>是程序在内存中申请的一块用于存放数据的空间。变量是用于存放数据的容器，可以通过变量名获取数据，甚至修改数据。</p><p>白话讲，变量就是一个装东西的盒子。</p><h3 id="变量的使用"><a href="#变量的使用" class="headerlink" title="变量的使用"></a>变量的使用</h3><p>变量在使用时分为两步，声明和赋值</p><p><strong>「1. 声明变量」</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明变量</span></span><br><span class="line"><span class="keyword">var</span> age; <span class="comment">//声明一个名称为age的变量</span></span><br></pre></td></tr></table></figure><p>var是一个JS关键字，用来声明变量(variable变量的意思)。num是我们定义的变量名，可以通过变量名来访问内存中分配的空间。</p><p><strong>「2. 赋值」</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">10</span>;<span class="comment">//给age变量赋值为10</span></span><br></pre></td></tr></table></figure><p><strong>「3. 变量的初始化」</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">10</span>;<span class="comment">//声明变量并赋值为10</span></span><br></pre></td></tr></table></figure><p>小案例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明</span></span><br><span class="line"><span class="keyword">var</span> age;</span><br><span class="line"><span class="comment">//赋值</span></span><br><span class="line">age=<span class="number">10</span>;</span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line"><span class="built_in">console</span>.log(age);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用户输入姓名，存到一个myname的变量中</span></span><br><span class="line"><span class="keyword">var</span> myname=prompt(<span class="string">&#x27;请输入你的名字&#x27;</span>)；</span><br><span class="line"><span class="comment">//输出这个用户名</span></span><br><span class="line">alert(myname);</span><br></pre></td></tr></table></figure><p><strong>「4. 变量语法扩展」</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.一个变量被重新赋值后，它原有的值会被覆盖掉，变量值以最后一次赋的值为准。</span></span><br><span class="line"><span class="keyword">var</span> age=<span class="number">10</span>;</span><br><span class="line">age=<span class="number">18</span>;</span><br><span class="line"><span class="comment">// 2.同时声明多个变量(只需要写一个var,多个变量名之间用英文逗号隔开)</span></span><br><span class="line"><span class="keyword">var</span> num=<span class="number">10</span>,age=<span class="number">18</span>,name=<span class="string">&#x27;name&#x27;</span>;</span><br></pre></td></tr></table></figure><p>声明变量特殊情况</p><table><thead><tr><th>情况</th><th>说明</th><th>结果</th></tr></thead><tbody><tr><td>var age; console.log(age);</td><td>只声明，不赋值</td><td>undefined</td></tr><tr><td>console.log(age);</td><td>不声明，不赋值，直接使用</td><td>报错</td></tr><tr><td>age=10;console.log(age);</td><td>不声明，只赋值</td><td>10</td></tr></tbody></table><p><strong>「5. 变量命名规范」</strong></p><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/202205302255403.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//小案例，交换两个变量的值</span></span><br><span class="line"><span class="keyword">var</span> temp;<span class="comment">//引入临时变量</span></span><br><span class="line"><span class="keyword">var</span> apple1=<span class="string">&#x27;青苹果&#x27;</span>,apple2=<span class="string">&#x27;红苹果&#x27;</span>；</span><br><span class="line">temp=apple1;</span><br><span class="line">apple1=apple2;</span><br><span class="line">apple2=temp;</span><br><span class="line"><span class="built_in">console</span>.log(apple1);</span><br><span class="line"><span class="built_in">console</span>.log(apple2);</span><br></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>分为两类：简单数据类型(Number,String,Boolean,Undefined,Null)和复杂数据类型(object)。</p><table><thead><tr><th>简单数据类型</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td>Number</td><td>数字型，包含整数和浮点数</td><td>0</td></tr><tr><td>String</td><td>字符串类型</td><td>“ ”</td></tr><tr><td>Boolean</td><td>布尔值类型</td><td>false</td></tr><tr><td>Undefined</td><td>声明但不赋值，a=undefined</td><td>undefined</td></tr><tr><td>Null</td><td>var a=null; 声明a为空值</td><td>null</td></tr></tbody></table><h3 id="Number数字型"><a href="#Number数字型" class="headerlink" title="Number数字型"></a>Number数字型</h3><p><strong>「数字型进制」</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.在JS中八进制前面加0，十六进制前面加 0x</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">07</span>;   <span class="comment">// 对应十进制的7</span></span><br><span class="line"><span class="comment">// 2.十六进制数字序列范围：0~9以及A~F</span></span><br><span class="line"> <span class="keyword">var</span> num = <span class="number">0xA</span>; <span class="comment">//对应十进制10</span></span><br></pre></td></tr></table></figure><p><strong>「数字型范围」</strong>JavaScript中的数值有最大值和最小值</p><ul><li>最大值:<code>Number.MAX_VALUE</code>，值为：1.7976931348623157e+308</li><li>最小值:<code>Number.MIN_VALUE</code>，值为：5e-32</li><li>特殊值：<code>Infinity</code> 无穷大 <code>-Infinity</code> 无穷小 <code>NaN</code> 代表一个非数字（not a number）</li><li>isNaN(): 用来判断一个变量是否为非数字的类型。非数字型为true,数字型为false。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.MAX_VALUE);<span class="comment">//数字的最大值</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.MIN_VALUE);<span class="comment">//数字的最小值</span></span><br><span class="line"><span class="comment">//无穷大</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.MAX_VALUE*<span class="number">2</span>);<span class="comment">//Infinity 无穷大</span></span><br><span class="line"><span class="comment">//无穷小</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.MIN_VALUE*<span class="number">2</span>);<span class="comment">//-Infinity 无穷小</span></span><br><span class="line"><span class="comment">//非数字</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;pink老师&#x27;</span>-<span class="number">100</span>)；<span class="comment">//NaN</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> usrage = <span class="number">21</span>;</span><br><span class="line"><span class="keyword">var</span> isOK = <span class="built_in">isNaN</span>(usrage);</span><br><span class="line"><span class="built_in">console</span>.log(isOK); <span class="comment">//false 21不是一个非数字</span></span><br><span class="line"><span class="keyword">var</span> usrname = <span class="string">&quot;andy&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(usrname));<span class="comment">//true &quot;andy&quot;是一个非数字</span></span><br></pre></td></tr></table></figure><h3 id="String字符串型"><a href="#String字符串型" class="headerlink" title="String字符串型"></a>String字符串型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.字符串型可以是引号中的任意文本，语法为 单引号 和 双引号</span></span><br><span class="line"><span class="keyword">var</span> msg = <span class="string">&#x27;我的名字叫&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;fan&quot;</span>;</span><br></pre></td></tr></table></figure><p>由于HTML标签属性是双引号，这里推荐使用单引号，常见错误未使用引号，会被认定是js代码，但js没有这些语法。</p><p><strong>「字符串引号嵌套」</strong></p><p>js可以使用单引号套双引号，或者使用双引号套单引号（外双内单，外单内双）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1=<span class="string">&quot;我是&#x27;程序员&#x27;&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> str2=<span class="string">&#x27;我是&quot;程序员&quot;&#x27;</span>;</span><br><span class="line"><span class="comment">//常见错误</span></span><br><span class="line"><span class="keyword">var</span> str3=<span class="string">&#x27;我是程序员&quot;;//报错，不能单双引号搭配</span></span><br></pre></td></tr></table></figure><p><strong>「1. 字符串转义符」</strong>都是以 \ 开头，详细如下</p><table><thead><tr><th>转义符</th><th>说明</th></tr></thead><tbody><tr><td>\n</td><td>换行符，n是newline的意思</td></tr><tr><td>\ \</td><td>斜杠\</td></tr><tr><td>\ ‘</td><td>单引号‘</td></tr><tr><td>\ “</td><td>双引号 “</td></tr><tr><td>\t</td><td>tab缩进</td></tr><tr><td>\b</td><td>空格，b是blank 的意思</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字符串转义字符，都是\开头，写在引号里面</span></span><br><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;我是\n程序员&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure><p><strong>「2. 字符串长度」</strong><br>  字符串是由若干字符组成的，这些字符的数量就是字符串的长度，通过length属性可以获取整个字符串长度。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&#x27;我是程序员&#x27;</span>;</span><br><span class="line">alert(str.length);<span class="comment">//显示5</span></span><br></pre></td></tr></table></figure><p><strong>「3. 字符串拼接」</strong></p><ul><li>  多个字符串之间可以使用 + 进行拼接，其拼接方式为 字符串 + 任何类型 = 拼接之后的新字符串。</li><li>  拼接前会把与字符串相加的任何类型转成字符串，再拼接成一个新的字符串</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.1 字符串 &quot;相加&quot;</span></span><br><span class="line">alert(<span class="string">&#x27;hello&#x27;</span> + <span class="string">&#x27; &#x27;</span> + <span class="string">&#x27;world&#x27;</span>); <span class="comment">// hello world</span></span><br><span class="line"><span class="comment">//1.2 数值字符串 &quot;相加&quot;</span></span><br><span class="line">alert(<span class="string">&#x27;100&#x27;</span> + <span class="string">&#x27;100&#x27;</span>); <span class="comment">// 100100</span></span><br><span class="line"><span class="comment">//1.3 数值字符串 + 数值</span></span><br><span class="line">alert(<span class="string">&#x27;11&#x27;</span> + <span class="number">12</span>);     <span class="comment">// 1112 +号口诀：数值相加，字符相连</span></span><br><span class="line"><span class="comment">//1.4 数值相加</span></span><br><span class="line">alert(<span class="number">12</span>+<span class="number">12</span>); <span class="comment">//24</span></span><br><span class="line"><span class="comment">// 1.5 字符串拼接加强</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line">alert(<span class="string">&quot;你&quot;</span> + age +<span class="string">&quot;岁了&quot;</span>); <span class="comment">//变量和字符串引引加加</span></span><br></pre></td></tr></table></figure><p>+号口诀：数值相加，字符相连</p><p>字符串拼接加强案例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//弹出一个输入框，输入年宁</span></span><br><span class="line"><span class="comment">//把输入年龄与字符串相接</span></span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line"><span class="keyword">var</span> age=prompt(<span class="string">&#x27;请输入年龄&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> str=<span class="string">&#x27;您今年已经&#x27;</span>+ age + <span class="string">&#x27;岁了&#x27;</span>;</span><br><span class="line">alert(str);</span><br></pre></td></tr></table></figure><h3 id="布尔型Boolean"><a href="#布尔型Boolean" class="headerlink" title="布尔型Boolean"></a>布尔型Boolean</h3><p>  布尔类型有两个值：true 和 false ，其中 true 表示真（对），而 false 表示假（错）。<br>  布尔型和数字型相加的时候， true 的值为 1 ，false 的值为 0。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> + <span class="number">1</span>); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">false</span> + <span class="number">1</span>); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h3 id="Undefined-和-Null"><a href="#Undefined-和-Null" class="headerlink" title="Undefined 和 Null"></a>Undefined 和 Null</h3><p>  一个变量声明后没有赋值会有一个默认值undefined（如果相连或者相加时，注意结果）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> variable;</span><br><span class="line"><span class="built_in">console</span>.log(variable); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;你好&quot;</span> + variable); <span class="comment">// 你好undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">11</span> + variable); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> + variable);<span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><p>  一个变量声明并赋值null,里面存的值为空</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> var2 = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">console</span>.log(var2); <span class="comment">// null</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;你好&quot;</span> + var2); <span class="comment">// 你好null</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">11</span> + var2); <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> + var2);<span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h3 id="获取变量类型及转换"><a href="#获取变量类型及转换" class="headerlink" title="获取变量类型及转换"></a>获取变量类型及转换</h3><ul><li>检测变量的数据类型 <code>typeof</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> num);<span class="comment">//结果为 number</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;pink&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> str);<span class="comment">//结果为 string</span></span><br><span class="line"><span class="keyword">var</span> flag = <span class="string">&#x27;true&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> flog);<span class="comment">//结果为 boolean</span></span><br><span class="line"><span class="keyword">var</span> vari = <span class="literal">undefined</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> vari);<span class="comment">//结果为 undefined</span></span><br><span class="line"><span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> timer); <span class="comment">//结果为 object</span></span><br><span class="line"><span class="comment">//prompt 取过来的值是字符型的</span></span><br><span class="line"><span class="keyword">var</span> age = prompt(<span class="string">&#x27;请输入年龄&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(age);</span><br><span class="line">conloge.log(<span class="keyword">typeof</span> age);</span><br></pre></td></tr></table></figure><p>prompt 取过来的值是字符型的</p><p><code>字面量</code>:是源代码中一个固定值的表示法，就是字面量如何去表达这个值。通过数据的格式特征可以判断数据的类型</p><ul><li><ul><li>有数字字面量:8,9,10</li><li>字符串字面量:’饭老板’，”前端开发”</li><li>布尔字面量:true,false</li></ul></li></ul><p><strong>「数据类型转换」</strong></p><ul><li>转换为字符串</li></ul><table><thead><tr><th>方式</th><th>说明</th><th>案例</th></tr></thead><tbody><tr><td>toString()</td><td>转换成字符型</td><td></td></tr><tr><td>String()</td><td>强制转换</td><td></td></tr><tr><td>加号拼接字符串</td><td>和字符型拼接的结果都是字符型</td><td></td></tr></tbody></table><p>toString()和String()使用方式不一样</p><p>三种转换方式更喜欢用第三种，被称为隐式转换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1,数字型转换字符串 变量.toString()</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> str = num.toString();</span><br><span class="line"><span class="built_in">console</span>,log(str);</span><br><span class="line"><span class="built_in">console</span>,log(<span class="keyword">typeof</span> str);</span><br><span class="line"><span class="comment">//2，String()</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="built_in">String</span>(num);</span><br><span class="line"><span class="built_in">console</span>,log(<span class="keyword">typeof</span> str);</span><br><span class="line"><span class="comment">//3，加号拼接字符串</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num + <span class="string">&#x27;&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li>转换为数字型</li></ul><table><thead><tr><th>方式</th><th>说明</th><th>案例</th></tr></thead><tbody><tr><td>parseInt(String)函数</td><td>转化为整数型</td><td></td></tr><tr><td>parseFloat(String)函数</td><td>转化为浮点型</td><td></td></tr><tr><td>Number()强制转换函数</td><td>强制转换数值型</td><td></td></tr><tr><td>js隐式转换（- * /)</td><td>算数因算符转换数值</td><td></td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1，parseInt(变量) 得到的是整数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">&#x27;3.14&#x27;</span>));<span class="comment">//3 取整</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">&#x27;3.93&#x27;</span>));<span class="comment">//3 取整</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">&#x27;120px&#x27;</span>));<span class="comment">//120 会去掉px单位</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">&#x27;rem120px&#x27;</span>));<span class="comment">//NaN</span></span><br><span class="line"><span class="comment">//2，parseFloat(变量) 得到的是浮点数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">&#x27;3.14&#x27;</span>));<span class="comment">//3.14</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">&#x27;120px&#x27;</span>));<span class="comment">//120 去掉单位</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">&#x27;rem120px&#x27;</span>));<span class="comment">//NaN</span></span><br><span class="line"><span class="comment">//3，Number(变量)</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(str));<span class="comment">//123</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">&#x27;12&#x27;</span>));<span class="comment">//12</span></span><br><span class="line"><span class="comment">//4，利用算数运算符</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;12&#x27;</span>-<span class="number">0</span>);<span class="comment">//12</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;123&#x27;</span>-<span class="string">&#x27;120&#x27;</span>);<span class="comment">//3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;123&#x27;</span>*<span class="number">1</span>);<span class="comment">//123</span></span><br></pre></td></tr></table></figure><p>简单加法器案例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = prompt(<span class="string">&#x27;请输入第一个数&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> num2 = prompt(<span class="string">&#x27;请输入第二个数&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> result = <span class="built_in">parseFloat</span>(num1) + <span class="built_in">parseFloat</span>(num2);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;您的结果是&#x27;</span> + result);</span><br></pre></td></tr></table></figure><p>计算年龄案例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> year = prompt(<span class="string">&#x27;请输入生日年份&#x27;</span>)；</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">2022</span> - year; <span class="comment">//隐式转换</span></span><br><span class="line">alert(<span class="string">&#x27;你的年龄&#x27;</span>+ age + <span class="string">&#x27;岁了&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li>转换为布尔型</li></ul><ol><li>代表空、否定的值会被转换为false，如’ ‘、0、NaN、null、undefined </li><li>其余值都会被转换为true。</li></ol><table><thead><tr><th>方式</th><th>说明</th><th>案例</th></tr></thead><tbody><tr><td>Boolean()函数</td><td>其他类型转换布尔型</td><td>Boolean(‘true’)</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="string">&#x27;&#x27;</span>));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="number">0</span>));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">NaN</span>));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">null</span>));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">undefined</span>));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="string">&#x27;小白&#x27;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="string">&#x27;12&#x27;</span>));<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h2 id="关键字和保留字"><a href="#关键字和保留字" class="headerlink" title="关键字和保留字"></a>关键字和保留字</h2><p><strong>「标识符」</strong>指开发人员为变量、属性、函数、参数取得名字。标识符不能是关键字或保留字。</p><p><strong>「关键字」</strong>指 JS本身已经使用了的字，不能再用它们充当变量名、方法名</p><blockquote><p>包括：break、case、catch、continue、default、delete、do、else、finally、for、function、if、in、instanceof、new、return、switch、this、throw、try、typeof、var、void、while、with 等。</p></blockquote><p><strong>「保留字」</strong>实际上就是预留的“关键字”，意思是现在虽然还不是关键字，但是未来可能会成为关键字，同样不能使用它们当变量名或方法名。</p><blockquote><p>boolean、byte、char、class、const、debugger、double、enum、export、extends、fimal、float、goto、implements、import、int、interface、long、mative、package、private、protected、public、short、static、super、synchronized、throws、transient、volatile 等。</p><p>注意：如果将保留字用作变量名或函数名，那么除非将来的浏览器实现了该保留字，否则很可能收不到任何错误消息。当浏览器将其实现后，该单词将被看做关键字，如此将出现关键字错误。</p></blockquote><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p><strong>「运算符」</strong>是用于实现赋值、比较和执行算数运算等功能的符号。常用运算符分类如下</p><ul><li>算数运算符</li><li>递增和递减运算符</li><li>比较运算符</li><li>逻辑运算符</li><li>赋值运算符</li></ul><table><thead><tr><th>运算符</th><th>描述</th><th>案例</th></tr></thead><tbody><tr><td>+</td><td>加</td><td>10+20=30</td></tr><tr><td>-</td><td>减</td><td>10-20=-10</td></tr><tr><td>*</td><td>乘</td><td>10*20=200</td></tr><tr><td>/</td><td>除</td><td>10/20=0.5</td></tr><tr><td>%</td><td>取余（取模）</td><td>返回除法的余数9%2=1</td></tr></tbody></table><ul><li><p>浮点数的精度问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">var</span> result = <span class="number">0.1</span> + <span class="number">0.2</span>;    <span class="comment">// 结果不是 0.3，而是：0.30000000000000004</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">0.07</span> * <span class="number">100</span>);   <span class="comment">// 结果不是 7，  而是：7.000000000000001</span></span><br><span class="line"><span class="comment">//浮点数不能用来比较是否相等</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0.1</span> + <span class="number">0.2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num == <span class="number">0.3</span>);<span class="comment">//false</span></span><br></pre></td></tr></table></figure></li><li><ul><li>浮点数值的最高精度是17位小数，但是在进行算数运算时其精确度远远不如整数,所以不要直接判断两个浮点数是否相等!</li></ul></li><li><p>表达式与返回值</p></li><li><ul><li>表达式：由数字、运算符和变量组成的式子。</li><li>返回值：每一个表达式经过相应的运算之后，会有一个最终结果，称为表达式的返回值</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>+<span class="number">1</span>);<span class="comment">//2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>-<span class="number">1</span>);<span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>*<span class="number">1</span>);<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>/<span class="number">1</span>);<span class="comment">//1</span></span><br><span class="line"><span class="comment">//取余</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">4</span>%<span class="number">2</span>);<span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.lpg(<span class="number">5</span>%<span class="number">3</span>);<span class="comment">//2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>%<span class="number">5</span>);<span class="comment">//3</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>+<span class="number">1</span>);<span class="comment">//2为返回值</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">1</span> + <span class="number">1</span>;<span class="comment">//右边表达式计算完毕把返回值给左边</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>「递增和递减运算符」</strong></p><p>  反复给变量增加或减去1，可以使用递增（++）或递减（- -）运算符，分为前置和后置，必须配合变量使用。</p><ul><li>递增运算符</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//前置递增 </span></span><br><span class="line"><span class="keyword">var</span>  num = <span class="number">10</span>;</span><br><span class="line">alert(++num + <span class="number">10</span>);   <span class="comment">// 21 使用口诀：先自加，后返回值</span></span><br><span class="line"> <span class="comment">//后置递增 </span></span><br><span class="line"><span class="keyword">var</span>  num1 = <span class="number">10</span>;</span><br><span class="line">alert(<span class="number">10</span> + num1++);  <span class="comment">// 20 使用口诀：先返回原值，后自加 </span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = ++num + num++; <span class="comment">//num = 2</span></span><br><span class="line"><span class="built_in">console</span>.log(num2);<span class="comment">//4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = num++ + num1++; <span class="comment">// 1 + 1</span></span><br><span class="line"><span class="built_in">console</span>.log(num2);<span class="comment">//2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = num++ + num++;<span class="comment">// 1 + 2 </span></span><br><span class="line"><span class="built_in">console</span>.log(num2); <span class="comment">// 3  </span></span><br></pre></td></tr></table></figure><p><strong>「比较运算符」</strong></p><p>返回的是布尔值（true || false）</p><table><thead><tr><th>运算符</th><th>描述</th><th>案例</th><th>结果</th></tr></thead><tbody><tr><td>&lt;</td><td>小于号</td><td>1&lt;2</td><td>true</td></tr><tr><td>&gt;</td><td>大于号</td><td>1&gt;2</td><td>false</td></tr><tr><td>&gt;=</td><td>大于等于号</td><td>2 &gt;= 2</td><td>true</td></tr><tr><td>&lt;=</td><td>小于等于号</td><td>3 &lt;= 2</td><td>false</td></tr><tr><td>==</td><td>等判号（会转型）</td><td>15 == ‘15’</td><td>true</td></tr><tr><td>!=</td><td>不等号</td><td>37 != 37</td><td>false</td></tr><tr><td>===</td><td>全等</td><td>37 === ‘37’</td><td>false</td></tr><tr><td>!===</td><td>全不等</td><td>37 !=== ‘37’</td><td>true</td></tr></tbody></table><p>注意：</p><ul><li>==判断两边值是否相等（有隐式转换）</li><li>===判断两边值和数据类型是否完全相同</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//==默认转换数字类型，会把字符串型转换成数字型，要求值相等即可</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span> == <span class="number">5</span>);<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;pink&#x27;</span> == <span class="string">&#x27;我&#x27;</span>);<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">18</span> == <span class="number">18</span>);<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">18</span> == <span class="string">&#x27;18&#x27;</span>);<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">18</span> != <span class="number">18</span>);<span class="comment">//false</span></span><br><span class="line"><span class="comment">//===要求值和数据类型完全一样</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">18</span> === <span class="number">18</span>);<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">18</span> === <span class="string">&#x27;18&#x27;</span>);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><p><strong>「逻辑运算符」</strong><br>  逻辑运算符是用来进行布尔值运算的运算符<br>  短路运算:当有多个表达式（值）时,左边的表达式值可以确定结果时,就不再继续运算右边的表达式的值;</p><table><thead><tr><th>运算符</th><th>描述</th><th>案例</th><th>特点</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>“逻辑与”，简称“与” and</td><td>true &amp;&amp; false</td><td>两边都true才返回true</td></tr><tr><td>||</td><td>“逻辑或”，简称“或” or</td><td>true || true</td><td>有真为真</td></tr><tr><td>!</td><td>“逻辑非”，简称“非” not</td><td>! true</td><td>取反</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1,&amp;&amp;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span> &gt; <span class="number">5</span> &amp;&amp; <span class="number">3</span> &gt; <span class="number">2</span>);<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span> &lt; <span class="number">5</span> &amp;&amp; <span class="number">3</span> &gt; <span class="number">2</span>);<span class="comment">//true</span></span><br><span class="line"><span class="comment">//2,||</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span> &gt; <span class="number">5</span> || <span class="number">3</span> &gt; <span class="number">2</span>);<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span> &lt; <span class="number">5</span> || <span class="number">3</span> &lt; <span class="number">2</span>);<span class="comment">//false</span></span><br><span class="line"><span class="comment">//3,!</span></span><br><span class="line"><span class="built_in">console</span>.log(!<span class="literal">true</span>);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//逻辑与短路运算 如表达式1结果为真，则返回表达式2，如果表达式1结果为假，则返回表达式1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">123</span> &amp;&amp; <span class="number">456</span>);<span class="comment">//456</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span> &amp;&amp; <span class="number">456</span>);<span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span> &amp;&amp; <span class="number">1</span>+<span class="number">2</span> &amp;&amp; <span class="number">456</span>*<span class="number">789</span>);<span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;&#x27;</span> &amp;&amp; <span class="number">1</span>+<span class="number">2</span> &amp;&amp; <span class="number">456</span>*<span class="number">789</span>);<span class="comment">//&#x27;&#x27;</span></span><br><span class="line"><span class="comment">//有空的或者否定的是假，其余为真 0 &#x27;&#x27; null undefined NaN</span></span><br><span class="line"><span class="comment">//逻辑或短路运算 如表达式1结果为真，则返回表达式1，如果表达式1结果为假，则返回表达式2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">123</span> || <span class="number">456</span>);<span class="comment">//123</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">123</span> || <span class="number">456</span> || <span class="number">456</span>+<span class="number">789</span>);<span class="comment">//123</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span> || <span class="number">456</span> || <span class="number">456</span>+<span class="number">789</span>);<span class="comment">//456</span></span><br><span class="line"><span class="comment">//逻辑中断很重要，会影响程序运行结果</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">123</span> || num++);<span class="comment">//num++ 运行中断</span></span><br><span class="line"><span class="built_in">console</span>.log(num);<span class="comment">//0</span></span><br></pre></td></tr></table></figure><p><strong>「赋值运算符」</strong></p><table><thead><tr><th>运算符</th><th>描述</th><th>案例</th></tr></thead><tbody><tr><td>=</td><td>直接赋值</td><td>var name = ‘fan’</td></tr><tr><td>+=  -=</td><td>加一个数后在赋值</td><td>var age = 5; age += 5;</td></tr><tr><td>*= /= %=</td><td>乘，除，取模后在赋值</td><td>var age = 5; age *= 5;</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">10</span>;</span><br><span class="line">age += <span class="number">5</span>;<span class="comment">//相当于age = age + 5;</span></span><br><span class="line">age -= <span class="number">5</span>;<span class="comment">//age = age - 5;</span></span><br><span class="line">age *= <span class="number">10</span>;<span class="comment">//age = age * 10;</span></span><br></pre></td></tr></table></figure><p><strong>「运算符优先级」</strong></p><table><thead><tr><th>优先级</th><th>运算符</th><th>顺序</th></tr></thead><tbody><tr><td>1</td><td>小括号</td><td>()</td></tr><tr><td>2</td><td>一元运算符</td><td>! ++ - -</td></tr><tr><td>3</td><td>算数运算符</td><td>先* / % 后+-</td></tr><tr><td>4</td><td>关系运算符</td><td>&gt; &gt;= &lt; &lt;=</td></tr><tr><td>5</td><td>相等运算符</td><td>== != === !=</td></tr><tr><td>6</td><td>逻辑运算符</td><td>先&amp;&amp;后||</td></tr><tr><td>7</td><td>赋值运算符</td><td>=</td></tr><tr><td>8</td><td>逗号运算符</td><td>,</td></tr></tbody></table><ul><li>一元运算符里面逻辑非优先级最高</li><li>与比或高</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小白的前端之路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>括号法解读英语句子</title>
      <link href="/%E8%8B%B1%E8%AF%AD/%E6%8B%AC%E5%8F%B7%E6%B3%95%E8%A7%A3%E8%AF%BB%E8%8B%B1%E8%AF%AD%E5%8F%A5%E5%AD%90/"/>
      <url>/%E8%8B%B1%E8%AF%AD/%E6%8B%AC%E5%8F%B7%E6%B3%95%E8%A7%A3%E8%AF%BB%E8%8B%B1%E8%AF%AD%E5%8F%A5%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<h1 id="括号法解读英语句子"><a href="#括号法解读英语句子" class="headerlink" title="括号法解读英语句子"></a>括号法解读英语句子</h1><h2 id="目标："><a href="#目标：" class="headerlink" title="目标："></a><strong>目标：</strong></h2><ol><li>理解能力：读懂句子</li><li>表达能力：写出句子</li></ol><h2 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识:"></a><strong>基本知识:</strong></h2><ul><li><p>主语：句子描述的对象</p></li><li><p>谓语：用来描述主语</p></li><li><p>谓语动词：谓语部分中的核心的动词；<strong>一个单句有且只有一个谓语动词！</strong></p></li></ul><p>eg:</p><p>李辉教英语</p><p>李辉帅。LiHui is handsome.</p><p>句子=主干结构+修饰结构</p><p><strong>主干结构</strong>：</p><ul><li><p>主谓    I come.</p></li><li><p>主谓宾    I love you.</p></li><li><p>主谓宾宾    I give you my heart.</p></li><li><p>主谓宾补    You make me happy.</p></li><li><p>主系表    You are my everything.</p></li></ul><p><strong>修饰结构：</strong></p><p><strong>短：</strong>                            </p><ul><li><p>形容词    This is a big box.    Let me tell you something interesting.（不定代词）</p></li><li><p>副词    I really love you.</p></li></ul><p><strong>长：</strong>“四朵金花”导致英语语序和中文并不一样！</p><ul><li><p>介词短语    I love you (in my heart).    （介词….名词）</p></li><li><p>从句    LiHui is a teacher (who teaches English).    （引导词+陈述语序）</p></li><li><p>非谓语动词    Lihui is a teacher (teaching English).    (to do)/(doing)/(done)</p></li><li><p>时间状语    (Last week),I went (to the park).    表时间，无介词。</p></li></ul><p>eg：</p><p>Lihui is a teacher (teaching English) (in Beijing) (which is the capital) (of China).</p><p>(After chatting) (with LiHui) (on this matter) (in this room) (for a long time) (from 2:00) (to 4:00) (in the afternoon), I returned (to my office).</p><h2 id="断句！"><a href="#断句！" class="headerlink" title="断句！"></a>断句！</h2><ol><li><p>主干部分直接翻</p></li><li><p>遇到金花画括号</p></li><li><p>提着问题往下顺（每个括号里第一个单词，都叫挂钩单词，可以利用挂钩自问自答，将句子“顺下来”）</p></li><li><p>调字调序写中文（如果需要做翻译题，则需要调整语序；如果想学听说读写，则不必调整语序——要训练自己习惯英语思维顺序）</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语语法概念系统</title>
      <link href="/%E8%8B%B1%E8%AF%AD/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95%E6%A6%82%E5%BF%B5%E7%B3%BB%E7%BB%9F/"/>
      <url>/%E8%8B%B1%E8%AF%AD/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95%E6%A6%82%E5%BF%B5%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="英语语法概念系统"><a href="#英语语法概念系统" class="headerlink" title="英语语法概念系统"></a>英语语法概念系统</h1><h2 id="语法报菜名"><a href="#语法报菜名" class="headerlink" title="语法报菜名"></a>语法报菜名</h2><p>​      英语语法研究<strong>词法</strong>和<strong>句法</strong>。其中词法研究单词的词义和词性。词性分为<strong>实词</strong>和虚词，实词包括名形动副数，虚词包括冠代介感连。其中，实词中最难的是<strong>动词</strong>。动词研究<strong>谓语动词</strong>（心脏）和<strong>非谓语动词</strong>（脉搏）。谓语动词研究<strong>时态</strong>，<strong>语态</strong>，<strong>语气</strong>和<strong>主谓一致</strong>。而非谓语动词研究三种形式——分别是<strong>动词不定式</strong>to do，<strong>动名词</strong>doing和<strong>分词</strong>，其中分词包括<strong>现在分词</strong>doing（主动）和<strong>过去分词</strong>done（被动）。</p><p>​      以词构句，就形成语法。其中最简单的句子叫<strong>简单句</strong>（一句一主谓），简单句有五种基本结构：主谓，主谓宾，主谓宾宾，主谓宾补，主系表。把简单句变得更加简单，就是省略主语和谓语的一些成分，构成<strong>省略句</strong>。把简单句主语和谓语适当颠倒一下，就构成<strong>倒装句</strong>，倒装句分为完全倒装和不完全倒装句。</p><p>​      简单句还能变得更复杂，一种是并列连词and，or，but，so构成<strong>并列句</strong>；一种是加上从属连词构成<strong>主从复合句</strong>。主从复合句包含三种情况，分别是<strong>名词性从句</strong>，<strong>定语从句</strong>和<strong>状语从句</strong>。其中名词性从句包括<strong>主语</strong>从句，<strong>宾语</strong>从句，<strong>表语</strong>从句，<strong>同位语</strong>从句。定语从句包括<strong>限制性</strong>定语从句和<strong>非限制性</strong>定语从句，也能分成<strong>关系代词</strong>和<strong>关系副词</strong>引导的定语从句。状语从句一般有九种，分别是<strong>时间</strong>，<strong>地点</strong>，<strong>原因</strong>，<strong>结果</strong>，<strong>方式</strong>，<strong>目的</strong>，<strong>条件</strong>，<strong>让步</strong>，<strong>比较</strong>，再加上独立主格结构和强调句型就是全部英语语法。</p><p>​      一个单句有且只有一个谓语动词，当需要使用第二个动词时要么用非谓语动词，要么用从句。</p><h2 id="简要解释"><a href="#简要解释" class="headerlink" title="简要解释"></a>简要解释</h2><h3 id="实词虚词"><a href="#实词虚词" class="headerlink" title="实词虚词"></a>实词虚词</h3><p><strong>实词：大喊一声，你就懂了</strong>（有实际意义）</p><ul><li><p>名词：李辉！</p></li><li><p>动词：跑！</p></li><li><p>形容词：帅！</p></li><li><p>副词：快点！</p></li><li><p>数词：100！</p></li></ul><p><strong>虚词：大喊一声，你就懵了</strong>（无实际意义）</p><ul><li>冠词：a! an! the!</li><li>代词：I! You!</li><li>感叹词：Ah! Oh!</li><li>连词：If! becouse!</li></ul><h3 id="句子结构"><a href="#句子结构" class="headerlink" title="句子结构"></a>句子结构</h3><p><strong>句子=主语部分+谓语部分</strong></p><ul><li><p>主语：句子的主角/被描述的对象（名词）</p></li><li><p>谓语：用来说主语（动词）</p></li></ul><p><strong>eg:</strong></p><p>LiHui teaches English.</p><p>China is an open country.</p><p>(You) Come here.</p><p>李辉帅。    LiHui is handsome.</p><p>一个句子中用到多个动词时，保留一个作<strong>谓语</strong>，其他统统写成<strong>非谓语动词(主动doing/被动done/要做to do)</strong></p><p>eg: </p><p>走在回家的路上，我看到一个老头骑着自行车看报纸计划去买菜被车撞了坐在地上哭</p><p>Working home,I saw an old man ,riding a bike, reading </p><h3 id="省略句"><a href="#省略句" class="headerlink" title="省略句"></a><strong>省略句</strong></h3><ol><li>因为习惯而省略</li><li>因为重复而省略</li><li>状语从句中的省略</li></ol><p>因为习惯而省略</p><p>​        (It is a) Good morning.</p><p>​        (You are) Welcome.</p><p>​        (I )Thank you.</p><p>因为重复而省略</p><p>​        and 后，如果跟前面相同，可省略：</p><p>​        I go to school and I work hard.</p><p>​        情态动词或to 后面，如果跟前面相同，可省略：</p><p>​        -Why don’t you help him? He is your friend.</p><p>​        -Well,I know I should, but I don’t want to.</p><p>状语从句中的省略</p><ul><li><p>陈述语序：主语在前+谓语在后</p></li><li><p>完全倒装语序：谓语在前+主语在后</p></li><li><p>不完全倒装：助/系/情+主语+谓语剩余部分</p></li></ul><p>eg:</p><p>Here comes the bus.</p><p>Never should you talk with your father like that.</p><h3 id="并列和主从"><a href="#并列和主从" class="headerlink" title="并列和主从"></a>并列和主从</h3><ul><li>并列复合句：双胞胎（兄弟俩关系时好时坏，但不存在谁属于谁的关系）</li><li>主从复合句：老大+小弟（小弟属于老大，小弟是老大的一部分，小弟是老大的左膀右臂）</li></ul><p>eg:</p><p>I love you and you love me.</p><p>I love you but you don’t love me.</p><p>I know (that you love me) .（宾语从句）</p><p>I fell in love with you.</p><p>I fell in love with you( when you said you love )</p><p>I fell in love with you( where you saved my life )</p><p>I fell in love with you( because you are handsome. )</p><h3 id="独立主格"><a href="#独立主格" class="headerlink" title="独立主格"></a>独立主格</h3><p>普通句子=名词+谓语动词</p><p>独立主格=名词+非谓语动词/形容词/副词/介词</p><p>eg:</p><p>The blue sky waiting for the smoky rain, I am waitng for you.</p><p>天青色等雨，而我在等你。</p><h3 id="强调句型"><a href="#强调句型" class="headerlink" title="强调句型"></a>强调句型</h3><p>It is/was + 被强调部分+that/who+句子剩余部分</p><p>正是…….（稍微停顿一下）…..</p><p>LiHui teaches English.</p><p>It is Lihui that Teaches English.</p><p>It is English that LiHui teaches.</p><p>LiHui does teaches English.</p><p>​        </p>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS选择器</title>
      <link href="/%E5%89%8D%E7%AB%AF/CSS%E9%80%89%E6%8B%A9%E5%99%A8/"/>
      <url>/%E5%89%8D%E7%AB%AF/CSS%E9%80%89%E6%8B%A9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="1CSS选择器简介"><a href="#1CSS选择器简介" class="headerlink" title="1CSS选择器简介"></a>1CSS选择器简介</h1><h2 id="1-1CSS选择器的作用"><a href="#1-1CSS选择器的作用" class="headerlink" title="1.1CSS选择器的作用"></a>1.1CSS选择器的作用</h2><p>选择器（选择符）就是根据不同需求把不同的标签选出来，这就是选择器的作用。简单来说，就是选择标签用的。 CSS做了两件事： </p><ol><li>找到标签（选对人）</li><li>设置这些标签的样式（做对事）</li></ol><h2 id="1-2选择器分类"><a href="#1-2选择器分类" class="headerlink" title="1.2选择器分类"></a>1.2选择器分类</h2><p>在CSS中，可以根据选择器类型把选择器分为基础选择器和复合选择器。</p><ul><li>基础选择器是由单个选择器组成的 </li><li>基础选择器又包括：<strong>标签选择器、类选择器、id选择器和通配符选择器</strong></li></ul><p>复合选择器是建立在基础选择器之上，对基础选择器进行组合形成的。</p><ul><li>复合选择器可以更精准，更高效的选择目标元素（标签）</li><li>复合选择器是有两个或多个基础选择器，通过不同的方式组合而成的</li><li>常用的复合选择器包括：<strong>后代选择器，子选择器，并集选择器，伪类选择器等</strong></li></ul><h1 id="2基础选择器"><a href="#2基础选择器" class="headerlink" title="2基础选择器"></a>2基础选择器</h1><h2 id="2-1标签选择器"><a href="#2-1标签选择器" class="headerlink" title="2.1标签选择器"></a>2.1标签选择器</h2><p>标签选择器（元素选择器）是指用HTML标签名称作为选择器，按标签名称分类，为页面中某一类标签指定统一的CSS样式。 </p><p>作用: 标签选择器可以把某一类标签全部选择出来，比如所有的div标签和所有的span标签。 </p><p>优点: 能快速为页面中同类型的标签统一设置样式。 </p><p>缺点: 不能设计差异化样式，只能选择全部的当前标签。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">标签名 &#123; 属性<span class="number">1</span>:属性值<span class="number">1</span>;</span><br><span class="line">        属性<span class="number">2</span>:属性值<span class="number">2</span>; </span><br><span class="line">        属性<span class="number">3</span>:属性值<span class="number">3</span>; </span><br><span class="line">      &#125; </span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><h2 id="2-2类选择器"><a href="#2-2类选择器" class="headerlink" title="2.2类选择器"></a>2.2类选择器</h2><p>如果想要差异化选择不同的标签，单独选一个或者某几个标签，可以使用类选择器。</p><p>类选择器在HTML中以class属性表示，在CSS中，类选择器以一个点“ <strong>.</strong> ”号显示。 </p><p><strong>注意</strong> ①类选择器使用“ . ”（英文点号）进行标识，后面紧跟类名（自定义，我们自己命名的）。 </p><p>②可以理解为给这个标签起了一个名字，来表示。 </p><p>③长名称或词组可以使用中横线来为选择器命名。 </p><p>④不要使用纯数字、中文等命名，尽量使用英文字母来表示。 </p><p>⑤命名要有意义，尽量使别人一眼就知道这个类名的目的。 </p><p>⑥命名规范：见附件(Web前端开发规范手册. doc)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.类名<span class="number">1</span>  &#123;   </span><br><span class="line">    属性<span class="number">1</span>: 属性值<span class="number">1</span>; </span><br><span class="line">    属性<span class="number">2</span>: 属性值<span class="number">2</span>; </span><br><span class="line">    属性<span class="number">3</span>: 属性值<span class="number">3</span>;     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;类名1 类名2&quot;</span>&gt;</span> 样例 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>各个类名中间用空格隔开</li><li>简单理解：就是给某个标签添加了多个类，或者这个标签有多个名字</li><li>这个标签就可以分别具有这些类名的样式</li><li>从而节省css代码，统一修改也非常方便</li><li>多个类名选择器在后期布局比较复杂的情况下，还是较多使用的</li></ul><h2 id="2-3id选择器"><a href="#2-3id选择器" class="headerlink" title="2.3id选择器"></a>2.3id选择器</h2><p>id选择器可以为标有特定id的HTML元素指定特定的样式。</p><p>HTML元素以id属性来设置id选择器，CSS中id选择器以“ <strong>#</strong> ”来定义。</p><p><strong>注意</strong>：id属性只能在每个HTML文档中出现一次</p><p><strong>口诀</strong>：样式#定义，结构id调用，只能调用一次，别人切勿使用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#id</span>名 &#123; 属性<span class="number">1</span>:属性值<span class="number">1</span>; </span><br><span class="line">        属性<span class="number">2</span>:属性值<span class="number">2</span>; </span><br><span class="line">        属性<span class="number">3</span>:属性值<span class="number">3</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;id名&quot;</span>&gt;</span>样例<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>id选择器和类选择器的区别</strong> </p><p>①类选择器(class)好比人的名字，一个人可以有多个名字，同时一个名字也可以被多个人使用。 </p><p>②id选择器好比人的身份证号码β、全中国是唯一的,不得重复。 </p><p>③id选择器和类选择器最大的不同在于使用次数上。 </p><p>④类选择器在修改样式中用的最多，id选择器一般用于页面唯一性的元素上，经常和 JavaScript 搭配使用。</p><h2 id="2-4通配符选择器"><a href="#2-4通配符选择器" class="headerlink" title="2.4通配符选择器"></a>2.4通配符选择器</h2><p>在CSS中，通配符选择器使用“ ***** ”定义，它表示选取页面中所有元素(标签)。</p><ul><li>通配符选择器不需要调用，自动就给所有的元素使用样式</li><li>特殊情况才使用，后面讲解使用</li></ul><p><strong>注意：</strong>会匹配页面所有的元素，降低页面响应速度，不建议随便使用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* &#123; 属性<span class="number">1</span>:属性值<span class="number">1</span>; </span><br><span class="line">    属性<span class="number">2</span>:属性值<span class="number">2</span>; </span><br><span class="line">    属性<span class="number">3</span>:属性值<span class="number">3</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如下面代码，使用通配符选择器定义CSS样式，清除所有HTML标记的默认边距。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* &#123;</span><br><span class="line">   <span class="attribute">margin</span>: <span class="number">0</span>;                    <span class="comment">/* 定义外边距*/</span></span><br><span class="line">   <span class="attribute">padding</span>: <span class="number">0</span>;                   <span class="comment">/* 定义内边距*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-5基础选择器总结"><a href="#2-5基础选择器总结" class="headerlink" title="2.5基础选择器总结"></a>2.5基础选择器总结</h2><table><thead><tr><th>标签选择器</th><th>作用</th><th>特点</th><th>使用情况</th><th>用法</th></tr></thead><tbody><tr><td>标签选择器</td><td>可以选出所有相同的标签</td><td>不能差异化选择</td><td>较多</td><td>p {color: red}</td></tr><tr><td>类选择器</td><td>可以选出一个或多个标签</td><td>可以根据需求选择</td><td>最多</td><td>.nav {color: red}</td></tr><tr><td>id选择器</td><td>一次只能选择一个标签</td><td>id属性在每个html文档中只能出现一次</td><td>一般和js搭配</td><td>#nav {color: red}</td></tr><tr><td>通配符选择器</td><td>选择所有标签</td><td>选择过多，有部分不需要</td><td>特殊情况使用</td><td>* {color: red}</td></tr></tbody></table><p>每个基础选择器都有使用场景，都需要掌握</p><p>如果是修改样式，类选择器是使用最多的</p><h1 id="3复合选择器"><a href="#3复合选择器" class="headerlink" title="3复合选择器"></a>3复合选择器</h1><h2 id="3-1后代选择器"><a href="#3-1后代选择器" class="headerlink" title="3.1后代选择器"></a>3.1后代选择器</h2><p>后代选择器又称为包含选择器，可以选择父元素里面的子元素，其写法就是把外层标签写在前面，内层标签写在后面，中间用空格分隔，当标签发生嵌套时，内层标签就成为外层标签的后代。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">元素<span class="number">1</span> 元素<span class="number">2</span> &#123;属性:属性值;</span><br><span class="line">    属性:属性值;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.class</span> <span class="selector-tag">h3</span> &#123;<span class="attribute">color</span>:red;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">16px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述语法表示选择元素1里面的所有元素2（后代元素）</p><ul><li>元素1和元素2中间用空格隔开</li><li>元素1是父级，元素2是子级，最终选择的是元素2</li><li>元素2可以是儿子，也可以是孙子等，只要是元素1 的后代即可</li><li>元素1和元素2可以是任意基础选择器</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/CSS4.png"></p><h2 id="3-2子选择器"><a href="#3-2子选择器" class="headerlink" title="3.2子选择器"></a>3.2子选择器</h2><p>子元素选择器（子选择器）只能选择作为某元素的最近一级子元素，简单理解就是选亲儿子元素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">元素<span class="number">1</span>&gt;元素<span class="number">2</span> &#123;样式声明</span><br><span class="line">    属性:属性值;</span><br><span class="line">    属性:属性值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述语法表示选择元素1里面的所有直接后代（子元素）元素2.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&gt;<span class="selector-tag">p</span> &#123;样式声明&#125;  <span class="comment">/*选择div里面所有最近一级p标签元素*/</span></span><br></pre></td></tr></table></figure><ul><li>元素1和元素2中间用大于号隔开</li><li>元素1是父级，元素2是子级，最终选择的是元素2</li><li>元素2必须是亲儿子，其孙子，重孙之类都不归他管，你也可以叫他亲儿子选择器</li></ul><h2 id="3-3交集选择器"><a href="#3-3交集选择器" class="headerlink" title="3.3交集选择器"></a>3.3交集选择器</h2><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/CSS5.png"></p><p>其中第一个为标签选择器，第二个为class选择器，两个选择器之间<code>不能有空格</code>，如h3.special。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">交集选择器是并且的意思,即...又...的意思</span><br><span class="line">比如：   </span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.one</span>    </span><br><span class="line"><span class="comment">/* 选择的是： 类名为 .one 的段落标签。</span></span><br><span class="line"><span class="comment">用的相对来说比较少，不建议使用。*/</span></span><br></pre></td></tr></table></figure><h2 id="3-4并集选择器"><a href="#3-4并集选择器" class="headerlink" title="3.4并集选择器"></a>3.4并集选择器</h2><p>并集选择器可以选择多组标签，同时为他们定义相同的样式，通常用于整体声明。</p><p>并集选择器是个选择器通过英文逗号“,”连接而成，任何形式的选择器都可以作为并集选择器的一部分。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">元素<span class="number">1</span>,元素<span class="number">2</span> &#123;样式声明&#125;</span><br></pre></td></tr></table></figure><p>上述语法表示选择元素1和元素2</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span>,<span class="selector-tag">div</span> &#123;样式声明&#125; <span class="comment">/*选择ul和div标签元素*/</span></span><br><span class="line">比如  </span><br><span class="line"><span class="selector-class">.one</span>, </span><br><span class="line"><span class="selector-tag">p</span> , </span><br><span class="line"><span class="selector-id">#test</span> &#123;<span class="attribute">color</span>: <span class="number">#F00</span>;&#125;  </span><br><span class="line"><span class="comment">/*表示   .one 和 p  和 #test 这三个选择器都会执行颜色为红色。 </span></span><br><span class="line"><span class="comment">通常用于集体声明。 */</span></span><br></pre></td></tr></table></figure><ul><li>元素1和元素2中间用逗号隔开</li><li>逗号可以理解为和的意思</li><li>并集选择器通常用于集体声明</li></ul><h2 id="3-5链接伪类选择器"><a href="#3-5链接伪类选择器" class="headerlink" title="3.5链接伪类选择器"></a>3.5链接伪类选择器</h2><p>伪类选择器用于向某些选择器添加特殊的效果，比如给链接添加特殊效果，或选择第一个，第n个元素。</p><p>伪类选择器书写最大的特点是用冒号“:”表示，比如：hover,first-child.</p><p>因为伪类选择器很多，比如有链接伪类，结构伪类等，所以这里先给大家讲解常用的链接伪类选择器。</p><p>链接伪类，是利用交集选择器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span>            <span class="comment">/*选择所有未被访问的链接*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>         <span class="comment">/*选择所有已被访问的链接*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>           <span class="comment">/*选择鼠标指针位于其上的链接*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span>          <span class="comment">/*选择活动链接（鼠标按下未弹起的链接）*/</span></span><br></pre></td></tr></table></figure><p>用于向某些选择器添加特殊的效果。写的时候，他们的顺序尽量不要颠倒,按照lvha的顺序。否则可能引起错误。</p><p>链接伪类选择器注意事项</p><ol><li>为确保生效，请按照LVHA的顺序声明：link visited hover active</li><li>记忆法：love hate或者Lv包包hao</li><li>因为a链接在浏览器中具有默认样式，所以我们实际工作中都需要给链接单独指定样式</li></ol><p>实际工作中，很少写全四个状态，一般写法如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;   <span class="comment">/* a是标签选择器  所有的链接 */</span></span><br><span class="line">   <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">   <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">   <span class="attribute">color</span>: gray;</span><br><span class="line">      <span class="attribute">text-decoration</span>: none; <span class="comment">/* 清除链接默认的下划线*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;   <span class="comment">/* :hover 是链接伪类选择器 鼠标经过 */</span></span><br><span class="line">   <span class="attribute">color</span>: red; <span class="comment">/*  鼠标经过的时候，由原来的 灰色 变成了红色 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-6foucs伪类选择器"><a href="#3-6foucs伪类选择器" class="headerlink" title="3.6foucs伪类选择器"></a>3.6foucs伪类选择器</h2><p>foucs伪类选择器用于选取获得焦点的表单元素。</p><p>焦点就是光标，一般情况下类表单元素才能获取，因此这个选择器也主要针对表单元素来说。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span>:foucs &#123;</span><br><span class="line">    background-color:yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-7复合选择器总结"><a href="#3-7复合选择器总结" class="headerlink" title="3.7复合选择器总结"></a>3.7复合选择器总结</h2><table><thead><tr><th>选择器</th><th>作用</th><th>特征</th><th>使用情况</th><th>隔开符号及用法</th></tr></thead><tbody><tr><td>后代选择器</td><td>用来选择后代元素</td><td>可以是子孙后代</td><td>较多</td><td>符号是空格.nav a</td></tr><tr><td>子选择器</td><td>选择最近一级元素</td><td>只选亲儿子</td><td>较少</td><td>符号是大于.nav&gt;a</td></tr><tr><td>交集选择器</td><td>选择两个标签交集部分</td><td>既是 又是</td><td>较少</td><td>没有符号 p.one</td></tr><tr><td>并集选择器</td><td>选择某些相同样式的元素</td><td>可以用于集体声明</td><td>较多</td><td>符号是逗号.nav,a</td></tr><tr><td>链接伪类选择器</td><td>选择不同状态的链接</td><td>跟链接相关</td><td>较多</td><td>重点记住a{}和a:hover实际开发的写法</td></tr><tr><td>foucs伪类选择器</td><td>选择获得光标的表单</td><td>跟表单相关</td><td>较少</td><td>input:focus记住这个写法</td></tr></tbody></table><h1 id="4团队约定"><a href="#4团队约定" class="headerlink" title="4团队约定"></a>4团队约定</h1><ol><li>尽量少用通配符选择器 <code>*</code>。</li><li>尽量少用ID选择器</li><li>不使用无具体语义定义的标签选择器。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 推荐 */</span></span><br><span class="line"><span class="selector-class">.jdc</span> &#123;&#125;</span><br><span class="line"><span class="selector-tag">li</span> &#123;&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 不推荐 */</span></span><br><span class="line">*&#123;&#125;</span><br><span class="line"><span class="selector-id">#jdc</span> &#123;&#125;</span><br><span class="line"><span class="selector-tag">div</span>&#123;&#125;   因为<span class="selector-tag">div</span> 没有语义，我们尽量少用</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小白的前端之路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS基础</title>
      <link href="/%E5%89%8D%E7%AB%AF/CSS%E5%9F%BA%E7%A1%80/"/>
      <url>/%E5%89%8D%E7%AB%AF/CSS%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="css简介"><a href="#css简介" class="headerlink" title="css简介"></a>css简介</h1><h2 id="1-1HTML的局限性"><a href="#1-1HTML的局限性" class="headerlink" title="1.1HTML的局限性"></a>1.1HTML的局限性</h2><ul><li>HTML满足不了设计者的需求，可以将网页结构与样式相分离，这样就可以在不更改网页结构的前提下，更换网站的样式。</li><li>操作html属性不方便</li><li>HTML里面添加样式带来的是无尽的臃肿和繁琐</li></ul><h2 id="1-2CSS网页美容师"><a href="#1-2CSS网页美容师" class="headerlink" title="1.2CSS网页美容师"></a>1.2CSS网页美容师</h2><p>CSS是<font color="red">层叠样式表</font>(Cascading Style Sheets)的简称,有时我们也会称之为CSS样式表或级联样式表，CSS是也是一种<font color="red">标记语言</font>。主要用于设置HTML页面中的<font color="red">文本内容</font>(字体、大小、对齐方式等)、<font color="red">图片外形</font>(宽高、边框样式、边距等）以及<font color="red">版面布局</font>和<font color="red">外观显示样式</font>。CSS让我们的网页更加丰富多彩，布局更加灵活自如。简单理解：<strong>CSS可以美化HTML，让HTML更漂亮，让页面布局更简洁。</strong></p><p><strong>总结</strong>：</p><ul><li><p> HTML主要做结构，显示元素内容. </p></li><li><p> CSS美化HTML，布局网页.</p></li><li><p> CSS最大价值：由HTML专注去做结构呈现，样式交给   CSS，即结构(HTML)与样式(CSS)相分离</p></li></ul><h2 id="1-3CSS语法规范"><a href="#1-3CSS语法规范" class="headerlink" title="1.3CSS语法规范"></a>1.3CSS语法规范</h2><p>使用HTML时，需要遵从一定的规范，CSS也是如此。要想熟练地使用CSS对网页进行修饰，首先需要了解CSS样式规则。 CSS规则由两个主要的部分构成：<strong>选择器以及一条或多条声明</strong>。 </p><ol><li><p>选择器是用于指定CSS样式的<font color="red">HTML标签</font>，花括号内是对该对象设置的具体样式 </p></li><li><p>属性和属性值以“<font color="red">键值对</font>”的形式出现 </p></li><li><p>属性是对指定的对象设置的样式属性，例如字体大小、文本颜色等 </p></li><li><p>属性和属性值之间用英文“<font color="red"><strong>:</strong></font>”分开 </p></li><li><p>多个“键值对”之间用英文“<font color="red"><strong>;</strong></font>”进行区分</p></li></ol><h2 id="1-4CSS注释"><a href="#1-4CSS注释" class="headerlink" title="1.4CSS注释"></a>1.4CSS注释</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*这是注释*/</span></span><br></pre></td></tr></table></figure><h1 id="2-CSS引入方式"><a href="#2-CSS引入方式" class="headerlink" title="2.CSS引入方式"></a>2.CSS引入方式</h1><p>css的三种样式表</p><p>按照CSS样式书写的位置（或者引入的方式），css样式表可以分为三大类：</p><ol><li>内部样式表（嵌入式）</li><li>行内样式表（行内式）</li><li>外部样式表（外链式）</li></ol><h2 id="2-1内部样式表"><a href="#2-1内部样式表" class="headerlink" title="2.1内部样式表"></a>2.1内部样式表</h2><p>内部样式表（内嵌样式表）是写到html页面内部，是将所有css代码抽取出来，单独放到一个style标签中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/CSS&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    选择器（选择的标签） &#123; </span></span><br><span class="line"><span class="css">      属性<span class="number">1</span>: 属性值<span class="number">1</span>;</span></span><br><span class="line"><span class="css">      属性<span class="number">2</span>: 属性值<span class="number">2</span>; </span></span><br><span class="line"><span class="css">      属性<span class="number">3</span>: 属性值<span class="number">3</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="css">     <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">     <span class="attribute">font-size</span>: <span class="number">12px</span>; </span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>style标签理论上可以放在html文档的任何地方，但一般会放在文档的<head>标签中</li><li>通过此种方法，可以方便控制当前整个页面中元素样式设置</li><li>代码结构清晰，但并没有实现结构与样式完全分离</li><li>使用内部样式表设定CSS，通常被称为嵌入式引入，这种是练习常用的方法</li></ul><h2 id="2-2行内样式表"><a href="#2-2行内样式表" class="headerlink" title="2.2行内样式表"></a>2.2行内样式表</h2><p>行内样式表（内联样式表）是在元素标签内部的style属性中设定CSS样式，适合于修改简单样式。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;标签名 style=&quot;属性1:属性值1; 属性2:属性值2; 属性3:属性值3;&quot;&gt; </span><br><span class="line">    内容 </span><br><span class="line">&lt;/标签名&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color: red; font-size: 12px;&quot;</span>&gt;</span></span><br><span class="line">    示例</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>style其实就是标签的属性</li><li>在双引号中间，写法要符合CSS规范</li><li>可以控制当前的标签设置样式</li><li>书写繁琐，没有体现结构与样式相分离的思想，不推荐大量使用</li><li>使用行内样式表设定CSS，通常被称为行内式引入</li></ul><h2 id="2-3外部样式表"><a href="#2-3外部样式表" class="headerlink" title="2.3外部样式表"></a>2.3外部样式表</h2><p>实际开发中使用的都是外部样式表，适合样式较多的情况，核心是样式单独写到CSS文件中，之后把CSS文件引入到HTML页面中使用</p><p>引入外部样式表分为两步：</p><ol><li>新建一个后缀名为**.css**的样式文件，把所有CSS代码都放在此文件中</li><li>在HTML页面中，使用<link>标签引入这个文件</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>rel</td><td>定义当前文档与被链接文档之间的关系，在这里需要指定为“stylesheet”，表示被链接的文档是一个样式表文件</td></tr><tr><td>href</td><td>定义所链接外部样式表文件的URL，可以是相对路径，也可以是绝对路径</td></tr></tbody></table><p>在使用外部样式表设定CSS，通常也被称为外链式和链接式引入，这种方法是开发中常用的方法。</p><h2 id="2-4CSS引入方法总结"><a href="#2-4CSS引入方法总结" class="headerlink" title="2.4CSS引入方法总结"></a>2.4CSS引入方法总结</h2><table><thead><tr><th>样式表</th><th>优点</th><th>缺点</th><th>使用情况</th><th>控制范围</th></tr></thead><tbody><tr><td>内部样式表</td><td>部分结构与样式相分离</td><td>没有彻底分离</td><td>较多</td><td>控制一个页面</td></tr><tr><td>行内样式表</td><td>书写方便，权重高</td><td>结构样式混合</td><td>较少</td><td>控制一个标签</td></tr><tr><td>外部样式表</td><td>完全结构与样式相分离</td><td>需要引入</td><td>最多</td><td>控制多个页面</td></tr></tbody></table><h1 id="3-CSS三大特性"><a href="#3-CSS三大特性" class="headerlink" title="3.CSS三大特性"></a>3.CSS三大特性</h1><p>CSS有三个非常重要的特性：<font color="red">层叠性</font>、<font color="red"><br>继承性</font>、<font color="red">优先级</font></p><h2 id="3-1层叠性"><a href="#3-1层叠性" class="headerlink" title="3.1层叠性"></a>3.1层叠性</h2><p>相同选择器给设置相同的样式，此时一个样式就会<font color="red">覆盖（层叠）</font>另一个冲突的样式。层叠性主要解决样式冲突的问题。</p><p><strong>层叠性原则：</strong></p><ul><li>样式冲突，遵循的是<font color="red">就近原则</font>，哪个样式离结构近，就执行哪个样式</li><li>样式不冲突，不会层叠</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/css1.png" alt="层叠性"></p><h2 id="3-2继承性"><a href="#3-2继承性" class="headerlink" title="3.2继承性"></a>3.2继承性</h2><p>现实中的继承：我们继承了父亲的姓氏</p><p>CSS中的继承：子标签会继承父标签的某些样式，如文本颜色和字号</p><p>简单理解就是<font color="red">子承父业</font>。</p><ul><li>恰当的使用继承性可以简化代码，降低CSS样式的复杂性</li><li>子元素可以继承父元素的样式（text- font- line-这些元素开头的可以继承，以及color属性）</li><li>继承性口诀：<strong>龙生龙，凤生凤，老鼠的孩子会打洞</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/css2.png" alt="继承性"></p><h2 id="3-3优先级"><a href="#3-3优先级" class="headerlink" title="3.3优先级"></a>3.3优先级</h2><p>css特殊性</p><p><strong>概念：</strong>定义CSS样式时，经常出现两个或更多规则应用在同一元素上，此时如果：</p><ol><li>选择器相同，则执行层叠性</li><li>选择器不同，就会出现优先级的问题</li></ol><p>关于CSS权重，我们需要一套计算公式来去计算，这个就是 CSS Specificity（特殊性）。</p><p>选择器权重如下表所示</p><table><thead><tr><th>选择器</th><th>选择器权重</th></tr></thead><tbody><tr><td>继承或者*</td><td>0，0，0，0</td></tr><tr><td>元素选择器（每个元素）</td><td>0，0，0，1</td></tr><tr><td>类，伪类选择器（每个类，伪类）</td><td>0，0，1，0</td></tr><tr><td>id选择器（每个id）</td><td>0，1，0，0</td></tr><tr><td>行内样式style=””（每个行内样式）</td><td>1，0，0，0</td></tr><tr><td>每个!important 最重要的</td><td>无穷大</td></tr></tbody></table><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123; <span class="attribute">color</span>: pink <span class="meta">!important</span>; &#125;</span><br></pre></td></tr></table></figure><p><strong>优先级注意点：</strong></p><ol><li>权重是由4组数字组成的，但是不会有进位</li><li>可以理解为<strong>类选择器永远大于元素选择器</strong>，<strong>id选择器永远大于类选择器</strong>，以此类推</li><li>等级判断从左到右，左面的最大，一级大于一级，如果某一位数值相同，则判断下一位数值</li><li>可以简单记忆：<strong>通配符和继承权重为0，标签选择器为1，类（伪类）选择器为10，id选择器100，行内样式表为1000，！important无穷大</strong></li><li>继承权重是0，如果该元素没有直接选中，不管父元素权重多高，子元素得到的权重都是0</li></ol><p><strong>权重叠加：</strong></p><p>如果是复合选择器，则会有权重叠加，需要计算权重。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">ul</span>  <span class="selector-tag">li</span>   ------&gt;      <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span></span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span>   ------&gt;      <span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>      -----—&gt;      <span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span></span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-tag">a</span>       ------&gt;      <span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>我们修改样式，一定要看该标签有没有被选中</li><li>如果选中了，那么以上面的公式来计权重。谁大听谁的。</li><li>如果没有选中，那么权重是0，因为继承的权重为0.</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/css3.png" alt="优先级"></p><h1 id="4-代码风格"><a href="#4-代码风格" class="headerlink" title="4.代码风格"></a>4.代码风格</h1><p><strong>团队约定：</strong></p><ul><li>展开格式</li><li>样式选择器，属性名，属性值关键字全部使用小写字母书写，属性字符串允许使用大小写</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*1.紧凑格式 (Compact)不推荐*/</span></span><br><span class="line"><span class="selector-tag">h3</span> &#123; <span class="attribute">color</span>: deeppink;<span class="attribute">font-size</span>: <span class="number">20px</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*展开格式（推荐）*/</span></span><br><span class="line"><span class="selector-tag">h3</span> &#123;</span><br><span class="line"> <span class="attribute">color</span>: deeppink;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 推荐 */</span></span><br><span class="line"><span class="selector-tag">h3</span>&#123;</span><br><span class="line"> <span class="attribute">color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 不推荐 */</span></span><br><span class="line"><span class="selector-tag">H3</span>&#123;</span><br><span class="line"> <span class="attribute">COLOR</span>: PINK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小白的前端之路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML基础</title>
      <link href="/%E5%89%8D%E7%AB%AF/HTML%E5%9F%BA%E7%A1%80/"/>
      <url>/%E5%89%8D%E7%AB%AF/HTML%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>前端开发<br>前端开发<br>前端开发<br>前端开发<br>前端开发</p><p>前端开发<br>前端开发<br>前端开发</p><p>前端开发</p><p>前端开发</p><p>前端开发</p><p>前端开发</p><p>使用HTML时，需要遵从一定的规范，CSS也是如此。要想熟练地使用CSS对网页进行修饰，首先需要了解CSS样式规则。<br>CSS规则由两个主要的部分构成：选择器以及一条或多条声明。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;标签名 style=&quot;属性1:属性值1; 属性2:属性值2; 属性3:属性值3;&quot;&gt; </span><br><span class="line">    内容 </span><br><span class="line">&lt;/标签名&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color: red; font-size: 12px;&quot;</span>&gt;</span></span><br><span class="line">    示例</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/css2.png" alt="继承性"></p><ol><li><p>选择器是用于指定CSS样式的HTML标签，花括号内是对该对象设置的具体样式 </p></li><li><p>属性和属性值以“键值对”的形式出现 </p></li><li><p>属性是对指定的对象设置的样式属性，例如字体大小、文本颜色等 </p></li><li><p>属性和属性值之间用英文“<strong>：</strong>”分开 </p></li><li><p>多个“键值对”之间用英文“**;** “进行区分</p><h1 id="CSS基础"><a href="#CSS基础" class="headerlink" title="CSS基础"></a>CSS基础</h1></li></ol><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>待写</p><h2 id="1-css简介"><a href="#1-css简介" class="headerlink" title="1.css简介"></a>1.css简介</h2><h3 id="1-1HTML的局限性"><a href="#1-1HTML的局限性" class="headerlink" title="1.1HTML的局限性"></a>1.1HTML的局限性</h3><ul><li>HTML满足不了设计者的需求，可以将网页结构与样式相分离，这样就可以在不更改网页结构的前提下，更换网站的样式。</li><li>操作html属性不方便</li><li>HTML里面添加样式带来的是无尽的臃肿和繁琐</li></ul><h3 id="1-2CSS网页美容师"><a href="#1-2CSS网页美容师" class="headerlink" title="1.2CSS网页美容师"></a>1.2CSS网页美容师</h3><p>CSS是层叠样式表(Cascading Style Sheets)的简称,有时我们也会称之为CSS样式表或级联样式表，CSS是也是一种标记语言。主要用于设置HTML页面中的文本内容(字体、大小、对齐方式等)、图片的外形(宽高、边框样式、边距等）以及版面的布局和外观显示样式。CSS让我们的网页更加丰富多彩，布局更加灵活自如。简单理解：CSS可以美化HTML，让HTML更漂亮，让页面布局更简洁。</p><p><strong>总结</strong>：</p><ul><li><p> HTML主要做结构，显示元素内容. </p></li><li><p> CSS美化HTML，布局网页.</p></li><li><p> CSS最大价值：由HTML专注去做结构呈现，样式交给   CSS，即结构(HTML)与样式(CSS)相分离</p></li></ul><h3 id="1-3CSS语法规范"><a href="#1-3CSS语法规范" class="headerlink" title="1.3CSS语法规范"></a>1.3CSS语法规范</h3><p>使用HTML时，需要遵从一定的规范，CSS也是如此。要想熟练地使用CSS对网页进行修饰，首先需要了解CSS样式规则。 CSS规则由两个主要的部分构成：选择器以及一条或多条声明。 </p><ol><li><p>选择器是用于指定CSS样式的HTML标签，花括号内是对该对象设置的具体样式 </p></li><li><p>属性和属性值以“键值对”的形式出现 </p></li><li><p>属性是对指定的对象设置的样式属性，例如字体大小、文本颜色等 </p></li><li><p>属性和属性值之间用英文“<strong>：</strong>”分开 </p></li><li><p>多个“键值对”之间用英文“**;** “进行区分</p></li></ol><h3 id="1-4CSS注释"><a href="#1-4CSS注释" class="headerlink" title="1.4CSS注释"></a>1.4CSS注释</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*这是注释*/</span></span><br></pre></td></tr></table></figure><h2 id="3-CSS三大特性"><a href="#3-CSS三大特性" class="headerlink" title="3.CSS三大特性"></a>3.CSS三大特性</h2><p>CSS有三个非常重要的特性：层叠性、继承性、优先级</p><h3 id="3-1层叠性"><a href="#3-1层叠性" class="headerlink" title="3.1层叠性"></a>3.1层叠性</h3><p>相同选择器给设置相同的样式，此时一个样式就会覆盖（层叠）另一个冲突的样式。层叠性主要解决样式冲突的问题。</p><p><strong>层叠性原则：</strong></p><ul><li>样式冲突，遵循的是就近原则，哪个样式离结构近，就执行哪个样式</li><li>样式不冲突，不会层叠</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/css1.png" alt="层叠性"></p><h3 id="3-2继承性"><a href="#3-2继承性" class="headerlink" title="3.2继承性"></a><strong>3.2继承性</strong></h3><p>现实中的继承：我们继承了父亲的姓氏</p><p>CSS中的继承：子标签会继承父标签的某些样式，如文本颜色和字号</p><p>简单理解就是子承父业。</p><ul><li>恰当的使用继承性可以简化代码，降低CSS样式的复杂性</li><li>子元素可以继承父元素的样式（text- font- line-这些元素开头的可以继承，以及color属性）</li><li>继承性口诀：龙生龙，凤生凤，老鼠的孩子会打洞</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/css2.png" alt="继承性"></p><h3 id="3-3优先级"><a href="#3-3优先级" class="headerlink" title="3.3优先级"></a>3.3优先级</h3><p>css特殊性</p><p><strong>概念：</strong>定义CSS样式时，经常出现两个或更多规则应用在同一元素上，此时如果：</p><ol><li>选择器相同，则执行层叠性</li><li>选择器不同，就会出现优先级的问题</li></ol><p>关于CSS权重，我们需要一套计算公式来去计算，这个就是 CSS Specificity（特殊性）。</p><p>选择器权重如下表所示</p><table><thead><tr><th>选择器</th><th>选择器权重</th></tr></thead><tbody><tr><td>继承或者*</td><td>0，0，0，0</td></tr><tr><td>元素选择器（每个元素）</td><td>0，0，0，1</td></tr><tr><td>类，伪类选择器（每个类，伪类）</td><td>0，0，1，0</td></tr><tr><td>id选择器（每个id）</td><td>0，1，0，0</td></tr><tr><td>行内样式style=””（每个行内样式）</td><td>1，0，0，0</td></tr><tr><td>每个!important 最重要的</td><td>无穷大</td></tr></tbody></table><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123; <span class="attribute">color</span>: pink <span class="meta">!important</span>; &#125;</span><br></pre></td></tr></table></figure><p><strong>优先级注意点：</strong></p><ol><li>权重是由4组数字组成的，但是不会有进位</li><li>可以理解为类选择器永远大于元素选择器，id选择器永远大于类选择器，以此类推</li><li>等级判断从左到右，左面的最大，一级大于一级，如果某一位数值相同，则判断下一位数值</li><li>可以简单记忆：通配符和继承权重为0，标签选择器为1，类（伪类）选择器为10，id选择器100，行内样式表为1000，！important无穷大</li><li>继承权重是0，如果该元素没有直接选中，不管父元素权重多高，子元素得到的权重都是0</li></ol><p><strong>权重叠加：</strong></p><p>如果是复合选择器，则会有权重叠加，需要计算权重。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">ul</span>  <span class="selector-tag">li</span>   ------&gt;      <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span></span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span>   ------&gt;      <span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>      -----—&gt;      <span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span></span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-tag">a</span>       ------&gt;      <span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>我们修改样式，一定要看该标签有没有被选中</li><li>如果选中了，那么以上面的公式来计权重。谁大听谁的。</li><li>如果没有选中，那么权重是0，因为继承的权重为0.</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lonely2022/picture/img/css3.png" alt="优先级"></p><h2 id="4-代码风格"><a href="#4-代码风格" class="headerlink" title="4.代码风格"></a>4.代码风格</h2><p><strong>团队约定：</strong></p><ul><li>展开格式</li><li>样式选择器，属性名，属性值关键字全部使用小写字母书写，属性字符串允许使用大小写</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*1.紧凑格式 (Compact)不推荐*/</span></span><br><span class="line"><span class="selector-tag">h3</span> &#123; <span class="attribute">color</span>: deeppink;<span class="attribute">font-size</span>: <span class="number">20px</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*展开格式（推荐）*/</span></span><br><span class="line"><span class="selector-tag">h3</span> &#123;</span><br><span class="line"> <span class="attribute">color</span>: deeppink;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 推荐 */</span></span><br><span class="line"><span class="selector-tag">h3</span>&#123;</span><br><span class="line"> <span class="attribute">color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 不推荐 */</span></span><br><span class="line"><span class="selector-tag">H3</span>&#123;</span><br><span class="line"> <span class="attribute">COLOR</span>: PINK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2行内样式表"><a href="#2-2行内样式表" class="headerlink" title="2.2行内样式表"></a>2.2行内样式表</h3><p>行内样式表（内联样式表）是在元素标签内部的style属性中设定CSS样式，适合于修改简单样式。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;标签名 style=&quot;属性1:属性值1; 属性2:属性值2; 属性3:属性值3;&quot;&gt; </span><br><span class="line">    内容 </span><br><span class="line">&lt;/标签名&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color: red; font-size: 12px;&quot;</span>&gt;</span></span><br><span class="line">    示例</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>style其实就是标签的属性</li><li>在双引号中间，写法要符合CSS规范</li><li>可以控制当前的标签设置样式</li><li>书写繁琐，没有体现结构与样式相分离的思想，不推荐大量使用</li><li>使用行内样式表设定CSS，通常被称为行内式引入</li></ul><h3 id="2-3外部样式表"><a href="#2-3外部样式表" class="headerlink" title="2.3外部样式表"></a>2.3外部样式表</h3><p>实际开发中使用的都是外部样式表，适合样式较多的情况，核心是样式单独写到CSS文件中，之后把CSS文件引入到HTML页面中使用</p><p>引入外部样式表分为两步：</p><ol><li>新建一个后缀名为**.css**的样式文件，把所有CSS代码都放在此文件中</li><li>在HTML页面中，使用link标签引入这个文件</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;index.css&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>rel</td><td>定义当前文档与被链接文档之间的关系，在这里需要指定为“stylesheet”，表示被链接的文档是一个样式表文件</td></tr><tr><td>href</td><td>定义所链接外部样式表文件的URL，可以是相对路径，也可以是绝对路径</td></tr></tbody></table><p>在使用外部样式表设定CSS，通常也被称为外链式和链接式引入，这种方法是开发中常用的方法。</p><h3 id="2-4CSS引入方法总结"><a href="#2-4CSS引入方法总结" class="headerlink" title="2.4CSS引入方法总结"></a>2.4CSS引入方法总结</h3><table><thead><tr><th>样式表</th><th>优点</th><th>缺点</th><th>使用情况</th><th>控制范围</th></tr></thead><tbody><tr><td>内部样式表</td><td>部分结构与样式相分离</td><td>没有彻底分离</td><td>较多</td><td>控制一个页面</td></tr><tr><td>行内样式表</td><td>书写方便，权重高</td><td>结构样式混合</td><td>较少</td><td>控制一个标签</td></tr><tr><td>外部样式表</td><td>完全结构与样式相分离</td><td>需要引入</td><td>最多</td><td>控制多个页面</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小白的前端之路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随记</title>
      <link href="/%E9%9A%8F%E8%AE%B0/"/>
      <url>/%E9%9A%8F%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p><strong>一个满眼是你的人才配得上你全部的爱一个满眼是你的人才配得上你全部的爱</strong></p><p>风已经吹过我们的一页了，也该释怀了。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 感想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="/%E6%B5%8B%E8%AF%95/"/>
      <url>/%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>##二级标题<br>web前端开发web前端开发web前端开发<br>web前端开发web前端开发web前端开发<br>web前端开发web前端开发web前端开发<br>web前端开发web前端开发web前端开发</p><p>###三级标题<br>web前端开发web前端开发web前端开发<br>web前端开发web前端开发web前端开发<br>web前端开发web前端开发web前端开发</p><p>##实例演示<br>wivbiurgeuiwvevbuiewveiuwiwvnioewub<br>wivbiurgeuiwvevbuiewveiuwiwvnioewub<br>wivbiurgeuiwvevbuiewveiuwiwvnioewub<br>wivbiurgeuiwvevbuiewveiuwiwvnioewub</p><p>###三级标题1<br>wivbiurgeuiwvevbuiewveiuwiwvnioewub<br>wivbiurgeuiwvevbuiewveiuwiwvnioewub</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;hello world!\n&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/hello-world/"/>
      <url>/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
